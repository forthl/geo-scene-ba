Index: src/precompute_knns.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from data import ContrastiveSegDataset\nfrom modules import *\nimport os\nfrom os.path import join\nimport hydra\nimport numpy as np\nimport torch.multiprocessing\nimport torch.multiprocessing\nimport torch.nn as nn\nfrom omegaconf import DictConfig, OmegaConf\nfrom pytorch_lightning.utilities.seed import seed_everything\nfrom tqdm import tqdm\n\n\ndef get_feats(model, loader):\n    all_feats = []\n    for pack in tqdm(loader):\n        img = pack[\"img\"]\n        feats = F.normalize(model.forward(img.cuda()).mean([2, 3]), dim=1)\n        all_feats.append(feats.to(\"cpu\", non_blocking=True))\n    return torch.cat(all_feats, dim=0).contiguous()\n\n\n@hydra.main(config_path=\"configs\", config_name=\"train_config.yml\")\ndef my_app(cfg: DictConfig) -> None:\n    print(OmegaConf.to_yaml(cfg))\n    pytorch_data_dir = cfg.pytorch_data_dir\n    data_dir = join(cfg.output_root, \"data\")\n    log_dir = join(cfg.output_root, \"logs\")\n    os.makedirs(data_dir, exist_ok=True)\n    os.makedirs(log_dir, exist_ok=True)\n    os.makedirs(join(pytorch_data_dir, \"nns\"), exist_ok=True)\n\n    seed_everything(seed=0)\n\n    print(data_dir)\n    print(cfg.output_root)\n\n    image_sets = [\"val\", \"train\"]\n    dataset_names = [\"cocostuff27\", \"cityscapes\", \"potsdam\"]\n    crop_types = [\"five\", None]\n\n    # Uncomment these lines to run on custom datasets\n    #dataset_names = [\"directory\"]\n    #crop_types = [None]\n\n    res = 224\n    n_batches = 16\n\n    if cfg.arch == \"dino\":\n        from modules import DinoFeaturizer, LambdaLayer\n        no_ap_model = torch.nn.Sequential(\n            DinoFeaturizer(20, cfg),  # dim doesent matter\n            LambdaLayer(lambda p: p[0]),\n        ).cuda()\n    else:\n        cut_model = load_model(cfg.model_type, join(cfg.output_root, \"data\")).cuda()\n        no_ap_model = nn.Sequential(*list(cut_model.children())[:-1]).cuda()\n    par_model = torch.nn.DataParallel(no_ap_model)\n\n    for crop_type in crop_types:\n        for image_set in image_sets:\n            for dataset_name in dataset_names:\n                nice_dataset_name = cfg.dir_dataset_name if dataset_name == \"directory\" else dataset_name\n\n                feature_cache_file = join(pytorch_data_dir, \"nns\", \"nns_{}_{}_{}_{}_{}.npz\".format(\n                    cfg.model_type, nice_dataset_name, image_set, crop_type, res))\n\n                if not os.path.exists(feature_cache_file):\n                    print(\"{} not found, computing\".format(feature_cache_file))\n                    dataset = ContrastiveSegDataset(\n                        pytorch_data_dir=pytorch_data_dir,\n                        dataset_name=dataset_name,\n                        crop_type=crop_type,\n                        image_set=image_set,\n                        transform=get_transform(res, False, \"center\"),\n                        target_transform=get_transform(res, True, \"center\"),\n                        cfg=cfg,\n                    )\n\n                    loader = DataLoader(dataset, 256, shuffle=False, num_workers=cfg.num_workers, pin_memory=False)\n\n                    with torch.no_grad():\n                        normed_feats = get_feats(par_model, loader)\n                        all_nns = []\n                        step = normed_feats.shape[0] // n_batches\n                        print(normed_feats.shape)\n                        for i in tqdm(range(0, normed_feats.shape[0], step)):\n                            torch.cuda.empty_cache()\n                            batch_feats = normed_feats[i:i + step, :]\n                            pairwise_sims = torch.einsum(\"nf,mf->nm\", batch_feats, normed_feats)\n                            all_nns.append(torch.topk(pairwise_sims, 30)[1])\n                            del pairwise_sims\n                        nearest_neighbors = torch.cat(all_nns, dim=0)\n\n                        np.savez_compressed(feature_cache_file, nns=nearest_neighbors.numpy())\n                        print(\"Saved NNs\", cfg.model_type, nice_dataset_name, image_set)\n\n\nif __name__ == \"__main__\":\n    prep_args()\n    my_app()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/precompute_knns.py b/src/precompute_knns.py
--- a/src/precompute_knns.py	(revision c6be305e586f39b07663cb9bdb535828fe4047df)
+++ b/src/precompute_knns.py	(date 1717581647517)
@@ -1,3 +1,5 @@
+from torch.utils.data import DataLoader
+
 from data import ContrastiveSegDataset
 from modules import *
 import os
@@ -11,6 +13,8 @@
 from pytorch_lightning.utilities.seed import seed_everything
 from tqdm import tqdm
 
+from src.utils import load_model, prep_args, get_transform
+
 
 def get_feats(model, loader):
     all_feats = []
Index: src/eval_segmentation.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sys\n\nprint (sys.path)\nfrom modules import *\nfrom data import *\nfrom collections import defaultdict\nfrom multiprocessing import Pool\nimport hydra\nimport seaborn as sns\nimport torch.multiprocessing\nfrom crf import dense_crf\nfrom omegaconf import DictConfig, OmegaConf\nfrom torch.utils.data import DataLoader\nfrom tqdm import tqdm\nfrom train_segmentation import LitUnsupervisedSegmenter, prep_for_plot, get_class_labels\n\ntorch.multiprocessing.set_sharing_strategy('file_system')\n\ndef plot_cm(histogram, label_cmap, cfg):\n    fig = plt.figure(figsize=(10, 10))\n    ax = fig.gca()\n    hist = histogram.detach().cpu().to(torch.float32)\n    hist /= torch.clamp_min(hist.sum(dim=0, keepdim=True), 1)\n    sns.heatmap(hist.t(), annot=False, fmt='g', ax=ax, cmap=\"Blues\", cbar=False)\n    ax.set_title('Predicted labels', fontsize=28)\n    ax.set_ylabel('True labels', fontsize=28)\n    names = get_class_labels(cfg.dataset_name)\n    if cfg.extra_clusters:\n        names = names + [\"Extra\"]\n    ax.set_xticks(np.arange(0, len(names)) + .5)\n    ax.set_yticks(np.arange(0, len(names)) + .5)\n    ax.xaxis.tick_top()\n    ax.xaxis.set_ticklabels(names, fontsize=18)\n    ax.yaxis.set_ticklabels(names, fontsize=18)\n    colors = [label_cmap[i] / 255.0 for i in range(len(names))]\n    [t.set_color(colors[i]) for i, t in enumerate(ax.xaxis.get_ticklabels())]\n    [t.set_color(colors[i]) for i, t in enumerate(ax.yaxis.get_ticklabels())]\n    plt.xticks(rotation=90)\n    plt.yticks(rotation=0)\n    ax.vlines(np.arange(0, len(names) + 1), color=[.5, .5, .5], *ax.get_xlim())\n    ax.hlines(np.arange(0, len(names) + 1), color=[.5, .5, .5], *ax.get_ylim())\n    plt.tight_layout()\n\n\ndef batch_list(iterable, n=1):\n    l = len(iterable)\n    for ndx in range(0, l, n):\n        yield iterable[ndx:min(ndx + n, l)]\n\n\ndef _apply_crf(tup):\n    return dense_crf(tup[0], tup[1])\n\n\ndef batched_crf(pool, img_tensor, prob_tensor):\n    outputs = pool.map(_apply_crf, zip(img_tensor.detach().cpu(), prob_tensor.detach().cpu()))\n    return torch.cat([torch.from_numpy(arr).unsqueeze(0) for arr in outputs], dim=0)\n\n\n@hydra.main(config_path=\"configs\", config_name=\"eval_config.yml\")\ndef my_app(cfg: DictConfig) -> None:\n    pytorch_data_dir = cfg.pytorch_data_dir\n    result_dir = \"../results/predictions/{}\".format(cfg.experiment_name)\n    os.makedirs(join(result_dir, \"img\"), exist_ok=True)\n    os.makedirs(join(result_dir, \"label\"), exist_ok=True)\n    os.makedirs(join(result_dir, \"cluster\"), exist_ok=True)\n    os.makedirs(join(result_dir, \"picie\"), exist_ok=True)\n\n    for model_path in cfg.model_paths:\n        model = LitUnsupervisedSegmenter.load_from_checkpoint(model_path)\n        print(OmegaConf.to_yaml(model.cfg))\n\n        run_picie = cfg.run_picie and model.cfg.dataset_name == \"cocostuff27\"\n        if run_picie:\n            picie_state = torch.load(\"../saved_models/picie_and_probes.pth\")\n            picie = picie_state[\"model\"].cuda()\n            picie_cluster_probe = picie_state[\"cluster_probe\"].module.cuda()\n            picie_cluster_metrics = picie_state[\"cluster_metrics\"]\n\n        loader_crop = \"center\"\n        test_dataset = ContrastiveSegDataset(\n            pytorch_data_dir=pytorch_data_dir,\n            dataset_name=model.cfg.dataset_name,\n            crop_type=None,\n            image_set=\"val\",\n            transform=get_transform(cfg.res, False, loader_crop),\n            target_transform=get_transform(cfg.res, True, loader_crop),\n            cfg=model.cfg,\n        )\n\n        test_loader = DataLoader(test_dataset, cfg.batch_size * 2,\n                                 shuffle=False, num_workers=cfg.num_workers,\n                                 pin_memory=True, collate_fn=flexible_collate)\n\n        model.eval().cuda()\n\n        if cfg.use_ddp:\n            par_model = torch.nn.DataParallel(model.net)\n            if run_picie:\n                par_picie = torch.nn.DataParallel(picie)\n        else:\n            par_model = model.net\n            if run_picie:\n                par_picie = picie\n\n        if model.cfg.dataset_name == \"cocostuff27\":\n            # all_good_images = range(10)\n            # all_good_images = range(250)\n            # all_good_images = [61, 60, 49, 44, 13, 70] #Failure cases\n            all_good_images = [19, 54, 67, 66, 65, 75, 77, 76, 124]  # Main figure\n        elif model.cfg.dataset_name == \"cityscapes\":\n            # all_good_images = range(80)\n            # all_good_images = [ 5, 20, 56]\n            all_good_images = [11, 32, 43, 52]\n        else:\n            raise ValueError(\"Unknown Dataset {}\".format(model.cfg.dataset_name))\n        batch_nums = torch.tensor([n // (cfg.batch_size * 2) for n in all_good_images])\n        batch_offsets = torch.tensor([n % (cfg.batch_size * 2) for n in all_good_images])\n\n        saved_data = defaultdict(list)\n        with Pool(cfg.num_workers + 5) as pool:\n            for i, batch in enumerate(tqdm(test_loader)):\n                with torch.no_grad():\n                    img = batch[\"img\"].cuda()\n                    label = batch[\"label\"].cuda()\n\n                    feats, code1 = par_model(img)\n                    feats, code2 = par_model(img.flip(dims=[3]))\n                    code = (code1 + code2.flip(dims=[3])) / 2\n\n                    code = F.interpolate(code, label.shape[-2:], mode='bilinear', align_corners=False)\n\n                    linear_probs = torch.log_softmax(model.linear_probe(code), dim=1)\n                    cluster_probs = model.cluster_probe(code, 2, log_probs=True)\n\n                    if cfg.run_crf:\n                        linear_preds = batched_crf(pool, img, linear_probs).argmax(1).cuda()\n                        cluster_preds = batched_crf(pool, img, cluster_probs).argmax(1).cuda()\n                    else:\n                        linear_preds = linear_probs.argmax(1)\n                        cluster_preds = cluster_probs.argmax(1)\n\n                    model.test_linear_metrics.update(linear_preds, label)\n                    model.test_cluster_metrics.update(cluster_preds, label)\n\n                    if run_picie:\n                        picie_preds = picie_cluster_metrics.map_clusters(\n                            picie_cluster_probe(par_picie(img), None)[1].argmax(1).cpu())\n\n                    if i in batch_nums:\n                        matching_offsets = batch_offsets[torch.where(batch_nums == i)]\n                        for offset in matching_offsets:\n                            saved_data[\"linear_preds\"].append(linear_preds.cpu()[offset].unsqueeze(0))\n                            saved_data[\"cluster_preds\"].append(cluster_preds.cpu()[offset].unsqueeze(0))\n                            saved_data[\"label\"].append(label.cpu()[offset].unsqueeze(0))\n                            saved_data[\"img\"].append(img.cpu()[offset].unsqueeze(0))\n                            if run_picie:\n                                saved_data[\"picie_preds\"].append(picie_preds.cpu()[offset].unsqueeze(0))\n        saved_data = {k: torch.cat(v, dim=0) for k, v in saved_data.items()}\n\n        tb_metrics = {\n            **model.test_linear_metrics.compute(),\n            **model.test_cluster_metrics.compute(),\n        }\n\n        print(\"\")\n        print(model_path)\n        print(tb_metrics)\n\n        if cfg.run_prediction:\n            n_rows = 3\n        else:\n            n_rows = 2\n\n        if run_picie:\n            n_rows += 1\n\n        if cfg.dark_mode:\n            plt.style.use('dark_background')\n\n        for good_images in batch_list(range(len(all_good_images)), 10):\n            fig, ax = plt.subplots(n_rows, len(good_images), figsize=(len(good_images) * 3, n_rows * 3))\n            for i, img_num in enumerate(good_images):\n                plot_img = (prep_for_plot(saved_data[\"img\"][img_num]) * 255).numpy().astype(np.uint8)\n                plot_label = (model.label_cmap[saved_data[\"label\"][img_num]]).astype(np.uint8)\n                Image.fromarray(plot_img).save(join(join(result_dir, \"img\", str(img_num) + \".jpg\")))\n                Image.fromarray(plot_label).save(join(join(result_dir, \"label\", str(img_num) + \".png\")))\n\n                ax[0, i].imshow(plot_img)\n                ax[1, i].imshow(plot_label)\n                if cfg.run_prediction:\n                    plot_cluster = (model.label_cmap[\n                        model.test_cluster_metrics.map_clusters(\n                            saved_data[\"cluster_preds\"][img_num])]) \\\n                        .astype(np.uint8)\n                    Image.fromarray(plot_cluster).save(join(join(result_dir, \"cluster\", str(img_num) + \".png\")))\n                    ax[2, i].imshow(plot_cluster)\n                if run_picie:\n                    picie_img = model.label_cmap[saved_data[\"picie_preds\"][img_num]].astype(np.uint8)\n                    ax[3, i].imshow(picie_img)\n                    Image.fromarray(picie_img).save(join(join(result_dir, \"picie\", str(img_num) + \".png\")))\n\n            ax[0, 0].set_ylabel(\"Image\", fontsize=26)\n            ax[1, 0].set_ylabel(\"Label\", fontsize=26)\n            if cfg.run_prediction:\n                ax[2, 0].set_ylabel(\"STEGO\\n(Ours)\", fontsize=26)\n            if run_picie:\n                ax[3, 0].set_ylabel(\"PiCIE\\n(Baseline)\", fontsize=26)\n\n            remove_axes(ax)\n            plt.tight_layout()\n            plt.show()\n            plt.clf()\n\n        plot_cm(model.test_cluster_metrics.histogram, model.label_cmap, model.cfg)\n        plt.show()\n        plt.clf()\n\n\nif __name__ == \"__main__\":\n    prep_args()\n    my_app()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/eval_segmentation.py b/src/eval_segmentation.py
--- a/src/eval_segmentation.py	(revision c6be305e586f39b07663cb9bdb535828fe4047df)
+++ b/src/eval_segmentation.py	(date 1717584581522)
@@ -1,5 +1,9 @@
 import sys
 
+from matplotlib import pyplot as plt
+
+from src.utils import get_transform, flexible_collate, remove_axes, prep_args, prep_for_plot
+
 print (sys.path)
 from modules import *
 from data import *
@@ -12,7 +16,7 @@
 from omegaconf import DictConfig, OmegaConf
 from torch.utils.data import DataLoader
 from tqdm import tqdm
-from train_segmentation import LitUnsupervisedSegmenter, prep_for_plot, get_class_labels
+from train_segmentation import LitUnsupervisedSegmenter, get_class_labels #prep_for_plot,
 
 torch.multiprocessing.set_sharing_strategy('file_system')
 
Index: src/dino/utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Copyright (c) Facebook, Inc. and its affiliates.\n# \n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n# \n#     http://www.apache.org/licenses/LICENSE-2.0\n# \n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"\nMisc functions.\n\nMostly copy-paste from torchvision references or other public repos like DETR:\nhttps://github.com/facebookresearch/detr/blob/master/util/misc.py\n\"\"\"\nimport os\nimport sys\nimport time\nimport math\nimport random\nimport datetime\nimport subprocess\nfrom collections import defaultdict, deque\n\nimport numpy as np\nimport torch\nfrom torch import nn\nimport torch.distributed as dist\nfrom PIL import ImageFilter, ImageOps\n\n\nclass GaussianBlur(object):\n    \"\"\"\n    Apply Gaussian Blur to the PIL image.\n    \"\"\"\n    def __init__(self, p=0.5, radius_min=0.1, radius_max=2.):\n        self.prob = p\n        self.radius_min = radius_min\n        self.radius_max = radius_max\n\n    def __call__(self, img):\n        do_it = random.random() <= self.prob\n        if not do_it:\n            return img\n\n        return img.filter(\n            ImageFilter.GaussianBlur(\n                radius=random.uniform(self.radius_min, self.radius_max)\n            )\n        )\n\n\nclass Solarization(object):\n    \"\"\"\n    Apply Solarization to the PIL image.\n    \"\"\"\n    def __init__(self, p):\n        self.p = p\n\n    def __call__(self, img):\n        if random.random() < self.p:\n            return ImageOps.solarize(img)\n        else:\n            return img\n\n\ndef load_pretrained_weights(model, pretrained_weights, checkpoint_key, model_name, patch_size):\n    if os.path.isfile(pretrained_weights):\n        state_dict = torch.load(pretrained_weights, map_location=\"cpu\")\n        if checkpoint_key is not None and checkpoint_key in state_dict:\n            print(f\"Take key {checkpoint_key} in provided checkpoint dict\")\n            state_dict = state_dict[checkpoint_key]\n        # remove `module.` prefix\n        state_dict = {k.replace(\"module.\", \"\"): v for k, v in state_dict.items()}\n        # remove `backbone.` prefix induced by multicrop wrapper\n        state_dict = {k.replace(\"backbone.\", \"\"): v for k, v in state_dict.items()}\n        msg = model.load_state_dict(state_dict, strict=False)\n        print('Pretrained weights found at {} and loaded with msg: {}'.format(pretrained_weights, msg))\n    else:\n        print(\"Please use the `--pretrained_weights` argument to indicate the path of the checkpoint to evaluate.\")\n        url = None\n        if model_name == \"vit_small\" and patch_size == 16:\n            url = \"dino_deitsmall16_pretrain/dino_deitsmall16_pretrain.pth\"\n        elif model_name == \"vit_small\" and patch_size == 8:\n            url = \"dino_deitsmall8_pretrain/dino_deitsmall8_pretrain.pth\"\n        elif model_name == \"vit_base\" and patch_size == 16:\n            url = \"dino_vitbase16_pretrain/dino_vitbase16_pretrain.pth\"\n        elif model_name == \"vit_base\" and patch_size == 8:\n            url = \"dino_vitbase8_pretrain/dino_vitbase8_pretrain.pth\"\n        if url is not None:\n            print(\"Since no pretrained weights have been provided, we load the reference pretrained DINO weights.\")\n            state_dict = torch.hub.load_state_dict_from_url(url=\"https://dl.fbaipublicfiles.com/dino/\" + url)\n            model.load_state_dict(state_dict, strict=True)\n        else:\n            print(\"There is no reference weights available for this model => We use random weights.\")\n\n\ndef clip_gradients(model, clip):\n    norms = []\n    for name, p in model.named_parameters():\n        if p.grad is not None:\n            param_norm = p.grad.data.norm(2)\n            norms.append(param_norm.item())\n            clip_coef = clip / (param_norm + 1e-6)\n            if clip_coef < 1:\n                p.grad.data.mul_(clip_coef)\n    return norms\n\n\ndef cancel_gradients_last_layer(epoch, model, freeze_last_layer):\n    if epoch >= freeze_last_layer:\n        return\n    for n, p in model.named_parameters():\n        if \"last_layer\" in n:\n            p.grad = None\n\n\ndef restart_from_checkpoint(ckp_path, run_variables=None, **kwargs):\n    \"\"\"\n    Re-start from checkpoint\n    \"\"\"\n    if not os.path.isfile(ckp_path):\n        return\n    print(\"Found checkpoint at {}\".format(ckp_path))\n\n    # open checkpoint file\n    checkpoint = torch.load(ckp_path, map_location=\"cpu\")\n\n    # key is what to look for in the checkpoint file\n    # value is the object to load\n    # example: {'state_dict': model}\n    for key, value in kwargs.items():\n        if key in checkpoint and value is not None:\n            try:\n                msg = value.load_state_dict(checkpoint[key], strict=False)\n                print(\"=> loaded {} from checkpoint '{}' with msg {}\".format(key, ckp_path, msg))\n            except TypeError:\n                try:\n                    msg = value.load_state_dict(checkpoint[key])\n                    print(\"=> loaded {} from checkpoint '{}'\".format(key, ckp_path))\n                except ValueError:\n                    print(\"=> failed to load {} from checkpoint '{}'\".format(key, ckp_path))\n        else:\n            print(\"=> failed to load {} from checkpoint '{}'\".format(key, ckp_path))\n\n    # re load variable important for the run\n    if run_variables is not None:\n        for var_name in run_variables:\n            if var_name in checkpoint:\n                run_variables[var_name] = checkpoint[var_name]\n\n\ndef cosine_scheduler(base_value, final_value, epochs, niter_per_ep, warmup_epochs=0, start_warmup_value=0):\n    warmup_schedule = np.array([])\n    warmup_iters = warmup_epochs * niter_per_ep\n    if warmup_epochs > 0:\n        warmup_schedule = np.linspace(start_warmup_value, base_value, warmup_iters)\n\n    iters = np.arange(epochs * niter_per_ep - warmup_iters)\n    schedule = final_value + 0.5 * (base_value - final_value) * (1 + np.cos(np.pi * iters / len(iters)))\n\n    schedule = np.concatenate((warmup_schedule, schedule))\n    assert len(schedule) == epochs * niter_per_ep\n    return schedule\n\n\ndef bool_flag(s):\n    \"\"\"\n    Parse boolean arguments from the command line.\n    \"\"\"\n    FALSY_STRINGS = {\"off\", \"false\", \"0\"}\n    TRUTHY_STRINGS = {\"on\", \"true\", \"1\"}\n    if s.lower() in FALSY_STRINGS:\n        return False\n    elif s.lower() in TRUTHY_STRINGS:\n        return True\n    else:\n        raise argparse.ArgumentTypeError(\"invalid value for a boolean flag\")\n\n\ndef fix_random_seeds(seed=31):\n    \"\"\"\n    Fix random seeds.\n    \"\"\"\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n    np.random.seed(seed)\n\n\nclass SmoothedValue(object):\n    \"\"\"Track a series of values and provide access to smoothed values over a\n    window or the global series average.\n    \"\"\"\n\n    def __init__(self, window_size=20, fmt=None):\n        if fmt is None:\n            fmt = \"{median:.6f} ({global_avg:.6f})\"\n        self.deque = deque(maxlen=window_size)\n        self.total = 0.0\n        self.count = 0\n        self.fmt = fmt\n\n    def update(self, value, n=1):\n        self.deque.append(value)\n        self.count += n\n        self.total += value * n\n\n    def synchronize_between_processes(self):\n        \"\"\"\n        Warning: does not synchronize the deque!\n        \"\"\"\n        if not is_dist_avail_and_initialized():\n            return\n        t = torch.tensor([self.count, self.total], dtype=torch.float64, device='cuda')\n        dist.barrier()\n        dist.all_reduce(t)\n        t = t.tolist()\n        self.count = int(t[0])\n        self.total = t[1]\n\n    @property\n    def median(self):\n        d = torch.tensor(list(self.deque))\n        return d.median().item()\n\n    @property\n    def avg(self):\n        d = torch.tensor(list(self.deque), dtype=torch.float32)\n        return d.mean().item()\n\n    @property\n    def global_avg(self):\n        return self.total / self.count\n\n    @property\n    def max(self):\n        return max(self.deque)\n\n    @property\n    def value(self):\n        return self.deque[-1]\n\n    def __str__(self):\n        return self.fmt.format(\n            median=self.median,\n            avg=self.avg,\n            global_avg=self.global_avg,\n            max=self.max,\n            value=self.value)\n\n\ndef reduce_dict(input_dict, average=True):\n    \"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that all processes\n    have the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"\n    world_size = get_world_size()\n    if world_size < 2:\n        return input_dict\n    with torch.no_grad():\n        names = []\n        values = []\n        # sort the keys so that they are consistent across processes\n        for k in sorted(input_dict.keys()):\n            names.append(k)\n            values.append(input_dict[k])\n        values = torch.stack(values, dim=0)\n        dist.all_reduce(values)\n        if average:\n            values /= world_size\n        reduced_dict = {k: v for k, v in zip(names, values)}\n    return reduced_dict\n\n\nclass MetricLogger(object):\n    def __init__(self, delimiter=\"\\t\"):\n        self.meters = defaultdict(SmoothedValue)\n        self.delimiter = delimiter\n\n    def update(self, **kwargs):\n        for k, v in kwargs.items():\n            if isinstance(v, torch.Tensor):\n                v = v.item()\n            assert isinstance(v, (float, int))\n            self.meters[k].update(v)\n\n    def __getattr__(self, attr):\n        if attr in self.meters:\n            return self.meters[attr]\n        if attr in self.__dict__:\n            return self.__dict__[attr]\n        raise AttributeError(\"'{}' object has no attribute '{}'\".format(\n            type(self).__name__, attr))\n\n    def __str__(self):\n        loss_str = []\n        for name, meter in self.meters.items():\n            loss_str.append(\n                \"{}: {}\".format(name, str(meter))\n            )\n        return self.delimiter.join(loss_str)\n\n    def synchronize_between_processes(self):\n        for meter in self.meters.values():\n            meter.synchronize_between_processes()\n\n    def add_meter(self, name, meter):\n        self.meters[name] = meter\n\n    def log_every(self, iterable, print_freq, header=None):\n        i = 0\n        if not header:\n            header = ''\n        start_time = time.time()\n        end = time.time()\n        iter_time = SmoothedValue(fmt='{avg:.6f}')\n        data_time = SmoothedValue(fmt='{avg:.6f}')\n        space_fmt = ':' + str(len(str(len(iterable)))) + 'd'\n        if torch.cuda.is_available():\n            log_msg = self.delimiter.join([\n                header,\n                '[{0' + space_fmt + '}/{1}]',\n                'eta: {eta}',\n                '{meters}',\n                'time: {time}',\n                'data: {data}',\n                'max mem: {memory:.0f}'\n            ])\n        else:\n            log_msg = self.delimiter.join([\n                header,\n                '[{0' + space_fmt + '}/{1}]',\n                'eta: {eta}',\n                '{meters}',\n                'time: {time}',\n                'data: {data}'\n            ])\n        MB = 1024.0 * 1024.0\n        for obj in iterable:\n            data_time.update(time.time() - end)\n            yield obj\n            iter_time.update(time.time() - end)\n            if i % print_freq == 0 or i == len(iterable) - 1:\n                eta_seconds = iter_time.global_avg * (len(iterable) - i)\n                eta_string = str(datetime.timedelta(seconds=int(eta_seconds)))\n                if torch.cuda.is_available():\n                    print(log_msg.format(\n                        i, len(iterable), eta=eta_string,\n                        meters=str(self),\n                        time=str(iter_time), data=str(data_time),\n                        memory=torch.cuda.max_memory_allocated() / MB))\n                else:\n                    print(log_msg.format(\n                        i, len(iterable), eta=eta_string,\n                        meters=str(self),\n                        time=str(iter_time), data=str(data_time)))\n            i += 1\n            end = time.time()\n        total_time = time.time() - start_time\n        total_time_str = str(datetime.timedelta(seconds=int(total_time)))\n        print('{} Total time: {} ({:.6f} s / it)'.format(\n            header, total_time_str, total_time / len(iterable)))\n\n\ndef get_sha():\n    cwd = os.path.dirname(os.path.abspath(__file__))\n\n    def _run(command):\n        return subprocess.check_output(command, cwd=cwd).decode('ascii').strip()\n    sha = 'N/A'\n    diff = \"clean\"\n    branch = 'N/A'\n    try:\n        sha = _run(['git', 'rev-parse', 'HEAD'])\n        subprocess.check_output(['git', 'diff'], cwd=cwd)\n        diff = _run(['git', 'diff-index', 'HEAD'])\n        diff = \"has uncommited changes\" if diff else \"clean\"\n        branch = _run(['git', 'rev-parse', '--abbrev-ref', 'HEAD'])\n    except Exception:\n        pass\n    message = f\"sha: {sha}, status: {diff}, branch: {branch}\"\n    return message\n\n\ndef is_dist_avail_and_initialized():\n    if not dist.is_available():\n        return False\n    if not dist.is_initialized():\n        return False\n    return True\n\n\ndef get_world_size():\n    if not is_dist_avail_and_initialized():\n        return 1\n    return dist.get_world_size()\n\n\ndef get_rank():\n    if not is_dist_avail_and_initialized():\n        return 0\n    return dist.get_rank()\n\n\ndef is_main_process():\n    return get_rank() == 0\n\n\ndef save_on_master(*args, **kwargs):\n    if is_main_process():\n        torch.save(*args, **kwargs)\n\n\ndef setup_for_distributed(is_master):\n    \"\"\"\n    This function disables printing when not in master process\n    \"\"\"\n    import builtins as __builtin__\n    builtin_print = __builtin__.print\n\n    def print(*args, **kwargs):\n        force = kwargs.pop('force', False)\n        if is_master or force:\n            builtin_print(*args, **kwargs)\n\n    __builtin__.print = print\n\n\ndef init_distributed_mode(args):\n    # launched with torch.distributed.launch\n    if 'RANK' in os.environ and 'WORLD_SIZE' in os.environ:\n        args.rank = int(os.environ[\"RANK\"])\n        args.world_size = int(os.environ['WORLD_SIZE'])\n        args.gpu = int(os.environ['LOCAL_RANK'])\n    # launched with submitit on a slurm cluster\n    elif 'SLURM_PROCID' in os.environ:\n        args.rank = int(os.environ['SLURM_PROCID'])\n        args.gpu = args.rank % torch.cuda.device_count()\n    # launched naively with `python main_dino.py`\n    # we manually add MASTER_ADDR and MASTER_PORT to env variables\n    elif torch.cuda.is_available():\n        print('Will run the code on one GPU.')\n        args.rank, args.gpu, args.world_size = 0, 0, 1\n        os.environ['MASTER_ADDR'] = '127.0.0.1'\n        os.environ['MASTER_PORT'] = '29500'\n    else:\n        print('Does not support training without GPU.')\n        sys.exit(1)\n\n    dist.init_process_group(\n        backend=\"nccl\",\n        init_method=args.dist_url,\n        world_size=args.world_size,\n        rank=args.rank,\n    )\n\n    torch.cuda.set_device(args.gpu)\n    print('| distributed init (rank {}): {}'.format(\n        args.rank, args.dist_url), flush=True)\n    dist.barrier()\n    setup_for_distributed(args.rank == 0)\n\n\ndef accuracy(output, target, topk=(1,)):\n    \"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"\n    maxk = max(topk)\n    batch_size = target.size(0)\n    _, pred = output.topk(maxk, 1, True, True)\n    pred = pred.t()\n    correct = pred.eq(target.reshape(1, -1).expand_as(pred))\n    return [correct[:k].reshape(-1).float().sum(0) * 100. / batch_size for k in topk]\n\n\ndef _no_grad_trunc_normal_(tensor, mean, std, a, b):\n    # Cut & paste from PyTorch official master until it's in a few official releases - RW\n    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf\n    def norm_cdf(x):\n        # Computes standard normal cumulative distribution function\n        return (1. + math.erf(x / math.sqrt(2.))) / 2.\n\n    if (mean < a - 2 * std) or (mean > b + 2 * std):\n        warnings.warn(\"mean is more than 2 std from [a, b] in nn.init.trunc_normal_. \"\n                      \"The distribution of values may be incorrect.\",\n                      stacklevel=2)\n\n    with torch.no_grad():\n        # Values are generated by using a truncated uniform distribution and\n        # then using the inverse CDF for the normal distribution.\n        # Get upper and lower cdf values\n        l = norm_cdf((a - mean) / std)\n        u = norm_cdf((b - mean) / std)\n\n        # Uniformly fill tensor with values from [l, u], then translate to\n        # [2l-1, 2u-1].\n        tensor.uniform_(2 * l - 1, 2 * u - 1)\n\n        # Use inverse cdf transform for normal distribution to get truncated\n        # standard normal\n        tensor.erfinv_()\n\n        # Transform to proper mean, std\n        tensor.mul_(std * math.sqrt(2.))\n        tensor.add_(mean)\n\n        # Clamp to ensure it's in the proper range\n        tensor.clamp_(min=a, max=b)\n        return tensor\n\n\ndef trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):\n    # type: (Tensor, float, float, float, float) -> Tensor\n    return _no_grad_trunc_normal_(tensor, mean, std, a, b)\n\n\nclass LARS(torch.optim.Optimizer):\n    \"\"\"\n    Almost copy-paste from https://github.com/facebookresearch/barlowtwins/blob/main/main.py\n    \"\"\"\n    def __init__(self, params, lr=0, weight_decay=0, momentum=0.9, eta=0.001,\n                 weight_decay_filter=None, lars_adaptation_filter=None):\n        defaults = dict(lr=lr, weight_decay=weight_decay, momentum=momentum,\n                        eta=eta, weight_decay_filter=weight_decay_filter,\n                        lars_adaptation_filter=lars_adaptation_filter)\n        super().__init__(params, defaults)\n\n    @torch.no_grad()\n    def step(self):\n        for g in self.param_groups:\n            for p in g['params']:\n                dp = p.grad\n\n                if dp is None:\n                    continue\n\n                if p.ndim != 1:\n                    dp = dp.add(p, alpha=g['weight_decay'])\n\n                if p.ndim != 1:\n                    param_norm = torch.norm(p)\n                    update_norm = torch.norm(dp)\n                    one = torch.ones_like(param_norm)\n                    q = torch.where(param_norm > 0.,\n                                    torch.where(update_norm > 0,\n                                                (g['eta'] * param_norm / update_norm), one), one)\n                    dp = dp.mul(q)\n\n                param_state = self.state[p]\n                if 'mu' not in param_state:\n                    param_state['mu'] = torch.zeros_like(p)\n                mu = param_state['mu']\n                mu.mul_(g['momentum']).add_(dp)\n\n                p.add_(mu, alpha=-g['lr'])\n\n\nclass MultiCropWrapper(nn.Module):\n    \"\"\"\n    Perform forward pass separately on each resolution input.\n    The inputs corresponding to a single resolution are clubbed and single\n    forward is run on the same resolution inputs. Hence we do several\n    forward passes = number of different resolutions used. We then\n    concatenate all the output features and run the head forward on these\n    concatenated features.\n    \"\"\"\n    def __init__(self, backbone, head):\n        super(MultiCropWrapper, self).__init__()\n        # disable layers dedicated to ImageNet labels classification\n        backbone.fc, backbone.head = nn.Identity(), nn.Identity()\n        self.backbone = backbone\n        self.head = head\n\n    def forward(self, x):\n        # convert to list\n        if not isinstance(x, list):\n            x = [x]\n        idx_crops = torch.cumsum(torch.unique_consecutive(\n            torch.tensor([inp.shape[-1] for inp in x]),\n            return_counts=True,\n        )[1], 0)\n        start_idx = 0\n        for end_idx in idx_crops:\n            _out = self.backbone(torch.cat(x[start_idx: end_idx]))\n            if start_idx == 0:\n                output = _out\n            else:\n                output = torch.cat((output, _out))\n            start_idx = end_idx\n        # Run the head forward on the concatenated features.\n        return self.head(output)\n\n\ndef get_params_groups(model):\n    regularized = []\n    not_regularized = []\n    for name, param in model.named_parameters():\n        if not param.requires_grad:\n            continue\n        # we do not regularize biases nor Norm parameters\n        if name.endswith(\".bias\") or len(param.shape) == 1:\n            not_regularized.append(param)\n        else:\n            regularized.append(param)\n    return [{'params': regularized}, {'params': not_regularized, 'weight_decay': 0.}]\n\n\ndef has_batchnorms(model):\n    bn_types = (nn.BatchNorm1d, nn.BatchNorm2d, nn.BatchNorm3d, nn.SyncBatchNorm)\n    for name, module in model.named_modules():\n        if isinstance(module, bn_types):\n            return True\n    return False\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/dino/utils.py b/src/dino/utils.py
--- a/src/dino/utils.py	(revision c6be305e586f39b07663cb9bdb535828fe4047df)
+++ b/src/dino/utils.py	(date 1717747028689)
@@ -17,6 +17,7 @@
 Mostly copy-paste from torchvision references or other public repos like DETR:
 https://github.com/facebookresearch/detr/blob/master/util/misc.py
 """
+import argparse
 import os
 import sys
 import time
@@ -24,6 +25,7 @@
 import random
 import datetime
 import subprocess
+import warnings
 from collections import defaultdict, deque
 
 import numpy as np
Index: src/train_crf.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import io\n\nimport PIL.Image\nimport matplotlib.pyplot as plt\nimport torch\nfrom tensorboardX import SummaryWriter\nfrom torch.nn import Sequential, Linear, LogSoftmax\nfrom torch.utils.data import Dataset\nfrom torchvision.transforms import ToTensor\nfrom utils import *\nfrom tqdm import tqdm\nfrom torch.utils.data import DataLoader\nimport numpy as np\nfrom skimage.segmentation import mark_boundaries\nfrom sklearn.decomposition import PCA\nfrom kornia.color import rgb_to_lab\nfrom datetime import datetime\nimport hydra\nfrom omegaconf import DictConfig, OmegaConf\n\ndef norm(t):\n    return F.normalize(t, dim=1, eps=1e-10)\n\ndef prep(continuous: bool, t: torch.Tensor):\n    if continuous:\n        return norm(t)\n    else:\n        return torch.exp(t)\n\ndef entropy(p):\n    p = torch.clamp_min(p, .0000001)\n    return -(p * torch.log(p)).sum(dim=1)\n\n\n@hydra.main(config_name=\"config.yml\")\ndef my_app(cfg: DictConfig) -> None:\n    print(OmegaConf.to_yaml(cfg))\n    pytorch_data_dir = cfg.pytorch_data_dir\n    log_dir = join(cfg.output_root, \"logs\")\n    continuous = cfg.continuous\n    dim = cfg.dim\n    dataset_name = cfg.dataset_name\n    n_images = 7\n\n    np.random.seed(0)\n    torch.random.manual_seed(0)\n\n    small_imsize = imsize // 2\n    transform_with_resize = T.Compose([T.Resize((small_imsize, small_imsize)), T.ToTensor(), normalize])\n    label_transform_with_resize = T.Compose([T.Resize((small_imsize, small_imsize)), ToTargetTensor()])\n\n    dataset = ContrastiveSegDataset(\n        pytorch_data_dir, dataset_name, \"train+val\", cfg.num_neighbors,\n        transform_with_resize, label_transform_with_resize, None, None, cfg)\n\n    prefix = \"crf/{}_{}\".format(cfg.dataset_name, cfg.experiment_name)\n    writer = SummaryWriter(\n        join(log_dir, '{}_date_{}'.format(prefix, datetime.now().strftime(\"%m:%d:%Y:%H:%M\"))))\n\n    class CodeSpaceTable(torch.nn.Module):\n        def __init__(self, continuous, n_images, dim, h, w):\n            super(CodeSpaceTable, self).__init__()\n            self.continuous = continuous\n            self.code_space = torch.nn.Parameter(torch.randn(n_images, dim, h, w) * .1)\n\n        def forward(self, x):\n            if self.continuous:\n                return self.code_space\n            else:\n                return torch.nn.functional.log_softmax(self.code_space, 1)\n\n    def add_plot(writer, name, step):\n        buf = io.BytesIO()\n        plt.savefig(buf, format='jpeg')\n        buf.seek(0)\n        image = PIL.Image.open(buf)\n        image = ToTensor()(image)\n        writer.add_image(name, image, step)\n        plt.clf()\n        plt.close()\n\n    loader = DataLoader(dataset, n_images, shuffle=False, num_workers=0)\n\n    load_iter = iter(loader)\n    for i in range(1):\n        next(load_iter)\n    pack = next(load_iter)\n    pack = {k: v.cuda(non_blocking=True) for k, v in pack.items()}\n    ind = pack[\"ind\"]\n    img = pack[\"img\"]\n\n    net = CodeSpaceTable(continuous, n_images, dim, img.shape[2], img.shape[3]).cuda()\n    optim = torch.optim.Adam(list(net.parameters()), lr=1e-2)\n\n    loss_func = ContrastiveCRFLoss(cfg.crf_samples, cfg.alpha, cfg.beta, cfg.gamma, cfg.w1, cfg.w2, cfg.shift)\n\n    def to_normed_lab(img):\n        img_t = rgb_to_lab(img)\n        img_t /= torch.tensor([100, 128 * 2, 128 * 2]).unsqueeze(0).unsqueeze(-1).unsqueeze(-1).cuda()\n        return img_t\n\n    for i in tqdm(range(cfg.epochs)):\n\n        code = net.forward(img)\n        if cfg.color_space == \"rgb\":\n            img_t = img\n        elif cfg.color_space == \"lab\":\n            img_t = to_normed_lab(img)\n        else:\n            raise ValueError(\"unknown color space: {}\".format(cfg.color_space))\n\n        if continuous:\n            ent_reg_term = 0\n        else:\n            ent_global = entropy(torch.exp(code).mean(dim=0, keepdim=True)).mean()\n            ent_local = entropy(torch.exp(code)).mean()\n            ent_reg_term = - cfg.global_ent_weight * ent_global \\\n                           - cfg.local_ent_weight * ent_local\n\n            if i % 100 == 0:\n                writer.add_scalar('ent/ent1', ent_global, i)\n                writer.add_scalar('ent/ent2', ent_local, i)\n\n        crf_loss = loss_func(img_t, prep(continuous, code))\n        loss = crf_loss.mean() + ent_reg_term\n\n        loss.backward()\n        optim.step()\n        optim.zero_grad()\n\n        if i % 10 == 0:\n            writer.add_scalar(\"crf_loss\", crf_loss.mean(), i)\n            writer.add_scalar(\"loss\", loss, i)\n\n        if i % 500 == 0:\n            fig, ax = plt.subplots(2, n_images, figsize=(n_images * 3, 2 * 3))\n            with torch.no_grad():\n                for idx, img_idx in enumerate(ind[:n_images]):\n                    plot_img = unnorm(img)[idx].permute(1, 2, 0)\n                    plot_img = (plot_img - plot_img.min()) / (plot_img.max() - plot_img.min())\n                    ax[0, idx].imshow(plot_img.cpu())\n                    if not continuous:\n                        ax[1, idx].imshow(mark_boundaries(plot_img.cpu(), code.argmax(1)[idx].cpu().numpy()))\n                    else:\n                        X_code = code[idx].permute(1, 2, 0).reshape(-1, dim).cpu()\n                        projected_code = PCA(n_components=3).fit_transform(X_code) \\\n                            .reshape([code.shape[2], code.shape[3], 3])\n                        projected_code = (projected_code + 1) / 2\n                        projected_code = np.clip(projected_code, 0, 1)\n                        ax[1, idx].imshow(projected_code)\n\n                remove_axes(ax)\n                plt.tight_layout()\n                add_plot(writer, \"plot\", i)\n\n\nif __name__ == \"__main__\":\n    my_app()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/train_crf.py b/src/train_crf.py
--- a/src/train_crf.py	(revision c6be305e586f39b07663cb9bdb535828fe4047df)
+++ b/src/train_crf.py	(date 1717746395246)
@@ -1,9 +1,11 @@
 import io
+from shlex import join
 
 import PIL.Image
 import matplotlib.pyplot as plt
 import torch
 from tensorboardX import SummaryWriter
+from torch import T
 from torch.nn import Sequential, Linear, LogSoftmax
 from torch.utils.data import Dataset
 from torchvision.transforms import ToTensor
@@ -18,7 +20,14 @@
 import hydra
 from omegaconf import DictConfig, OmegaConf
 
+from src import utils
+from src.data import ContrastiveSegDataset
+from src.modules import ContrastiveCRFLoss
+from src.utils import normalize, ToTargetTensor, unnorm, remove_axes
+
+
 def norm(t):
+    from torchgen.context import F
     return F.normalize(t, dim=1, eps=1e-10)
 
 def prep(continuous: bool, t: torch.Tensor):
@@ -45,7 +54,7 @@
     np.random.seed(0)
     torch.random.manual_seed(0)
 
-    small_imsize = imsize // 2
+    small_imsize = utils.imsize // 2
     transform_with_resize = T.Compose([T.Resize((small_imsize, small_imsize)), T.ToTensor(), normalize])
     label_transform_with_resize = T.Compose([T.Resize((small_imsize, small_imsize)), ToTargetTensor()])
 
Index: src/instance_segmentation_evaluation.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sys\nimport os\n\nparentdir = os.path.dirname(\"../STEGO\")\nsys.path.append(parentdir)\n\nfrom multiprocessing import Pool\nfrom data import ContrastiveSegDataset\nfrom eval_segmentation import batched_crf\nfrom modules import *\nimport hydra\nimport torch.multiprocessing\nfrom PIL import Image\nfrom src.crf import dense_crf\nfrom omegaconf import DictConfig, OmegaConf\nfrom torch.utils.data import DataLoader, Dataset\nimport json_to_binary_mask as Json2BinMask\nfrom train_segmentation import LitUnsupervisedSegmenter\nfrom tqdm import tqdm\nimport random\nimport semantic_to_binary_mask as Seg2BinMask\n\n\ntorch.multiprocessing.set_sharing_strategy('file_system')\n\n\nclass UnlabeledImageFolder(Dataset):\n    def __init__(self, root, transform):\n        super(UnlabeledImageFolder, self).__init__()\n        self.root = join(root)\n        self.transform = transform\n        self.images = os.listdir(self.root)\n\n    def __getitem__(self, index):\n        image = Image.open(join(self.root, self.images[index])).convert('RGB')\n        seed = np.random.randint(2147483647)\n        random.seed(seed)\n        torch.manual_seed(seed)\n        image = self.transform(image)\n\n        return image, self.images[index]\n\n    def __len__(self):\n        return len(self.images)\n\n\n@hydra.main(config_path=\"configs\", config_name=\"eval_config.yml\")\ndef my_app(cfg: DictConfig) -> None:\n    pytorch_data_dir = cfg.pytorch_data_dir\n    result_dir = \"../results/predictions/{}\".format(cfg.experiment_name)\n    os.makedirs(join(result_dir, \"img\"), exist_ok=True)\n    os.makedirs(join(result_dir, \"label\"), exist_ok=True)\n    os.makedirs(join(result_dir, \"cluster\"), exist_ok=True)\n    os.makedirs(join(result_dir, \"picie\"), exist_ok=True)\n\n    for model_path in cfg.model_paths:\n        model = LitUnsupervisedSegmenter.load_from_checkpoint(model_path)\n        print(OmegaConf.to_yaml(model.cfg))\n\n    loader_crop = \"center\"\n    test_dataset = ContrastiveSegDataset(\n        pytorch_data_dir=pytorch_data_dir,\n        dataset_name=cfg.experiment_name,\n        crop_type=None,\n        image_set=\"val\",\n        transform=get_transform(cfg.res, False, loader_crop),\n        target_transform=get_transform(cfg.res, True, loader_crop),\n        cfg=model.cfg,\n    )\n\n    loader = DataLoader(test_dataset, cfg.batch_size,\n                        shuffle=False, num_workers=cfg.num_workers,\n                        pin_memory=True, collate_fn=flexible_collate)\n\n    model.eval().cuda()\n    if cfg.use_ddp:\n        par_model = torch.nn.DataParallel(model.net)\n    else:\n        par_model = model.net\n\n    IoU_dict = {}\n    for className in cfg.InstanceClasses:\n        IoU_dict[className] = [0, 0]  # [IoUSum, IoUInstances]\n\n    with Pool(cfg.num_workers + 5) as pool:\n        for i, batch in enumerate(tqdm(loader)):\n            with torch.no_grad():\n                img = batch[\"img\"].cuda()\n                label = batch[\"label\"].cuda()\n                polygons = batch[\"polygons\"]\n\n                feats, code1 = par_model(img)\n                feats, code2 = par_model(img.flip(dims=[3]))\n                code = (code1 + code2.flip(dims=[3])) / 2\n\n                code = F.interpolate(code, img.shape[-2:], mode='bilinear', align_corners=False)\n\n                linear_probs = torch.log_softmax(model.linear_probe(code), dim=1).cpu()\n                cluster_probs = model.cluster_probe(code, 2, log_probs=True).cpu()\n\n                linear_crf = batched_crf(pool, img, linear_probs).argmax(1).cuda()\n                cluster_crf = batched_crf(pool, img, cluster_probs).argmax(1).cuda()\n\n                model.test_cluster_metrics.update(cluster_crf, label)\n\n                tb_metrics = {\n                    **model.test_linear_metrics.compute(),\n                    **model.test_cluster_metrics.compute(),\n                }\n\n                plotted = model.label_cmap[model.test_cluster_metrics.map_clusters(cluster_crf.cpu())].astype(np.uint8)\n\n                Semantic2BinMasks = Seg2BinMask.getMasks(plotted[0], cfg.InstanceClasses)\n                InstanceMasks = Json2BinMask.getBinaryMasks(polygons, cfg.InstanceClasses)\n\n                for className in cfg.InstanceClasses:\n                    semanticMask = Semantic2BinMasks.get(className)\n                    instances = InstanceMasks[className]\n                    for ins in instances:\n                        IoU = Json2BinMask.iou(ins, semanticMask)\n                        IoU_dict[className][0] += IoU\n                        IoU_dict[className][1] += 1\n    f = open(\"../results/predictions/IoU.txt\", \"a\")\n    for className in cfg.InstanceClasses:\n        f.write(className + \"// IoU_sum: \" + str(IoU_dict[className][0]) + \"   \" + \"IoU_instance_count: \" + str(\n            IoU_dict[className][1]) + \"\\n\")\n    f.close()\n\n\ndef get_trans(res, is_label, crop_type):\n    if crop_type == \"center\":\n        cropper = T.CenterCrop(res)\n    elif crop_type == \"random\":\n        cropper = T.RandomCrop(res)\n    elif crop_type is None:\n        cropper = T.Lambda(lambda x: x)\n        res = (res, res)\n    else:\n        raise ValueError(\"Unknown Cropper {}\".format(crop_type))\n    if is_label:\n        return T.Compose([T.Resize(res, Image.NEAREST),\n                          cropper])\n    else:\n        return T.Compose([T.Resize(res, Image.NEAREST),\n                          cropper])\n\n\nif __name__ == \"__main__\":\n    prep_args()\n    my_app()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/instance_segmentation_evaluation.py b/src/instance_segmentation_evaluation.py
--- a/src/instance_segmentation_evaluation.py	(revision c6be305e586f39b07663cb9bdb535828fe4047df)
+++ b/src/instance_segmentation_evaluation.py	(date 1717584581535)
@@ -1,6 +1,12 @@
 import sys
 import os
 
+import numpy as np
+from torch import T
+from torch.distributed.pipeline.sync.dependency import join
+
+from src.utils import get_transform, flexible_collate, prep_args
+
 parentdir = os.path.dirname("../STEGO")
 sys.path.append(parentdir)
 
Index: src/plot_pr_curves.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import io\nfrom datetime import datetime\n\nimport PIL.Image\nimport hydra\nimport pytorch_lightning as pl\nimport seaborn as sns\nfrom omegaconf import DictConfig, OmegaConf\nfrom pytorch_lightning import Trainer\nfrom pytorch_lightning.loggers import TensorBoardLogger\nfrom pytorch_lightning.utilities.seed import seed_everything\nfrom sklearn.metrics import auc, precision_recall_curve, average_precision_score\nfrom torch.utils.tensorboard.summary import hparams\nfrom torchvision.transforms import ToTensor\nfrom data import *\nfrom modules import *\nfrom train_segmentation import get_class_labels\n\n\n\n@torch.jit.script\ndef super_perm(size: int, device: torch.device):\n    perm = torch.randperm(size, device=device, dtype=torch.long)\n    perm[perm == torch.arange(size, device=device)] += 1\n    return perm % size\n\n\ndef prep_fd_coord(fd):\n    fd -= fd.mean([3, 4], keepdim=True)\n    fd /= fd.std([3, 4], keepdim=True)\n    return fd.reshape(-1)\n\n\ndef prep_fd(fd):\n    fd -= fd.min()\n    fd /= fd.max()\n    return fd.reshape(-1)\n\n\ndef prep_fd_2(fd):\n    fd -= fd.mean([3, 4], keepdim=True)\n    fd -= fd.min()\n    fd /= fd.max()\n    return fd\n\n\ndef plot_auc_raw(name, fpr, tpr):\n    fpr, tpr = fpr.detach().cpu().squeeze(), tpr.detach().cpu().squeeze()\n    roc_auc = auc(fpr, tpr)\n    plt.plot(fpr, tpr, label=name + ' AUC = %0.2f' % roc_auc)\n\n\nclass CRFModule(nn.Module):\n\n    def __init__(self):\n        super().__init__()\n        self.w1 = torch.nn.Parameter(torch.tensor(10.), requires_grad=True)\n        self.w2 = torch.nn.Parameter(torch.tensor(3.), requires_grad=True)\n        self.shift = torch.nn.Parameter(torch.tensor(-.3), requires_grad=True)\n        self.alpha = torch.nn.Parameter(torch.tensor(.5), requires_grad=True)\n        self.beta = torch.nn.Parameter(torch.tensor(.15), requires_grad=True)\n        self.gamma = torch.nn.Parameter(torch.tensor(.05), requires_grad=True)\n\n    def forward(self, coord_diff, img_diff):\n        return torch.abs(self.w1) * torch.exp(- coord_diff / (2 * torch.exp(self.alpha))\n                                              - img_diff / (2 * torch.exp(self.beta))) + \\\n               torch.abs(self.w2) * torch.exp(- coord_diff / (2 * torch.exp(self.gamma))) - self.shift\n\n\nclass LitRecalibrator(pl.LightningModule):\n    def __init__(self, n_classes, cfg):\n        super().__init__()\n        self.cfg = cfg\n        self.n_classes = n_classes\n\n        if not cfg.continuous:\n            dim = n_classes\n        else:\n            dim = cfg.dim\n\n        data_dir = join(cfg.output_root, \"data\")\n        self.moco = FeaturePyramidNet(cfg.granularity, load_model(\"mocov2\", data_dir).cuda(), dim, cfg.continuous)\n        # self.dino = DinoFeaturizer(dim, cfg)\n        # self.dino = LitUnsupervisedSegmenter.load_from_checkpoint(\"../models/vit_base_cocostuff27.ckpt\").net\n        # self.crf = CRFModule()\n        self.cm_metrics = UnsupervisedMetrics(\n            \"confusion_matrix/\", n_classes, 0, False)\n        self.automatic_optimization = False\n\n        if self.cfg.dataset_name.startswith(\"cityscapes\"):\n            self.label_cmap = create_cityscapes_colormap()\n        else:\n            self.label_cmap = create_pascal_label_colormap()\n\n    def get_crf_fd(self, img, coords1, coords2):\n        with torch.no_grad():\n            n = img.shape[0]\n            [h1, w1, h2, w2] = [self.cfg.feature_samples] * 4\n            img_samples_1 = sample(img, coords1).permute(0, 2, 3, 1).reshape(n, -1, 1, 3)\n            img_samples_2 = sample(img, coords2).permute(0, 2, 3, 1).reshape(n, 1, -1, 3)\n            coord_diff = (coords1.reshape(n, -1, 1, 2) - coords2.reshape(n, 1, -1, 2)) \\\n                .square().sum(-1).reshape(n, h1, w1, h2, w2)\n\n            img_diff = (img_samples_1 - img_samples_2).square().sum(-1).reshape(n, h1, w1, h2, w2)\n\n            return self.crf(coord_diff, img_diff)\n\n    def get_net_fd(self, feats1, feats2, label1, label2, coords1, coords2):\n        with torch.no_grad():\n            feat_samples1 = sample(feats1, coords1)\n            feat_samples2 = sample(feats2, coords2)\n\n            label_samples1 = sample(F.one_hot(label1 + 1, self.n_classes + 1)\n                                    .to(torch.float).permute(0, 3, 1, 2), coords1)\n            label_samples2 = sample(F.one_hot(label2 + 1, self.n_classes + 1)\n                                    .to(torch.float).permute(0, 3, 1, 2), coords2)\n\n            fd = tensor_correlation(norm(feat_samples1), norm(feat_samples2))\n            ld = tensor_correlation(label_samples1, label_samples2)\n\n        return ld, fd, label_samples1.argmax(1), label_samples2.argmax(1)\n\n    def training_step(self, batch, batch_idx):\n        return None\n\n    def validation_step(self, batch, batch_idx):\n        with torch.no_grad():\n            img = batch[\"img\"]\n            label = batch[\"label\"]\n\n            dino_feats, dino_code = self.dino(img)\n            moco_feats, moco_code = self.moco(img)\n\n            coord_shape = [img.shape[0], self.cfg.feature_samples, self.cfg.feature_samples, 2]\n            coords1 = torch.rand(coord_shape, device=img.device) * 2 - 1\n            coords2 = torch.rand(coord_shape, device=img.device) * 2 - 1\n\n            crf_fd = self.get_crf_fd(img, coords1, coords2)\n\n            ld, stego_fd, l1, l2 = self.get_net_fd(dino_code, dino_code, label, label, coords1, coords2)\n            ld, dino_fd, l1, l2 = self.get_net_fd(dino_feats, dino_feats, label, label, coords1, coords2)\n            ld, moco_fd, l1, l2 = self.get_net_fd(moco_feats, moco_feats, label, label, coords1, coords2)\n\n            return dict(\n                dino_fd=dino_fd,\n                stego_fd=stego_fd,\n                moco_fd=moco_fd,\n                crf_fd=crf_fd,\n                ld=ld\n            )\n\n    def validation_epoch_end(self, outputs) -> None:\n        # self.cm_metrics.compute()\n\n        all_outputs = {}\n        for k in outputs[0].keys():\n            t = torch.cat([o[k] for o in outputs], dim=0)\n            all_outputs[k] = t\n\n        def plot_pr(preds, targets, name):\n            preds = preds.cpu().reshape(-1)\n            preds -= preds.min()\n            preds /= preds.max()\n            targets = targets.to(torch.int64).cpu().reshape(-1)\n            precisions, recalls, _ = precision_recall_curve(targets, preds)\n            average_precision = average_precision_score(targets, preds)\n            plt.plot(recalls, precisions, label=\"AP={}% {}\".format(int(average_precision * 100), name))\n\n        def plot_cm():\n            histogram = self.cm_metrics.histogram\n            fig = plt.figure(figsize=(10, 10))\n            ax = fig.gca()\n            hist = histogram.detach().cpu().to(torch.float32)\n            hist /= torch.clamp_min(hist.sum(dim=0, keepdim=True), 1)\n            sns.heatmap(hist.t(), annot=False, fmt='g', ax=ax, cmap=\"Blues\", cbar=False)\n            ax.set_title('KNN Labels', fontsize=28)\n            ax.set_ylabel('Image labels', fontsize=28)\n            names = get_class_labels(self.cfg.dataset_name)\n            if self.cfg.extra_clusters:\n                names = names + [\"Extra\"]\n            ax.set_xticks(np.arange(0, len(names)) + .5)\n            ax.set_yticks(np.arange(0, len(names)) + .5)\n            ax.xaxis.tick_top()\n            ax.xaxis.set_ticklabels(names, fontsize=18)\n            ax.yaxis.set_ticklabels(names, fontsize=18)\n            colors = [self.label_cmap[i] / 255.0 for i in range(len(names))]\n            [t.set_color(colors[i]) for i, t in enumerate(ax.xaxis.get_ticklabels())]\n            [t.set_color(colors[i]) for i, t in enumerate(ax.yaxis.get_ticklabels())]\n            plt.xticks(rotation=90)\n            plt.yticks(rotation=0)\n            ax.vlines(np.arange(0, len(names) + 1), color=[.5, .5, .5], *ax.get_xlim())\n            ax.hlines(np.arange(0, len(names) + 1), color=[.5, .5, .5], *ax.get_ylim())\n            plt.tight_layout()\n\n        if self.trainer.is_global_zero:\n            # plt.style.use('dark_background')\n            print(\"Plotting\")\n            plt.figure(figsize=(5, 4), dpi=100)\n            plot_cm()\n            plt.tight_layout()\n            plt.show()\n            plt.clf()\n\n            print(\"Plotting\")\n            # plt.style.use('dark_background')\n            plt.figure(figsize=(5, 4), dpi=100)\n            ld = all_outputs[\"ld\"]\n            plot_pr(prep_fd(all_outputs[\"stego_fd\"]), ld, \"STEGO (Ours)\")\n            plot_pr(prep_fd(all_outputs[\"dino_fd\"]), ld, \"DINO\")\n            plot_pr(prep_fd(all_outputs[\"moco_fd\"]), ld, \"MoCoV2\")\n            plot_pr(prep_fd(all_outputs[\"crf_fd\"]), ld, \"CRF\")\n            plt.xlim([0, 1])\n            plt.ylim([0, 1])\n            plt.legend(fontsize=12)\n            plt.ylabel('Precision', fontsize=16)\n            plt.xlabel('Recall', fontsize=16)\n            plt.tight_layout()\n            plt.show()\n\n        return None\n\n    def configure_optimizers(self):\n        return None\n\n\n@hydra.main(config_path=\"configs\", config_name=\"train_config.yml\")\ndef my_app(cfg: DictConfig) -> None:\n    print(OmegaConf.to_yaml(cfg))\n    pytorch_data_dir = cfg.pytorch_data_dir\n    data_dir = join(cfg.output_root, \"data\")\n    log_dir = join(cfg.output_root, \"logs\")\n    checkpoint_dir = join(cfg.output_root, \"checkpoints\")\n    os.makedirs(data_dir, exist_ok=True)\n    os.makedirs(log_dir, exist_ok=True)\n\n    seed_everything(seed=0, workers=True)\n\n    train_dataset = ContrastiveSegDataset(\n        pytorch_data_dir=pytorch_data_dir,\n        dataset_name=cfg.dataset_name,\n        crop_type=cfg.crop_type,\n        image_set=\"train\",\n        transform=get_transform(cfg.res, False, cfg.loader_crop_type),\n        target_transform=get_transform(cfg.res, True, cfg.loader_crop_type),\n        cfg=cfg,\n        aug_geometric_transform=None,\n        aug_photometric_transform=None,\n        num_neighbors=cfg.num_neighbors,\n        mask=True,\n        pos_images=True,\n        pos_labels=True\n    )\n\n    val_loader_crop = \"center\"\n    val_dataset = ContrastiveSegDataset(\n        pytorch_data_dir=pytorch_data_dir,\n        dataset_name=cfg.dataset_name,\n        crop_type=None,\n        image_set=\"val\",\n        transform=get_transform(320, False, val_loader_crop),\n        target_transform=get_transform(320, True, val_loader_crop),\n        mask=True,\n        pos_images=True,\n        pos_labels=True,\n        cfg=cfg,\n    )\n\n    train_loader = DataLoader(train_dataset, cfg.batch_size, shuffle=True, num_workers=cfg.num_workers)\n    val_loader = DataLoader(val_dataset, cfg.batch_size, shuffle=True, num_workers=cfg.num_workers)\n\n    model = LitRecalibrator(train_dataset.n_classes, cfg)\n\n    prefix = \"{}_{}\".format(cfg.dataset_name, cfg.experiment_name)\n    name = '{}_date_{}'.format(prefix, datetime.now().strftime('%b%d_%H-%M-%S'))\n    tb_logger = TensorBoardLogger(\n        join(log_dir, cfg.log_dir, name),\n        default_hp_metric=False\n    )\n    steps = 1\n    trainer = Trainer(\n        log_every_n_steps=10,\n        val_check_interval=steps,\n        gpus=1,\n        max_steps=steps,\n        limit_val_batches=100,\n        accelerator=\"ddp\",\n        num_sanity_val_steps=0,\n        logger=tb_logger,\n    )\n    trainer.fit(model, train_loader, val_loader)\n    os.makedirs(join(checkpoint_dir, cfg.log_dir), exist_ok=True)\n\n\nif __name__ == \"__main__\":\n    prep_args()\n    my_app()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/plot_pr_curves.py b/src/plot_pr_curves.py
--- a/src/plot_pr_curves.py	(revision c6be305e586f39b07663cb9bdb535828fe4047df)
+++ b/src/plot_pr_curves.py	(date 1717584581532)
@@ -5,6 +5,7 @@
 import hydra
 import pytorch_lightning as pl
 import seaborn as sns
+from matplotlib import pyplot as plt
 from omegaconf import DictConfig, OmegaConf
 from pytorch_lightning import Trainer
 from pytorch_lightning.loggers import TensorBoardLogger
@@ -14,6 +15,7 @@
 from torchvision.transforms import ToTensor
 from data import *
 from modules import *
+from src.utils import load_model, UnsupervisedMetrics, get_transform, prep_args
 from train_segmentation import get_class_labels
 
 
Index: src/modules.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import torch\n\nfrom utils import *\nimport torch.nn.functional as F\nimport dino.vision_transformer as vits\n\n\nclass LambdaLayer(nn.Module):\n    def __init__(self, lambd):\n        super(LambdaLayer, self).__init__()\n        self.lambd = lambd\n\n    def forward(self, x):\n        return self.lambd(x)\n\n\nclass DinoFeaturizer(nn.Module):\n\n    def __init__(self, dim, cfg):\n        super().__init__()\n        self.cfg = cfg\n        self.dim = dim\n        patch_size = self.cfg.dino_patch_size\n        self.patch_size = patch_size\n        self.feat_type = self.cfg.dino_feat_type\n        arch = self.cfg.model_type\n        self.model = vits.__dict__[arch](\n            patch_size=patch_size,\n            num_classes=0)\n        for p in self.model.parameters():\n            p.requires_grad = False\n        self.model.eval().cuda()\n        self.dropout = torch.nn.Dropout2d(p=.1)\n\n        if arch == \"vit_small\" and patch_size == 16:\n            url = \"dino_deitsmall16_pretrain/dino_deitsmall16_pretrain.pth\"\n        elif arch == \"vit_small\" and patch_size == 8:\n            url = \"dino_deitsmall8_300ep_pretrain/dino_deitsmall8_300ep_pretrain.pth\"\n        elif arch == \"vit_base\" and patch_size == 16:\n            url = \"dino_vitbase16_pretrain/dino_vitbase16_pretrain.pth\"\n        elif arch == \"vit_base\" and patch_size == 8:\n            url = \"dino_vitbase8_pretrain/dino_vitbase8_pretrain.pth\"\n        else:\n            raise ValueError(\"Unknown arch and patch size\")\n\n        if cfg.pretrained_weights is not None:\n            state_dict = torch.load(cfg.pretrained_weights, map_location=\"cpu\")\n            state_dict = state_dict[\"teacher\"]\n            # remove `module.` prefix\n            state_dict = {k.replace(\"module.\", \"\"): v for k, v in state_dict.items()}\n            # remove `backbone.` prefix induced by multicrop wrapper\n            state_dict = {k.replace(\"backbone.\", \"\"): v for k, v in state_dict.items()}\n\n            # state_dict = {k.replace(\"projection_head\", \"mlp\"): v for k, v in state_dict.items()}\n            # state_dict = {k.replace(\"prototypes\", \"last_layer\"): v for k, v in state_dict.items()}\n\n            msg = self.model.load_state_dict(state_dict, strict=False)\n            print('Pretrained weights found at {} and loaded with msg: {}'.format(cfg.pretrained_weights, msg))\n        else:\n            print(\"Since no pretrained weights have been provided, we load the reference pretrained DINO weights.\")\n            state_dict = torch.hub.load_state_dict_from_url(url=\"https://dl.fbaipublicfiles.com/dino/\" + url)\n            self.model.load_state_dict(state_dict, strict=True)\n\n        if arch == \"vit_small\":\n            self.n_feats = 384\n        else:\n            self.n_feats = 768\n        self.cluster1 = self.make_clusterer(self.n_feats)\n        self.proj_type = cfg.projection_type\n        if self.proj_type == \"nonlinear\":\n            self.cluster2 = self.make_nonlinear_clusterer(self.n_feats)\n\n    def make_clusterer(self, in_channels):\n        return torch.nn.Sequential(\n            torch.nn.Conv2d(in_channels, self.dim, (1, 1)))  # ,\n\n    def make_nonlinear_clusterer(self, in_channels):\n        return torch.nn.Sequential(\n            torch.nn.Conv2d(in_channels, in_channels, (1, 1)),\n            torch.nn.ReLU(),\n            torch.nn.Conv2d(in_channels, self.dim, (1, 1)))\n\n    def forward(self, img, n=1, return_class_feat=False):\n        self.model.eval()\n        with torch.no_grad():\n            assert (img.shape[2] % self.patch_size == 0)\n            assert (img.shape[3] % self.patch_size == 0)\n\n            # get selected layer activations\n            feat, attn, qkv = self.model.get_intermediate_feat(img, n=n)\n            feat, attn, qkv = feat[0], attn[0], qkv[0]\n\n            feat_h = img.shape[2] // self.patch_size\n            feat_w = img.shape[3] // self.patch_size\n\n            if self.feat_type == \"feat\":\n                image_feat = feat[:, 1:, :].reshape(feat.shape[0], feat_h, feat_w, -1).permute(0, 3, 1, 2)\n            elif self.feat_type == \"KK\":\n                image_k = qkv[1, :, :, 1:, :].reshape(feat.shape[0], 6, feat_h, feat_w, -1)\n                B, H, I, J, D = image_k.shape\n                image_feat = image_k.permute(0, 1, 4, 2, 3).reshape(B, H * D, I, J)\n            else:\n                raise ValueError(\"Unknown feat type:{}\".format(self.feat_type))\n\n            if return_class_feat:\n                return feat[:, :1, :].reshape(feat.shape[0], 1, 1, -1).permute(0, 3, 1, 2)\n\n        if self.proj_type is not None:\n            code = self.cluster1(self.dropout(image_feat))\n            if self.proj_type == \"nonlinear\":\n                code += self.cluster2(self.dropout(image_feat))\n        else:\n            code = image_feat\n\n        if self.cfg.dropout:\n            return self.dropout(image_feat), code\n        else:\n            return image_feat, code\n\n\nclass ResizeAndClassify(nn.Module):\n\n    def __init__(self, dim: int, size: int, n_classes: int):\n        super(ResizeAndClassify, self).__init__()\n        self.size = size\n        self.predictor = torch.nn.Sequential(\n            torch.nn.Conv2d(dim, n_classes, (1, 1)),\n            torch.nn.LogSoftmax(1))\n\n    def forward(self, x):\n        return F.interpolate(self.predictor.forward(x), self.size, mode=\"bilinear\", align_corners=False)\n\n\nclass ClusterLookup(nn.Module):\n\n    def __init__(self, dim: int, n_classes: int):\n        super(ClusterLookup, self).__init__()\n        self.n_classes = n_classes\n        self.dim = dim\n        self.clusters = torch.nn.Parameter(torch.randn(n_classes, dim))\n\n    def reset_parameters(self):\n        with torch.no_grad():\n            self.clusters.copy_(torch.randn(self.n_classes, self.dim))\n\n    def forward(self, x, alpha, log_probs=False):\n        normed_clusters = F.normalize(self.clusters, dim=1)\n        normed_features = F.normalize(x, dim=1)\n        inner_products = torch.einsum(\"bchw,nc->bnhw\", normed_features, normed_clusters)\n\n        if alpha is None:\n            cluster_probs = F.one_hot(torch.argmax(inner_products, dim=1), self.clusters.shape[0]) \\\n                .permute(0, 3, 1, 2).to(torch.float32)\n        else:\n            cluster_probs = nn.functional.softmax(inner_products * alpha, dim=1)\n\n        cluster_loss = -(cluster_probs * inner_products).sum(1).mean()\n        if log_probs:\n            return nn.functional.log_softmax(inner_products * alpha, dim=1)\n        else:\n            return cluster_loss, cluster_probs\n\n\nclass FeaturePyramidNet(nn.Module):\n\n    @staticmethod\n    def _helper(x):\n        # TODO remove this hard coded 56\n        return F.interpolate(x, 56, mode=\"bilinear\", align_corners=False).unsqueeze(-1)\n\n    def make_clusterer(self, in_channels):\n        return torch.nn.Sequential(\n            torch.nn.Conv2d(in_channels, self.dim, (1, 1)),\n            LambdaLayer(FeaturePyramidNet._helper))\n\n    def make_nonlinear_clusterer(self, in_channels):\n        return torch.nn.Sequential(\n            torch.nn.Conv2d(in_channels, in_channels, (1, 1)),\n            torch.nn.ReLU(),\n            torch.nn.Conv2d(in_channels, in_channels, (1, 1)),\n            torch.nn.ReLU(),\n            torch.nn.Conv2d(in_channels, self.dim, (1, 1)),\n            LambdaLayer(FeaturePyramidNet._helper))\n\n    def __init__(self, granularity, cut_model, dim, continuous):\n        super(FeaturePyramidNet, self).__init__()\n        self.layer_nums = [5, 6, 7]\n        self.spatial_resolutions = [7, 14, 28, 56]\n        self.feat_channels = [2048, 1024, 512, 3]\n        self.extra_channels = [128, 64, 32, 32]\n        self.granularity = granularity\n        self.encoder = NetWithActivations(cut_model, self.layer_nums)\n        self.dim = dim\n        self.continuous = continuous\n        self.n_feats = self.dim\n\n        self.up = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=False)\n\n        assert granularity in {1, 2, 3, 4}\n        self.cluster1 = self.make_clusterer(self.feat_channels[0])\n        self.cluster1_nl = self.make_nonlinear_clusterer(self.feat_channels[0])\n\n        if granularity >= 2:\n            # self.conv1 = DoubleConv(self.feat_channels[0], self.extra_channels[0])\n            # self.conv2 = DoubleConv(self.extra_channels[0] + self.feat_channels[1], self.extra_channels[1])\n            self.conv2 = DoubleConv(self.feat_channels[0] + self.feat_channels[1], self.extra_channels[1])\n            self.cluster2 = self.make_clusterer(self.extra_channels[1])\n        if granularity >= 3:\n            self.conv3 = DoubleConv(self.extra_channels[1] + self.feat_channels[2], self.extra_channels[2])\n            self.cluster3 = self.make_clusterer(self.extra_channels[2])\n        if granularity >= 4:\n            self.conv4 = DoubleConv(self.extra_channels[2] + self.feat_channels[3], self.extra_channels[3])\n            self.cluster4 = self.make_clusterer(self.extra_channels[3])\n\n    def c(self, x, y):\n        return torch.cat([x, y], dim=1)\n\n    def forward(self, x):\n        with torch.no_grad():\n            feats = self.encoder(x)\n        low_res_feats = feats[self.layer_nums[-1]]\n\n        all_clusters = []\n\n        # all_clusters.append(self.cluster1(low_res_feats) + self.cluster1_nl(low_res_feats))\n        all_clusters.append(self.cluster1(low_res_feats))\n\n        if self.granularity >= 2:\n            # f1 = self.conv1(low_res_feats)\n            # f1_up = self.up(f1)\n            f1_up = self.up(low_res_feats)\n            f2 = self.conv2(self.c(f1_up, feats[self.layer_nums[-2]]))\n            all_clusters.append(self.cluster2(f2))\n        if self.granularity >= 3:\n            f2_up = self.up(f2)\n            f3 = self.conv3(self.c(f2_up, feats[self.layer_nums[-3]]))\n            all_clusters.append(self.cluster3(f3))\n        if self.granularity >= 4:\n            f3_up = self.up(f3)\n            final_size = self.spatial_resolutions[-1]\n            f4 = self.conv4(self.c(f3_up, F.interpolate(\n                x, (final_size, final_size), mode=\"bilinear\", align_corners=False)))\n            all_clusters.append(self.cluster4(f4))\n\n        avg_code = torch.cat(all_clusters, 4).mean(4)\n\n        if self.continuous:\n            clusters = avg_code\n        else:\n            clusters = torch.log_softmax(avg_code, 1)\n\n        return low_res_feats, clusters\n\n\nclass DoubleConv(nn.Module):\n    \"\"\"(convolution => [BN] => ReLU) * 2\"\"\"\n\n    def __init__(self, in_channels, out_channels, mid_channels=None):\n        super().__init__()\n        if not mid_channels:\n            mid_channels = out_channels\n        self.double_conv = nn.Sequential(\n            nn.Conv2d(in_channels, mid_channels, kernel_size=3, padding=1),\n            nn.BatchNorm2d(mid_channels),\n            nn.ReLU(),\n            nn.Conv2d(mid_channels, out_channels, kernel_size=3, padding=1),\n            nn.BatchNorm2d(out_channels),\n            nn.ReLU()\n        )\n\n    def forward(self, x):\n        return self.double_conv(x)\n\n\ndef norm(t):\n    return F.normalize(t, dim=1, eps=1e-10)\n\n\ndef average_norm(t):\n    return t / t.square().sum(1, keepdim=True).sqrt().mean()\n\n\ndef tensor_correlation(a, b):\n    return torch.einsum(\"nchw,ncij->nhwij\", a, b)\n\n\ndef sample(t: torch.Tensor, coords: torch.Tensor):\n    return F.grid_sample(t, coords.permute(0, 2, 1, 3), padding_mode='border', align_corners=True)\n\n\n@torch.jit.script\ndef super_perm(size: int, device: torch.device):\n    perm = torch.randperm(size, device=device, dtype=torch.long)\n    perm[perm == torch.arange(size, device=device)] += 1\n    return perm % size\n\n\ndef sample_nonzero_locations(t, target_size):\n    nonzeros = torch.nonzero(t)\n    coords = torch.zeros(target_size, dtype=nonzeros.dtype, device=nonzeros.device)\n    n = target_size[1] * target_size[2]\n    for i in range(t.shape[0]):\n        selected_nonzeros = nonzeros[nonzeros[:, 0] == i]\n        if selected_nonzeros.shape[0] == 0:\n            selected_coords = torch.randint(t.shape[1], size=(n, 2), device=nonzeros.device)\n        else:\n            selected_coords = selected_nonzeros[torch.randint(len(selected_nonzeros), size=(n,)), 1:]\n        coords[i, :, :, :] = selected_coords.reshape(target_size[1], target_size[2], 2)\n    coords = coords.to(torch.float32) / t.shape[1]\n    coords = coords * 2 - 1\n    return torch.flip(coords, dims=[-1])\n\n\nclass ContrastiveCorrelationLoss(nn.Module):\n\n    def __init__(self, cfg, ):\n        super(ContrastiveCorrelationLoss, self).__init__()\n        self.cfg = cfg\n\n    def standard_scale(self, t):\n        t1 = t - t.mean()\n        t2 = t1 / t1.std()\n        return t2\n\n    def helper(self, f1, f2, c1, c2, shift):\n        with torch.no_grad():\n            # Comes straight from backbone which is currently frozen. this saves mem.\n            fd = tensor_correlation(norm(f1), norm(f2))\n\n            if self.cfg.pointwise:\n                old_mean = fd.mean()\n                fd -= fd.mean([3, 4], keepdim=True)\n                fd = fd - fd.mean() + old_mean\n\n        cd = tensor_correlation(norm(c1), norm(c2))\n\n        if self.cfg.zero_clamp:\n            min_val = 0.0\n        else:\n            min_val = -9999.0\n\n        if self.cfg.stabalize:\n            loss = - cd.clamp(min_val, .8) * (fd - shift)\n        else:\n            loss = - cd.clamp(min_val) * (fd - shift)\n\n        return loss, cd\n\n    def forward(self,\n                orig_feats: torch.Tensor, orig_feats_pos: torch.Tensor,\n                orig_salience: torch.Tensor, orig_salience_pos: torch.Tensor,\n                orig_code: torch.Tensor, orig_code_pos: torch.Tensor,\n                ):\n\n        coord_shape = [orig_feats.shape[0], self.cfg.feature_samples, self.cfg.feature_samples, 2]\n\n        if self.cfg.use_salience:\n            coords1_nonzero = sample_nonzero_locations(orig_salience, coord_shape)\n            coords2_nonzero = sample_nonzero_locations(orig_salience_pos, coord_shape)\n            coords1_reg = torch.rand(coord_shape, device=orig_feats.device) * 2 - 1\n            coords2_reg = torch.rand(coord_shape, device=orig_feats.device) * 2 - 1\n            mask = (torch.rand(coord_shape[:-1], device=orig_feats.device) > .1).unsqueeze(-1).to(torch.float32)\n            coords1 = coords1_nonzero * mask + coords1_reg * (1 - mask)\n            coords2 = coords2_nonzero * mask + coords2_reg * (1 - mask)\n        else:\n            coords1 = torch.rand(coord_shape, device=orig_feats.device) * 2 - 1\n            coords2 = torch.rand(coord_shape, device=orig_feats.device) * 2 - 1\n\n        feats = sample(orig_feats, coords1)\n        code = sample(orig_code, coords1)\n\n        feats_pos = sample(orig_feats_pos, coords2)\n        code_pos = sample(orig_code_pos, coords2)\n\n        pos_intra_loss, pos_intra_cd = self.helper(\n            feats, feats, code, code, self.cfg.pos_intra_shift)\n        pos_inter_loss, pos_inter_cd = self.helper(\n            feats, feats_pos, code, code_pos, self.cfg.pos_inter_shift)\n\n        neg_losses = []\n        neg_cds = []\n        for i in range(self.cfg.neg_samples):\n            perm_neg = super_perm(orig_feats.shape[0], orig_feats.device)\n            feats_neg = sample(orig_feats[perm_neg], coords2)\n            code_neg = sample(orig_code[perm_neg], coords2)\n            neg_inter_loss, neg_inter_cd = self.helper(\n                feats, feats_neg, code, code_neg, self.cfg.neg_inter_shift)\n            neg_losses.append(neg_inter_loss)\n            neg_cds.append(neg_inter_cd)\n        neg_inter_loss = torch.cat(neg_losses, axis=0)\n        neg_inter_cd = torch.cat(neg_cds, axis=0)\n\n        return (pos_intra_loss.mean(),\n                pos_intra_cd,\n                pos_inter_loss.mean(),\n                pos_inter_cd,\n                neg_inter_loss,\n                neg_inter_cd)\n\n\nclass Decoder(nn.Module):\n    def __init__(self, code_channels, feat_channels):\n        super().__init__()\n        self.linear = torch.nn.Conv2d(code_channels, feat_channels, (1, 1))\n        self.nonlinear = torch.nn.Sequential(\n            torch.nn.Conv2d(code_channels, code_channels, (1, 1)),\n            torch.nn.ReLU(),\n            torch.nn.Conv2d(code_channels, code_channels, (1, 1)),\n            torch.nn.ReLU(),\n            torch.nn.Conv2d(code_channels, feat_channels, (1, 1)))\n\n    def forward(self, x):\n        return self.linear(x) + self.nonlinear(x)\n\n\nclass NetWithActivations(torch.nn.Module):\n    def __init__(self, model, layer_nums):\n        super(NetWithActivations, self).__init__()\n        self.layers = nn.ModuleList(model.children())\n        self.layer_nums = []\n        for l in layer_nums:\n            if l < 0:\n                self.layer_nums.append(len(self.layers) + l)\n            else:\n                self.layer_nums.append(l)\n        self.layer_nums = set(sorted(self.layer_nums))\n\n    def forward(self, x):\n        activations = {}\n        for ln, l in enumerate(self.layers):\n            x = l(x)\n            if ln in self.layer_nums:\n                activations[ln] = x\n        return activations\n\n\nclass ContrastiveCRFLoss(nn.Module):\n\n    def __init__(self, n_samples, alpha, beta, gamma, w1, w2, shift):\n        super(ContrastiveCRFLoss, self).__init__()\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n        self.w1 = w1\n        self.w2 = w2\n        self.n_samples = n_samples\n        self.shift = shift\n\n    def forward(self, guidance, clusters):\n        device = clusters.device\n        assert (guidance.shape[0] == clusters.shape[0])\n        assert (guidance.shape[2:] == clusters.shape[2:])\n        h = guidance.shape[2]\n        w = guidance.shape[3]\n\n        coords = torch.cat([\n            torch.randint(0, h, size=[1, self.n_samples], device=device),\n            torch.randint(0, w, size=[1, self.n_samples], device=device)], 0)\n\n        selected_guidance = guidance[:, :, coords[0, :], coords[1, :]]\n        coord_diff = (coords.unsqueeze(-1) - coords.unsqueeze(1)).square().sum(0).unsqueeze(0)\n        guidance_diff = (selected_guidance.unsqueeze(-1) - selected_guidance.unsqueeze(2)).square().sum(1)\n\n        sim_kernel = self.w1 * torch.exp(- coord_diff / (2 * self.alpha) - guidance_diff / (2 * self.beta)) + \\\n                     self.w2 * torch.exp(- coord_diff / (2 * self.gamma)) - self.shift\n\n        selected_clusters = clusters[:, :, coords[0, :], coords[1, :]]\n        cluster_sims = torch.einsum(\"nka,nkb->nab\", selected_clusters, selected_clusters)\n        return -(cluster_sims * sim_kernel)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/modules.py b/src/modules.py
--- a/src/modules.py	(revision c6be305e586f39b07663cb9bdb535828fe4047df)
+++ b/src/modules.py	(date 1717584581540)
@@ -1,4 +1,5 @@
 import torch
+from torch import nn
 
 from utils import *
 import torch.nn.functional as F
Index: src/demo_segmentation.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from modules import *\nimport hydra\nimport torch.multiprocessing\nfrom PIL import Image\nfrom crf import dense_crf\nfrom omegaconf import DictConfig, OmegaConf\nfrom torch.utils.data import DataLoader, Dataset\nfrom train_segmentation import LitUnsupervisedSegmenter\nfrom tqdm import tqdm\nimport random\ntorch.multiprocessing.set_sharing_strategy('file_system')\n\n\nclass UnlabeledImageFolder(Dataset):\n    def __init__(self, root, transform):\n        super(UnlabeledImageFolder, self).__init__()\n        self.root = join(root)\n        self.transform = transform\n        self.images = os.listdir(self.root)\n\n    def __getitem__(self, index):\n        image = Image.open(join(self.root, self.images[index])).convert('RGB')\n        seed = np.random.randint(2147483647)\n        random.seed(seed)\n        torch.manual_seed(seed)\n        image = self.transform(image)\n\n        return image, self.images[index]\n\n    def __len__(self):\n        return len(self.images)\n\n\n@hydra.main(config_path=\"configs\", config_name=\"demo_config.yml\")\ndef my_app(cfg: DictConfig) -> None:\n    result_dir = \"../results/predictions/{}\".format(cfg.experiment_name)\n    os.makedirs(result_dir, exist_ok=True)\n    os.makedirs(join(result_dir, \"cluster\"), exist_ok=True)\n    os.makedirs(join(result_dir, \"linear\"), exist_ok=True)\n\n    model = LitUnsupervisedSegmenter.load_from_checkpoint(cfg.model_path)\n    print(OmegaConf.to_yaml(model.cfg))\n\n    dataset = UnlabeledImageFolder(\n        root=cfg.image_dir,\n        transform=get_transform(cfg.res, False, \"center\"),\n    )\n\n    loader = DataLoader(dataset, cfg.batch_size * 2,\n                        shuffle=False, num_workers=cfg.num_workers,\n                        pin_memory=True, collate_fn=flexible_collate)\n\n    model.eval().cuda()\n    if cfg.use_ddp:\n        par_model = torch.nn.DataParallel(model.net)\n    else:\n        par_model = model.net\n\n    for i, (img, name) in enumerate(tqdm(loader)):\n        with torch.no_grad():\n            \n            img = img.cuda()\n            feats, code1 = par_model(img)\n            feats, code2 = par_model(img.flip(dims=[3]))\n            code = (code1 + code2.flip(dims=[3])) / 2\n\n            code = F.interpolate(code, img.shape[-2:], mode='bilinear', align_corners=False)\n\n            linear_probs = torch.log_softmax(model.linear_probe(code), dim=1).cpu()\n            cluster_probs = model.cluster_probe(code, 2, log_probs=True).cpu()\n\n            for j in range(img.shape[0]):\n                single_img = img[j].cpu()\n                linear_crf = dense_crf(single_img, linear_probs[j]).argmax(0)\n                cluster_crf = dense_crf(single_img, cluster_probs[j]).argmax(0)\n\n                new_name = \".\".join(name[j].split(\".\")[:-1]) + \".png\"\n                Image.fromarray(linear_crf.astype(np.uint8)).save(join(result_dir, \"linear\", new_name))\n                Image.fromarray(cluster_crf.astype(np.uint8)).save(join(result_dir, \"cluster\", new_name))\n\n\nif __name__ == \"__main__\":\n    prep_args()\n    my_app()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/demo_segmentation.py b/src/demo_segmentation.py
--- a/src/demo_segmentation.py	(revision c6be305e586f39b07663cb9bdb535828fe4047df)
+++ b/src/demo_segmentation.py	(date 1717584581548)
@@ -1,3 +1,8 @@
+import os
+
+import numpy as np
+from torch.distributed.pipeline.sync.dependency import join
+
 from modules import *
 import hydra
 import torch.multiprocessing
@@ -5,6 +10,8 @@
 from crf import dense_crf
 from omegaconf import DictConfig, OmegaConf
 from torch.utils.data import DataLoader, Dataset
+
+from src.utils import get_transform, flexible_collate, prep_args
 from train_segmentation import LitUnsupervisedSegmenter
 from tqdm import tqdm
 import random
Index: src/crf.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#\n# Authors: Wouter Van Gansbeke & Simon Vandenhende\n# Licensed under the CC BY-NC 4.0 license (https://creativecommons.org/licenses/by-nc/4.0/)\n\nimport numpy as np\nimport pydensecrf.densecrf as dcrf\nimport pydensecrf.utils as utils\nimport torch\nimport torch.nn.functional as F\nimport torchvision.transforms.functional as VF\nfrom utils import unnorm\n\nMAX_ITER = 10\nPOS_W = 3\nPOS_XY_STD = 1\nBi_W = 4\nBi_XY_STD = 67\nBi_RGB_STD = 3\nBGR_MEAN = np.array([104.008, 116.669, 122.675])\n\n\ndef dense_crf(image_tensor: torch.FloatTensor, output_logits: torch.FloatTensor):\n    image = np.array(VF.to_pil_image(unnorm(image_tensor)))[:, :, ::-1]\n    H, W = image.shape[:2]\n    image = np.ascontiguousarray(image)\n\n    output_logits = F.interpolate(output_logits.unsqueeze(0), size=(H, W), mode=\"bilinear\",\n                                  align_corners=False).squeeze()\n    output_probs = F.softmax(output_logits, dim=0).cpu().numpy()\n\n    c = output_probs.shape[0]\n    h = output_probs.shape[1]\n    w = output_probs.shape[2]\n\n    U = utils.unary_from_softmax(output_probs)\n    U = np.ascontiguousarray(U)\n\n    d = dcrf.DenseCRF2D(w, h, c)\n    d.setUnaryEnergy(U)\n    d.addPairwiseGaussian(sxy=POS_XY_STD, compat=POS_W)\n    d.addPairwiseBilateral(sxy=Bi_XY_STD, srgb=Bi_RGB_STD, rgbim=image, compat=Bi_W)\n\n    Q = d.inference(MAX_ITER)\n    Q = np.array(Q).reshape((c, h, w))\n    return Q\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/crf.py b/src/crf.py
--- a/src/crf.py	(revision c6be305e586f39b07663cb9bdb535828fe4047df)
+++ b/src/crf.py	(date 1717584581546)
@@ -8,7 +8,9 @@
 import torch
 import torch.nn.functional as F
 import torchvision.transforms.functional as VF
-from utils import unnorm
+
+from src.utils import unnorm
+#from utils import unnorm
 
 MAX_ITER = 10
 POS_W = 3
Index: src/Instance_segmentation_depth.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sys\nimport os\n\n\n\nfrom multiprocessing import Pool\nfrom depth_dataset import ContrastiveDepthDataset\nfrom eval_segmentation import batched_crf\nfrom modules import *\nimport hydra\nimport torch.multiprocessing\nfrom PIL import Image\nfrom src.crf import  dense_crf\nfrom omegaconf import DictConfig, OmegaConf\nfrom torch.utils.data import DataLoader, Dataset\nimport json_to_binary_mask as Json2BinMask\nfrom train_segmentation import LitUnsupervisedSegmenter\nfrom tqdm import tqdm\nimport random\nimport semantic_to_binary_mask as Seg2BinMask\n\n\ntorch.multiprocessing.set_sharing_strategy('file_system')\n\n\nclass UnlabeledImageFolder(Dataset):\n    def __init__(self, root, transform):\n        super(UnlabeledImageFolder, self).__init__()\n        self.root = join(root)\n        self.transform = transform\n        self.images = os.listdir(self.root)\n\n    def __getitem__(self, index):\n        image = Image.open(join(self.root, self.images[index])).convert('RGB')\n        seed = np.random.randint(2147483647)\n        random.seed(seed)\n        torch.manual_seed(seed)\n        image = self.transform(image)\n\n        return image, self.images[index]\n\n    def __len__(self):\n        return len(self.images)\n\n\n@hydra.main(config_path=\"configs\", config_name=\"eval_config.yml\")\ndef my_app(cfg: DictConfig) -> None:\n    pytorch_data_dir = cfg.pytorch_data_dir\n    result_dir = \"../results/predictions/{}\".format(cfg.experiment_name)\n    os.makedirs(join(result_dir, \"img\"), exist_ok=True)\n    os.makedirs(join(result_dir, \"label\"), exist_ok=True)\n    os.makedirs(join(result_dir, \"cluster\"), exist_ok=True)\n    os.makedirs(join(result_dir, \"picie\"), exist_ok=True)\n\n    for model_path in cfg.model_paths:\n        model = LitUnsupervisedSegmenter.load_from_checkpoint(model_path)\n        print(OmegaConf.to_yaml(model.cfg))\n\n    loader_crop = \"center\"\n    test_dataset = ContrastiveDepthDataset(\n        pytorch_data_dir=pytorch_data_dir,\n        dataset_name=cfg.experiment_name,\n        crop_type=None,\n        image_set=\"val\",\n        transform=get_transform(cfg.res, False, loader_crop),\n        target_transform=get_transform(cfg.res, True, loader_crop),\n        cfg=model.cfg,\n    )\n\n    loader = DataLoader(test_dataset, cfg.batch_size,\n                        shuffle=False, num_workers=cfg.num_workers,\n                        pin_memory=True, collate_fn=flexible_collate)\n\n    model.eval().cuda()\n    if cfg.use_ddp:\n        par_model = torch.nn.DataParallel(model.net)\n    else:\n        par_model = model.net\n\n    IoU_dict = {}\n    for className in cfg.InstanceClasses:\n        IoU_dict[className] = [0, 0]  # [IoUSum, IoUInstances]\n\n    with Pool(cfg.num_workers + 5) as pool:\n        for i, batch in enumerate(tqdm(loader)):\n            with torch.no_grad():\n                img = batch[\"img\"].cuda()\n                label = batch[\"label\"].cuda()\n                polygons = batch[\"polygons\"]\n                depth = batch[\"depth\"]\n\n                feats, code1 = par_model(img)\n                feats, code2 = par_model(img.flip(dims=[3]))\n                code = (code1 + code2.flip(dims=[3])) / 2\n\n                code = F.interpolate(code, img.shape[-2:], mode='bilinear', align_corners=False)\n\n                linear_probs = torch.log_softmax(model.linear_probe(code), dim=1).cpu()\n                cluster_probs = model.cluster_probe(code, 2, log_probs=True).cpu()\n\n                linear_crf = batched_crf(pool, img, linear_probs).argmax(1).cuda()\n                cluster_crf = batched_crf(pool, img, cluster_probs).argmax(1).cuda()\n\n                model.test_cluster_metrics.update(cluster_crf, label)\n\n                tb_metrics = {\n                    **model.test_linear_metrics.compute(),\n                    **model.test_cluster_metrics.compute(),\n                }\n\n                plotted = model.label_cmap[model.test_cluster_metrics.map_clusters(cluster_crf.cpu())].astype(np.uint8)\n\n                Semantic2BinMasks = Seg2BinMask.getMasks(plotted[0], cfg.InstanceClasses)\n                InstanceMasks = Json2BinMask.getBinaryMasks(polygons, cfg.InstanceClasses)\n\n                for className in cfg.InstanceClasses:\n                    semanticMask = Semantic2BinMasks.get(className)\n                    instances = InstanceMasks[className]\n                    for ins in instances:\n                        IoU = Json2BinMask.iou(ins, semanticMask)\n                        IoU_dict[className][0] += IoU\n                        IoU_dict[className][1] += 1\n    f = open(\"../results/predictions/IoU.txt\", \"a\")\n    for className in cfg.InstanceClasses:\n        f.write(className + \"// IoU_sum: \" + str(IoU_dict[className][0]) + \"   \" + \"IoU_instance_count: \" + str(\n            IoU_dict[className][1]) + \"\\n\")\n    f.close()\n\n\ndef get_trans(res, is_label, crop_type):\n    if crop_type == \"center\":\n        cropper = T.CenterCrop(res)\n    elif crop_type == \"random\":\n        cropper = T.RandomCrop(res)\n    elif crop_type is None:\n        cropper = T.Lambda(lambda x: x)\n        res = (res, res)\n    else:\n        raise ValueError(\"Unknown Cropper {}\".format(crop_type))\n    if is_label:\n        return T.Compose([T.Resize(res, Image.NEAREST),\n                          cropper])\n    else:\n        return T.Compose([T.Resize(res, Image.NEAREST),\n                          cropper])\n\n\nif __name__ == \"__main__\":\n    prep_args()\n    my_app()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Instance_segmentation_depth.py b/src/Instance_segmentation_depth.py
--- a/src/Instance_segmentation_depth.py	(revision c6be305e586f39b07663cb9bdb535828fe4047df)
+++ b/src/Instance_segmentation_depth.py	(date 1717584581525)
@@ -4,6 +4,11 @@
 
 
 from multiprocessing import Pool
+
+import numpy as np
+from torch import T
+from torch.distributed.pipeline.sync.dependency import join
+
 from depth_dataset import ContrastiveDepthDataset
 from eval_segmentation import batched_crf
 from modules import *
@@ -14,6 +19,7 @@
 from omegaconf import DictConfig, OmegaConf
 from torch.utils.data import DataLoader, Dataset
 import json_to_binary_mask as Json2BinMask
+from src.utils import get_transform, flexible_collate, prep_args
 from train_segmentation import LitUnsupervisedSegmenter
 from tqdm import tqdm
 import random
Index: src/utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import collections\nimport os\nfrom os.path import join\nimport io\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport torch.multiprocessing\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport wget\nfrom PIL import Image\nfrom scipy.optimize import linear_sum_assignment\nfrom torch._six import string_classes\nfrom torch.utils.data import DataLoader\nfrom torch.utils.data._utils.collate import np_str_obj_array_pattern, default_collate_err_msg_format\nfrom torchmetrics import Metric\nfrom torchvision import models\nfrom torchvision import transforms as T\nfrom torch.utils.tensorboard.summary import hparams\n\n\ndef prep_for_plot(img, rescale=True, resize=None):\n    if resize is not None:\n        img = F.interpolate(img.unsqueeze(0), resize, mode=\"bilinear\")\n    else:\n        img = img.unsqueeze(0)\n\n    plot_img = unnorm(img).squeeze(0).cpu().permute(1, 2, 0)\n    if rescale:\n        plot_img = (plot_img - plot_img.min()) / (plot_img.max() - plot_img.min())\n    return plot_img\n\n\ndef add_plot(writer, name, step):\n    buf = io.BytesIO()\n    plt.savefig(buf, format='jpeg', dpi=100)\n    buf.seek(0)\n    image = Image.open(buf)\n    image = T.ToTensor()(image)\n    writer.add_image(name, image, step)\n    plt.clf()\n    plt.close()\n\n\n@torch.jit.script\ndef shuffle(x):\n    return x[torch.randperm(x.shape[0])]\n\n\ndef add_hparams_fixed(writer, hparam_dict, metric_dict, global_step):\n    exp, ssi, sei = hparams(hparam_dict, metric_dict)\n    writer.file_writer.add_summary(exp)\n    writer.file_writer.add_summary(ssi)\n    writer.file_writer.add_summary(sei)\n    for k, v in metric_dict.items():\n        writer.add_scalar(k, v, global_step)\n\n\n@torch.jit.script\ndef resize(classes: torch.Tensor, size: int):\n    return F.interpolate(classes, (size, size), mode=\"bilinear\", align_corners=False)\n\n\ndef one_hot_feats(labels, n_classes):\n    return F.one_hot(labels, n_classes).permute(0, 3, 1, 2).to(torch.float32)\n\n\ndef load_model(model_type, data_dir):\n    if model_type == \"robust_resnet50\":\n        model = models.resnet50(pretrained=False)\n        model_file = join(data_dir, 'imagenet_l2_3_0.pt')\n        if not os.path.exists(model_file):\n            wget.download(\"http://6.869.csail.mit.edu/fa19/psets19/pset6/imagenet_l2_3_0.pt\",\n                          model_file)\n        model_weights = torch.load(model_file)\n        model_weights_modified = {name.split('model.')[1]: value for name, value in model_weights['model'].items() if\n                                  'model' in name}\n        model.load_state_dict(model_weights_modified)\n        model = nn.Sequential(*list(model.children())[:-1])\n    elif model_type == \"densecl\":\n        model = models.resnet50(pretrained=False)\n        model_file = join(data_dir, 'densecl_r50_coco_1600ep.pth')\n        if not os.path.exists(model_file):\n            wget.download(\"https://cloudstor.aarnet.edu.au/plus/s/3GapXiWuVAzdKwJ/download\",\n                          model_file)\n        model_weights = torch.load(model_file)\n        # model_weights_modified = {name.split('model.')[1]: value for name, value in model_weights['model'].items() if\n        #                          'model' in name}\n        model.load_state_dict(model_weights['state_dict'], strict=False)\n        model = nn.Sequential(*list(model.children())[:-1])\n    elif model_type == \"resnet50\":\n        model = models.resnet50(pretrained=True)\n        model = nn.Sequential(*list(model.children())[:-1])\n    elif model_type == \"mocov2\":\n        model = models.resnet50(pretrained=False)\n        model_file = join(data_dir, 'moco_v2_800ep_pretrain.pth.tar')\n        if not os.path.exists(model_file):\n            wget.download(\"https://dl.fbaipublicfiles.com/moco/moco_checkpoints/\"\n                          \"moco_v2_800ep/moco_v2_800ep_pretrain.pth.tar\", model_file)\n        checkpoint = torch.load(model_file)\n        # rename moco pre-trained keys\n        state_dict = checkpoint['state_dict']\n        for k in list(state_dict.keys()):\n            # retain only encoder_q up to before the embedding layer\n            if k.startswith('module.encoder_q') and not k.startswith('module.encoder_q.fc'):\n                # remove prefix\n                state_dict[k[len(\"module.encoder_q.\"):]] = state_dict[k]\n            # delete renamed or unused k\n            del state_dict[k]\n        msg = model.load_state_dict(state_dict, strict=False)\n        assert set(msg.missing_keys) == {\"fc.weight\", \"fc.bias\"}\n        model = nn.Sequential(*list(model.children())[:-1])\n    elif model_type == \"densenet121\":\n        model = models.densenet121(pretrained=True)\n        model = nn.Sequential(*list(model.children())[:-1] + [nn.AdaptiveAvgPool2d((1, 1))])\n    elif model_type == \"vgg11\":\n        model = models.vgg11(pretrained=True)\n        model = nn.Sequential(*list(model.children())[:-1] + [nn.AdaptiveAvgPool2d((1, 1))])\n    else:\n        raise ValueError(\"No model: {} found\".format(model_type))\n\n    model.eval()\n    model.cuda()\n    return model\n\n\nclass UnNormalize(object):\n    def __init__(self, mean, std):\n        self.mean = mean\n        self.std = std\n\n    def __call__(self, image):\n        image2 = torch.clone(image)\n        for t, m, s in zip(image2, self.mean, self.std):\n            t.mul_(s).add_(m)\n        return image2\n\n\nnormalize = T.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\nunnorm = UnNormalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n\n\nclass ToTargetTensor(object):\n    def __call__(self, target):\n        return torch.as_tensor(np.array(target), dtype=torch.int64).unsqueeze(0)\n\n\ndef prep_args():\n    import sys\n\n    old_args = sys.argv\n    new_args = [old_args.pop(0)]\n    while len(old_args) > 0:\n        arg = old_args.pop(0)\n        if len(arg.split(\"=\")) == 2:\n            new_args.append(arg)\n        elif arg.startswith(\"--\"):\n            new_args.append(arg[2:] + \"=\" + old_args.pop(0))\n        else:\n            raise ValueError(\"Unexpected arg style {}\".format(arg))\n    sys.argv = new_args\n\n\ndef get_transform(res, is_label, crop_type):\n    if crop_type == \"center\":\n        cropper = T.CenterCrop(res)\n    elif crop_type == \"random\":\n        cropper = T.RandomCrop(res)\n    elif crop_type is None:\n        cropper = T.Lambda(lambda x: x)\n        res = (res, res)\n    else:\n        raise ValueError(\"Unknown Cropper {}\".format(crop_type))\n    if is_label:\n        return T.Compose([T.Resize(res, Image.NEAREST),\n                          cropper,\n                          ToTargetTensor()])\n    else:\n        return T.Compose([T.Resize(res, Image.NEAREST),\n                          cropper,\n                          T.ToTensor(),\n                          normalize])\n\n\ndef _remove_axes(ax):\n    ax.xaxis.set_major_formatter(plt.NullFormatter())\n    ax.yaxis.set_major_formatter(plt.NullFormatter())\n    ax.set_xticks([])\n    ax.set_yticks([])\n\n\ndef remove_axes(axes):\n    if len(axes.shape) == 2:\n        for ax1 in axes:\n            for ax in ax1:\n                _remove_axes(ax)\n    else:\n        for ax in axes:\n            _remove_axes(ax)\n\n\nclass UnsupervisedMetrics(Metric):\n    def __init__(self, prefix: str, n_classes: int, extra_clusters: int, compute_hungarian: bool,\n                 dist_sync_on_step=True):\n        # call `self.add_state`for every internal state that is needed for the metrics computations\n        # dist_reduce_fx indicates the function that should be used to reduce\n        # state from multiple processes\n        super().__init__(dist_sync_on_step=dist_sync_on_step)\n\n        self.n_classes = n_classes\n        self.extra_clusters = extra_clusters\n        self.compute_hungarian = compute_hungarian\n        self.prefix = prefix\n        self.add_state(\"stats\",\n                       default=torch.zeros(n_classes + self.extra_clusters, n_classes, dtype=torch.int64),\n                       dist_reduce_fx=\"sum\")\n\n    def update(self, preds: torch.Tensor, target: torch.Tensor):\n        with torch.no_grad():\n            actual = target.reshape(-1)\n            preds = preds.reshape(-1)\n            mask = (actual >= 0) & (actual < self.n_classes) & (preds >= 0) & (preds < self.n_classes)\n            actual = actual[mask]\n            preds = preds[mask]\n            self.stats += torch.bincount(\n                (self.n_classes + self.extra_clusters) * actual + preds,\n                minlength=self.n_classes * (self.n_classes + self.extra_clusters)) \\\n                .reshape(self.n_classes, self.n_classes + self.extra_clusters).t().to(self.stats.device)\n\n    def map_clusters(self, clusters):\n        if self.extra_clusters == 0:\n            return torch.tensor(self.assignments[1])[clusters]\n        else:\n            missing = sorted(list(set(range(self.n_classes + self.extra_clusters)) - set(self.assignments[0])))\n            cluster_to_class = self.assignments[1]\n            for missing_entry in missing:\n                if missing_entry == cluster_to_class.shape[0]:\n                    cluster_to_class = np.append(cluster_to_class, -1)\n                else:\n                    cluster_to_class = np.insert(cluster_to_class, missing_entry + 1, -1)\n            cluster_to_class = torch.tensor(cluster_to_class)\n            return cluster_to_class[clusters]\n\n    def compute(self):\n        if self.compute_hungarian:\n            self.assignments = linear_sum_assignment(self.stats.detach().cpu(), maximize=True)\n            if self.extra_clusters == 0:\n                self.histogram = self.stats[np.argsort(self.assignments[1]), :]\n            if self.extra_clusters > 0:\n                self.assignments_t = linear_sum_assignment(self.stats.detach().cpu().t(), maximize=True)\n                histogram = self.stats[self.assignments_t[1], :]\n                missing = list(set(range(self.n_classes + self.extra_clusters)) - set(self.assignments[0]))\n                new_row = self.stats[missing, :].sum(0, keepdim=True)\n                histogram = torch.cat([histogram, new_row], axis=0)\n                new_col = torch.zeros(self.n_classes + 1, 1, device=histogram.device)\n                self.histogram = torch.cat([histogram, new_col], axis=1)\n        else:\n            self.assignments = (torch.arange(self.n_classes).unsqueeze(1),\n                                torch.arange(self.n_classes).unsqueeze(1))\n            self.histogram = self.stats\n\n        tp = torch.diag(self.histogram)\n        fp = torch.sum(self.histogram, dim=0) - tp\n        fn = torch.sum(self.histogram, dim=1) - tp\n\n        iou = tp / (tp + fp + fn)\n        prc = tp / (tp + fn)\n        opc = torch.sum(tp) / torch.sum(self.histogram)\n\n        metric_dict = {self.prefix + \"mIoU\": iou[~torch.isnan(iou)].mean().item(),\n                       self.prefix + \"Accuracy\": opc.item()}\n        return {k: 100 * v for k, v in metric_dict.items()}\n\n\ndef flexible_collate(batch):\n    r\"\"\"Puts each data field into a tensor with outer dimension batch size\"\"\"\n\n    elem = batch[0]\n    elem_type = type(elem)\n    if isinstance(elem, torch.Tensor):\n        out = None\n        if torch.utils.data.get_worker_info() is not None:\n            # If we're in a background process, concatenate directly into a\n            # shared memory tensor to avoid an extra copy\n            numel = sum([x.numel() for x in batch])\n            storage = elem.storage()._new_shared(numel)\n            out = elem.new(storage)\n        try:\n            return torch.stack(batch, 0, out=out)\n        except RuntimeError:\n            return batch\n    elif elem_type.__module__ == 'numpy' and elem_type.__name__ != 'str_' \\\n            and elem_type.__name__ != 'string_':\n        if elem_type.__name__ == 'ndarray' or elem_type.__name__ == 'memmap':\n            # array of string classes and object\n            if np_str_obj_array_pattern.search(elem.dtype.str) is not None:\n                raise TypeError(default_collate_err_msg_format.format(elem.dtype))\n\n            return flexible_collate([torch.as_tensor(b) for b in batch])\n        elif elem.shape == ():  # scalars\n            return torch.as_tensor(batch)\n    elif isinstance(elem, float):\n        return torch.tensor(batch, dtype=torch.float64)\n    elif isinstance(elem, int):\n        return torch.tensor(batch)\n    elif isinstance(elem, string_classes):\n        return batch\n    elif isinstance(elem, collections.abc.Mapping):\n        return {key: flexible_collate([d[key] for d in batch]) for key in elem}\n    elif isinstance(elem, tuple) and hasattr(elem, '_fields'):  # namedtuple\n        return elem_type(*(flexible_collate(samples) for samples in zip(*batch)))\n    elif isinstance(elem, collections.abc.Sequence):\n        # check to make sure that the elements in batch have consistent size\n        it = iter(batch)\n        elem_size = len(next(it))\n        if not all(len(elem) == elem_size for elem in it):\n            raise RuntimeError('each element in list of batch should be of equal size')\n        transposed = zip(*batch)\n        return [flexible_collate(samples) for samples in transposed]\n\n    raise TypeError(default_collate_err_msg_format.format(elem_type))\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/utils.py b/src/utils.py
--- a/src/utils.py	(revision c6be305e586f39b07663cb9bdb535828fe4047df)
+++ b/src/utils.py	(date 1717747028694)
@@ -2,7 +2,6 @@
 import os
 from os.path import join
 import io
-
 import matplotlib.pyplot as plt
 import numpy as np
 import torch.multiprocessing
@@ -11,7 +10,7 @@
 import wget
 from PIL import Image
 from scipy.optimize import linear_sum_assignment
-from torch._six import string_classes
+#from torch._six import string_classes
 from torch.utils.data import DataLoader
 from torch.utils.data._utils.collate import np_str_obj_array_pattern, default_collate_err_msg_format
 from torchmetrics import Metric
@@ -304,7 +303,7 @@
         return torch.tensor(batch, dtype=torch.float64)
     elif isinstance(elem, int):
         return torch.tensor(batch)
-    elif isinstance(elem, string_classes):
+    elif isinstance(elem, torch._six.string_classes):
         return batch
     elif isinstance(elem, collections.abc.Mapping):
         return {key: flexible_collate([d[key] for d in batch]) for key in elem}
Index: src/train_segmentation.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from utils import *\nfrom modules import *\nfrom data import *\nfrom torch.utils.data import DataLoader\nimport torch.nn.functional as F\nfrom datetime import datetime\nimport hydra\nfrom omegaconf import DictConfig, OmegaConf\nimport pytorch_lightning as pl\nfrom pytorch_lightning import Trainer\nfrom pytorch_lightning.loggers import TensorBoardLogger\nfrom pytorch_lightning.utilities.seed import seed_everything\nimport torch.multiprocessing\nimport seaborn as sns\nfrom pytorch_lightning.callbacks import ModelCheckpoint\nimport sys\n\ntorch.multiprocessing.set_sharing_strategy('file_system')\n\ndef get_class_labels(dataset_name):\n    if dataset_name.startswith(\"cityscapes\"):\n        return [\n            'road', 'sidewalk', 'parking', 'rail track', 'building',\n            'wall', 'fence', 'guard rail', 'bridge', 'tunnel',\n            'pole', 'polegroup', 'traffic light', 'traffic sign', 'vegetation',\n            'terrain', 'sky', 'person', 'rider', 'car',\n            'truck', 'bus', 'caravan', 'trailer', 'train',\n            'motorcycle', 'bicycle']\n    elif dataset_name == \"cocostuff27\":\n        return [\n            \"electronic\", \"appliance\", \"food\", \"furniture\", \"indoor\",\n            \"kitchen\", \"accessory\", \"animal\", \"outdoor\", \"person\",\n            \"sports\", \"vehicle\", \"ceiling\", \"floor\", \"food\",\n            \"furniture\", \"rawmaterial\", \"textile\", \"wall\", \"window\",\n            \"building\", \"ground\", \"plant\", \"sky\", \"solid\",\n            \"structural\", \"water\"]\n    elif dataset_name == \"voc\":\n        return [\n            'background',\n            'aeroplane', 'bicycle', 'bird', 'boat', 'bottle',\n            'bus', 'car', 'cat', 'chair', 'cow',\n            'diningtable', 'dog', 'horse', 'motorbike', 'person',\n            'pottedplant', 'sheep', 'sofa', 'train', 'tvmonitor']\n    elif dataset_name == \"potsdam\":\n        return [\n            'roads and cars',\n            'buildings and clutter',\n            'trees and vegetation']\n    else:\n        raise ValueError(\"Unknown Dataset {}\".format(dataset_name))\n\n\nclass LitUnsupervisedSegmenter(pl.LightningModule):\n    def __init__(self, n_classes, cfg):\n        super().__init__()\n        self.cfg = cfg\n        self.n_classes = n_classes\n\n        if not cfg.continuous:\n            dim = n_classes\n        else:\n            dim = cfg.dim\n\n        data_dir = join(cfg.output_root, \"data\")\n        if cfg.arch == \"feature-pyramid\":\n            cut_model = load_model(cfg.model_type, data_dir).cuda()\n            self.net = FeaturePyramidNet(cfg.granularity, cut_model, dim, cfg.continuous)\n        elif cfg.arch == \"dino\":\n            self.net = DinoFeaturizer(dim, cfg)\n        else:\n            raise ValueError(\"Unknown arch {}\".format(cfg.arch))\n\n        self.train_cluster_probe = ClusterLookup(dim, n_classes)\n\n        self.cluster_probe = ClusterLookup(dim, n_classes + cfg.extra_clusters)\n        self.linear_probe = nn.Conv2d(dim, n_classes, (1, 1))\n\n        self.decoder = nn.Conv2d(dim, self.net.n_feats, (1, 1))\n\n        self.cluster_metrics = UnsupervisedMetrics(\n            \"test/cluster/\", n_classes, cfg.extra_clusters, True)\n        self.linear_metrics = UnsupervisedMetrics(\n            \"test/linear/\", n_classes, 0, False)\n\n        self.test_cluster_metrics = UnsupervisedMetrics(\n            \"final/cluster/\", n_classes, cfg.extra_clusters, True)\n        self.test_linear_metrics = UnsupervisedMetrics(\n            \"final/linear/\", n_classes, 0, False)\n\n        self.linear_probe_loss_fn = torch.nn.CrossEntropyLoss()\n        self.crf_loss_fn = ContrastiveCRFLoss(\n            cfg.crf_samples, cfg.alpha, cfg.beta, cfg.gamma, cfg.w1, cfg.w2, cfg.shift)\n\n        self.contrastive_corr_loss_fn = ContrastiveCorrelationLoss(cfg)\n        for p in self.contrastive_corr_loss_fn.parameters():\n            p.requires_grad = False\n\n        self.automatic_optimization = False\n\n        if self.cfg.dataset_name.startswith(\"cityscapes\"):\n            self.label_cmap = create_cityscapes_colormap()\n        else:\n            self.label_cmap = create_pascal_label_colormap()\n\n        self.val_steps = 0\n        self.save_hyperparameters()\n\n    def forward(self, x):\n        # in lightning, forward defines the prediction/inference actions\n        return self.net(x)[1]\n\n    def training_step(self, batch, batch_idx):\n        # training_step defined the train loop.\n        # It is independent of forward\n        net_optim, linear_probe_optim, cluster_probe_optim = self.optimizers()\n\n        net_optim.zero_grad()\n        linear_probe_optim.zero_grad()\n        cluster_probe_optim.zero_grad()\n\n        with torch.no_grad():\n            ind = batch[\"ind\"]\n            img = batch[\"img\"]\n            img_aug = batch[\"img_aug\"]\n            coord_aug = batch[\"coord_aug\"]\n            img_pos = batch[\"img_pos\"]\n            label = batch[\"label\"]\n            label_pos = batch[\"label_pos\"]\n\n        feats, code = self.net(img)\n        if self.cfg.correspondence_weight > 0:\n            feats_pos, code_pos = self.net(img_pos)\n        log_args = dict(sync_dist=False, rank_zero_only=True)\n\n        if self.cfg.use_true_labels:\n            signal = one_hot_feats(label + 1, self.n_classes + 1)\n            signal_pos = one_hot_feats(label_pos + 1, self.n_classes + 1)\n        else:\n            signal = feats\n            signal_pos = feats_pos\n\n        loss = 0\n\n        should_log_hist = (self.cfg.hist_freq is not None) and \\\n                          (self.global_step % self.cfg.hist_freq == 0) and \\\n                          (self.global_step > 0)\n        if self.cfg.use_salience:\n            salience = batch[\"mask\"].to(torch.float32).squeeze(1)\n            salience_pos = batch[\"mask_pos\"].to(torch.float32).squeeze(1)\n        else:\n            salience = None\n            salience_pos = None\n\n        if self.cfg.correspondence_weight > 0:\n            (\n                pos_intra_loss, pos_intra_cd,\n                pos_inter_loss, pos_inter_cd,\n                neg_inter_loss, neg_inter_cd,\n            ) = self.contrastive_corr_loss_fn(\n                signal, signal_pos,\n                salience, salience_pos,\n                code, code_pos,\n            )\n\n            if should_log_hist:\n                self.logger.experiment.add_histogram(\"intra_cd\", pos_intra_cd, self.global_step)\n                self.logger.experiment.add_histogram(\"inter_cd\", pos_inter_cd, self.global_step)\n                self.logger.experiment.add_histogram(\"neg_cd\", neg_inter_cd, self.global_step)\n            neg_inter_loss = neg_inter_loss.mean()\n            pos_intra_loss = pos_intra_loss.mean()\n            pos_inter_loss = pos_inter_loss.mean()\n            self.log('loss/pos_intra', pos_intra_loss, **log_args)\n            self.log('loss/pos_inter', pos_inter_loss, **log_args)\n            self.log('loss/neg_inter', neg_inter_loss, **log_args)\n            self.log('cd/pos_intra', pos_intra_cd.mean(), **log_args)\n            self.log('cd/pos_inter', pos_inter_cd.mean(), **log_args)\n            self.log('cd/neg_inter', neg_inter_cd.mean(), **log_args)\n\n            loss += (self.cfg.pos_inter_weight * pos_inter_loss +\n                     self.cfg.pos_intra_weight * pos_intra_loss +\n                     self.cfg.neg_inter_weight * neg_inter_loss) * self.cfg.correspondence_weight\n\n        if self.cfg.rec_weight > 0:\n            rec_feats = self.decoder(code)\n            rec_loss = -(norm(rec_feats) * norm(feats)).sum(1).mean()\n            self.log('loss/rec', rec_loss, **log_args)\n            loss += self.cfg.rec_weight * rec_loss\n\n        if self.cfg.aug_alignment_weight > 0:\n            orig_feats_aug, orig_code_aug = self.net(img_aug)\n            downsampled_coord_aug = resize(\n                coord_aug.permute(0, 3, 1, 2),\n                orig_code_aug.shape[2]).permute(0, 2, 3, 1)\n            aug_alignment = -torch.einsum(\n                \"bkhw,bkhw->bhw\",\n                norm(sample(code, downsampled_coord_aug)),\n                norm(orig_code_aug)\n            ).mean()\n            self.log('loss/aug_alignment', aug_alignment, **log_args)\n            loss += self.cfg.aug_alignment_weight * aug_alignment\n\n        if self.cfg.crf_weight > 0:\n            crf = self.crf_loss_fn(\n                resize(img, 56),\n                norm(resize(code, 56))\n            ).mean()\n            self.log('loss/crf', crf, **log_args)\n            loss += self.cfg.crf_weight * crf\n\n        flat_label = label.reshape(-1)\n        mask = (flat_label >= 0) & (flat_label < self.n_classes)\n\n        detached_code = torch.clone(code.detach())\n\n        linear_logits = self.linear_probe(detached_code)\n        linear_logits = F.interpolate(linear_logits, label.shape[-2:], mode='bilinear', align_corners=False)\n        linear_logits = linear_logits.permute(0, 2, 3, 1).reshape(-1, self.n_classes)\n        linear_loss = self.linear_probe_loss_fn(linear_logits[mask], flat_label[mask]).mean()\n        loss += linear_loss\n        self.log('loss/linear', linear_loss, **log_args)\n\n        cluster_loss, cluster_probs = self.cluster_probe(detached_code, None)\n        loss += cluster_loss\n        self.log('loss/cluster', cluster_loss, **log_args)\n        self.log('loss/total', loss, **log_args)\n\n        self.manual_backward(loss)\n        net_optim.step()\n        cluster_probe_optim.step()\n        linear_probe_optim.step()\n\n        if self.cfg.reset_probe_steps is not None and self.global_step == self.cfg.reset_probe_steps:\n            print(\"RESETTING PROBES\")\n            self.linear_probe.reset_parameters()\n            self.cluster_probe.reset_parameters()\n            self.trainer.optimizers[1] = torch.optim.Adam(list(self.linear_probe.parameters()), lr=5e-3)\n            self.trainer.optimizers[2] = torch.optim.Adam(list(self.cluster_probe.parameters()), lr=5e-3)\n\n        if self.global_step % 2000 == 0 and self.global_step > 0:\n            print(\"RESETTING TFEVENT FILE\")\n            # Make a new tfevent file\n            self.logger.experiment.close()\n            self.logger.experiment._get_file_writer()\n\n        return loss\n\n    def on_train_start(self):\n        tb_metrics = {\n            **self.linear_metrics.compute(),\n            **self.cluster_metrics.compute()\n        }\n        self.logger.log_hyperparams(self.cfg, tb_metrics)\n\n    def validation_step(self, batch, batch_idx):\n        img = batch[\"img\"]\n        label = batch[\"label\"]\n        self.net.eval()\n\n        with torch.no_grad():\n            feats, code = self.net(img)\n            code = F.interpolate(code, label.shape[-2:], mode='bilinear', align_corners=False)\n\n            linear_preds = self.linear_probe(code)\n            linear_preds = linear_preds.argmax(1)\n            self.linear_metrics.update(linear_preds, label)\n\n            cluster_loss, cluster_preds = self.cluster_probe(code, None)\n            cluster_preds = cluster_preds.argmax(1)\n            self.cluster_metrics.update(cluster_preds, label)\n\n            return {\n                'img': img[:self.cfg.n_images].detach().cpu(),\n                'linear_preds': linear_preds[:self.cfg.n_images].detach().cpu(),\n                \"cluster_preds\": cluster_preds[:self.cfg.n_images].detach().cpu(),\n                \"label\": label[:self.cfg.n_images].detach().cpu()}\n\n    def validation_epoch_end(self, outputs) -> None:\n        super().validation_epoch_end(outputs)\n        with torch.no_grad():\n            tb_metrics = {\n                **self.linear_metrics.compute(),\n                **self.cluster_metrics.compute(),\n            }\n\n            if self.trainer.is_global_zero and not self.cfg.submitting_to_aml:\n                #output_num = 0\n                output_num = random.randint(0, len(outputs) -1)\n                output = {k: v.detach().cpu() for k, v in outputs[output_num].items()}\n\n                fig, ax = plt.subplots(4, self.cfg.n_images, figsize=(self.cfg.n_images * 3, 4 * 3))\n                for i in range(self.cfg.n_images):\n                    ax[0, i].imshow(prep_for_plot(output[\"img\"][i]))\n                    ax[1, i].imshow(self.label_cmap[output[\"label\"][i]])\n                    ax[2, i].imshow(self.label_cmap[output[\"linear_preds\"][i]])\n                    ax[3, i].imshow(self.label_cmap[self.cluster_metrics.map_clusters(output[\"cluster_preds\"][i])])\n                ax[0, 0].set_ylabel(\"Image\", fontsize=16)\n                ax[1, 0].set_ylabel(\"Label\", fontsize=16)\n                ax[2, 0].set_ylabel(\"Linear Probe\", fontsize=16)\n                ax[3, 0].set_ylabel(\"Cluster Probe\", fontsize=16)\n                remove_axes(ax)\n                plt.tight_layout()\n                add_plot(self.logger.experiment, \"plot_labels\", self.global_step)\n\n                if self.cfg.has_labels:\n                    fig = plt.figure(figsize=(13, 10))\n                    ax = fig.gca()\n                    hist = self.cluster_metrics.histogram.detach().cpu().to(torch.float32)\n                    hist /= torch.clamp_min(hist.sum(dim=0, keepdim=True), 1)\n                    sns.heatmap(hist.t(), annot=False, fmt='g', ax=ax, cmap=\"Blues\")\n                    ax.set_xlabel('Predicted labels')\n                    ax.set_ylabel('True labels')\n                    names = get_class_labels(self.cfg.dataset_name)\n                    if self.cfg.extra_clusters:\n                        names = names + [\"Extra\"]\n                    ax.set_xticks(np.arange(0, len(names)) + .5)\n                    ax.set_yticks(np.arange(0, len(names)) + .5)\n                    ax.xaxis.tick_top()\n                    ax.xaxis.set_ticklabels(names, fontsize=14)\n                    ax.yaxis.set_ticklabels(names, fontsize=14)\n                    colors = [self.label_cmap[i] / 255.0 for i in range(len(names))]\n                    [t.set_color(colors[i]) for i, t in enumerate(ax.xaxis.get_ticklabels())]\n                    [t.set_color(colors[i]) for i, t in enumerate(ax.yaxis.get_ticklabels())]\n                    # ax.yaxis.get_ticklabels()[-1].set_color(self.label_cmap[0] / 255.0)\n                    # ax.xaxis.get_ticklabels()[-1].set_color(self.label_cmap[0] / 255.0)\n                    plt.xticks(rotation=90)\n                    plt.yticks(rotation=0)\n                    ax.vlines(np.arange(0, len(names) + 1), color=[.5, .5, .5], *ax.get_xlim())\n                    ax.hlines(np.arange(0, len(names) + 1), color=[.5, .5, .5], *ax.get_ylim())\n                    plt.tight_layout()\n                    add_plot(self.logger.experiment, \"conf_matrix\", self.global_step)\n\n                    all_bars = torch.cat([\n                        self.cluster_metrics.histogram.sum(0).cpu(),\n                        self.cluster_metrics.histogram.sum(1).cpu()\n                    ], axis=0)\n                    ymin = max(all_bars.min() * .8, 1)\n                    ymax = all_bars.max() * 1.2\n\n                    fig, ax = plt.subplots(1, 2, figsize=(2 * 5, 1 * 4))\n                    ax[0].bar(range(self.n_classes + self.cfg.extra_clusters),\n                              self.cluster_metrics.histogram.sum(0).cpu(),\n                              tick_label=names,\n                              color=colors)\n                    ax[0].set_ylim(ymin, ymax)\n                    ax[0].set_title(\"Label Frequency\")\n                    ax[0].set_yscale('log')\n                    ax[0].tick_params(axis='x', labelrotation=90)\n\n                    ax[1].bar(range(self.n_classes + self.cfg.extra_clusters),\n                              self.cluster_metrics.histogram.sum(1).cpu(),\n                              tick_label=names,\n                              color=colors)\n                    ax[1].set_ylim(ymin, ymax)\n                    ax[1].set_title(\"Cluster Frequency\")\n                    ax[1].set_yscale('log')\n                    ax[1].tick_params(axis='x', labelrotation=90)\n\n                    plt.tight_layout()\n                    add_plot(self.logger.experiment, \"label frequency\", self.global_step)\n\n            if self.global_step > 2:\n                self.log_dict(tb_metrics)\n\n                if self.trainer.is_global_zero and self.cfg.azureml_logging:\n                    from azureml.core.run import Run\n                    run_logger = Run.get_context()\n                    for metric, value in tb_metrics.items():\n                        run_logger.log(metric, value)\n\n            self.linear_metrics.reset()\n            self.cluster_metrics.reset()\n\n    def configure_optimizers(self):\n        main_params = list(self.net.parameters())\n\n        if self.cfg.rec_weight > 0:\n            main_params.extend(self.decoder.parameters())\n\n        net_optim = torch.optim.Adam(main_params, lr=self.cfg.lr)\n        linear_probe_optim = torch.optim.Adam(list(self.linear_probe.parameters()), lr=5e-3)\n        cluster_probe_optim = torch.optim.Adam(list(self.cluster_probe.parameters()), lr=5e-3)\n\n        return net_optim, linear_probe_optim, cluster_probe_optim\n\n\n@hydra.main(config_path=\"configs\", config_name=\"train_config.yml\")\ndef my_app(cfg: DictConfig) -> None:\n    OmegaConf.set_struct(cfg, False)\n    print(OmegaConf.to_yaml(cfg))\n    pytorch_data_dir = cfg.pytorch_data_dir\n    data_dir = join(cfg.output_root, \"data\")\n    log_dir = join(cfg.output_root, \"logs\")\n    checkpoint_dir = join(cfg.output_root, \"checkpoints\")\n\n    prefix = \"{}/{}_{}\".format(cfg.log_dir, cfg.dataset_name, cfg.experiment_name)\n    name = '{}_date_{}'.format(prefix, datetime.now().strftime('%b%d_%H-%M-%S'))\n    cfg.full_name = prefix\n\n    os.makedirs(data_dir, exist_ok=True)\n    os.makedirs(log_dir, exist_ok=True)\n    os.makedirs(checkpoint_dir, exist_ok=True)\n\n    seed_everything(seed=0)\n\n    print(data_dir)\n    print(cfg.output_root)\n\n    geometric_transforms = T.Compose([\n        T.RandomHorizontalFlip(),\n        T.RandomResizedCrop(size=cfg.res, scale=(0.8, 1.0))\n    ])\n    photometric_transforms = T.Compose([\n        T.ColorJitter(brightness=.3, contrast=.3, saturation=.3, hue=.1),\n        T.RandomGrayscale(.2),\n        T.RandomApply([T.GaussianBlur((5, 5))])\n    ])\n\n    sys.stdout.flush()\n\n    train_dataset = ContrastiveSegDataset(\n        pytorch_data_dir=pytorch_data_dir,\n        dataset_name=cfg.dataset_name,\n        crop_type=cfg.crop_type,\n        image_set=\"train\",\n        transform=get_transform(cfg.res, False, cfg.loader_crop_type),\n        target_transform=get_transform(cfg.res, True, cfg.loader_crop_type),\n        cfg=cfg,\n        aug_geometric_transform=geometric_transforms,\n        aug_photometric_transform=photometric_transforms,\n        num_neighbors=cfg.num_neighbors,\n        mask=True,\n        pos_images=True,\n        pos_labels=True\n    )\n\n    if cfg.dataset_name == \"voc\":\n        val_loader_crop = None\n    else:\n        val_loader_crop = \"center\"\n\n    val_dataset = ContrastiveSegDataset(\n        pytorch_data_dir=pytorch_data_dir,\n        dataset_name=cfg.dataset_name,\n        crop_type=None,\n        image_set=\"val\",\n        transform=get_transform(320, False, val_loader_crop),\n        target_transform=get_transform(320, True, val_loader_crop),\n        mask=True,\n        cfg=cfg,\n    )\n\n    #val_dataset = MaterializedDataset(val_dataset)\n    train_loader = DataLoader(train_dataset, cfg.batch_size, shuffle=True, num_workers=cfg.num_workers, pin_memory=True)\n\n    if cfg.submitting_to_aml:\n        val_batch_size = 16\n    else:\n        val_batch_size = cfg.batch_size\n\n    val_loader = DataLoader(val_dataset, val_batch_size, shuffle=False, num_workers=cfg.num_workers, pin_memory=True)\n\n    model = LitUnsupervisedSegmenter(train_dataset.n_classes, cfg)\n\n    tb_logger = TensorBoardLogger(\n        join(log_dir, name),\n        default_hp_metric=False\n    )\n\n    if cfg.submitting_to_aml:\n        gpu_args = dict(gpus=1, val_check_interval=250)\n\n        if gpu_args[\"val_check_interval\"] > len(train_loader):\n            gpu_args.pop(\"val_check_interval\")\n\n    else:\n        gpu_args = dict(gpus=-1, accelerator='ddp', val_check_interval=cfg.val_freq)\n        # gpu_args = dict(gpus=1, accelerator='ddp', val_check_interval=cfg.val_freq)\n\n        if gpu_args[\"val_check_interval\"] > len(train_loader) // 4:\n            gpu_args.pop(\"val_check_interval\")\n\n    trainer = Trainer(\n        log_every_n_steps=cfg.scalar_log_freq,\n        logger=tb_logger,\n        max_steps=cfg.max_steps,\n        callbacks=[\n            ModelCheckpoint(\n                dirpath=join(checkpoint_dir, name),\n                every_n_train_steps=400,\n                save_top_k=2,\n                monitor=\"test/cluster/mIoU\",\n                mode=\"max\",\n            )\n        ],\n        **gpu_args\n    )\n    trainer.fit(model, train_loader, val_loader)\n\n\nif __name__ == \"__main__\":\n    prep_args()\n    my_app()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/train_segmentation.py b/src/train_segmentation.py
--- a/src/train_segmentation.py	(revision c6be305e586f39b07663cb9bdb535828fe4047df)
+++ b/src/train_segmentation.py	(date 1717746676819)
@@ -1,3 +1,4 @@
+from matplotlib import pyplot as plt
 from utils import *
 from modules import *
 from data import *
@@ -15,6 +16,9 @@
 from pytorch_lightning.callbacks import ModelCheckpoint
 import sys
 
+from src.utils import load_model, UnsupervisedMetrics, one_hot_feats, resize, prep_for_plot, remove_axes, add_plot, \
+    get_transform, prep_args
+
 torch.multiprocessing.set_sharing_strategy('file_system')
 
 def get_class_labels(dataset_name):
Index: src/crop_datasets.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from modules import *\nimport os\nfrom data import ContrastiveSegDataset\nimport hydra\nimport torch\nfrom omegaconf import DictConfig, OmegaConf\nfrom pytorch_lightning.utilities.seed import seed_everything\nfrom torch.utils.data import DataLoader\nfrom torchvision.transforms.functional import five_crop, _get_image_size, crop\nfrom tqdm import tqdm\nfrom torch.utils.data import Dataset\n\n\ndef _random_crops(img, size, seed, n):\n    \"\"\"Crop the given image into four corners and the central crop.\n    If the image is torch Tensor, it is expected\n    to have [..., H, W] shape, where ... means an arbitrary number of leading dimensions\n\n    .. Note::\n        This transform returns a tuple of images and there may be a\n        mismatch in the number of inputs and targets your ``Dataset`` returns.\n\n    Args:\n        img (PIL Image or Tensor): Image to be cropped.\n        size (sequence or int): Desired output size of the crop. If size is an\n            int instead of sequence like (h, w), a square crop (size, size) is\n            made. If provided a sequence of length 1, it will be interpreted as (size[0], size[0]).\n\n    Returns:\n       tuple: tuple (tl, tr, bl, br, center)\n                Corresponding top left, top right, bottom left, bottom right and center crop.\n    \"\"\"\n    if isinstance(size, int):\n        size = (int(size), int(size))\n    elif isinstance(size, (tuple, list)) and len(size) == 1:\n        size = (size[0], size[0])\n\n    if len(size) != 2:\n        raise ValueError(\"Please provide only two dimensions (h, w) for size.\")\n\n    image_width, image_height = _get_image_size(img)\n    crop_height, crop_width = size\n    if crop_width > image_width or crop_height > image_height:\n        msg = \"Requested crop size {} is bigger than input size {}\"\n        raise ValueError(msg.format(size, (image_height, image_width)))\n\n    images = []\n    for i in range(n):\n        seed1 = hash((seed, i, 0))\n        seed2 = hash((seed, i, 1))\n        crop_height, crop_width = int(crop_height), int(crop_width)\n\n        top = seed1 % (image_height - crop_height)\n        left = seed2 % (image_width - crop_width)\n        images.append(crop(img, top, left, crop_height, crop_width))\n\n    return images\n\n\nclass RandomCropComputer(Dataset):\n\n    def _get_size(self, img):\n        if len(img.shape) == 3:\n            return [int(img.shape[1] * self.crop_ratio), int(img.shape[2] * self.crop_ratio)]\n        elif len(img.shape) == 2:\n            return [int(img.shape[0] * self.crop_ratio), int(img.shape[1] * self.crop_ratio)]\n        else:\n            raise ValueError(\"Bad image shape {}\".format(img.shape))\n\n    def random_crops(self, i, img):\n        return _random_crops(img, self._get_size(img), i, 5)\n\n    def five_crops(self, i, img):\n        return five_crop(img, self._get_size(img))\n\n    def __init__(self, cfg, dataset_name, img_set, crop_type, crop_ratio):\n        self.pytorch_data_dir = cfg.pytorch_data_dir\n        self.crop_ratio = crop_ratio\n        self.save_dir = join(\n            cfg.pytorch_data_dir, \"cropped\", \"{}_{}_crop_{}\".format(dataset_name, crop_type, crop_ratio))\n        self.img_set = img_set\n        self.dataset_name = dataset_name\n        self.cfg = cfg\n\n        self.img_dir = join(self.save_dir, \"img\", img_set)\n        self.label_dir = join(self.save_dir, \"label\", img_set)\n        os.makedirs(self.img_dir, exist_ok=True)\n        os.makedirs(self.label_dir, exist_ok=True)\n\n        if crop_type == \"random\":\n            cropper = lambda i, x: self.random_crops(i, x)\n        elif crop_type == \"five\":\n            cropper = lambda i, x: self.five_crops(i, x)\n        else:\n            raise ValueError('Unknown crop type {}'.format(crop_type))\n\n        self.dataset = ContrastiveSegDataset(\n            cfg.pytorch_data_dir,\n            dataset_name,\n            None,\n            img_set,\n            T.ToTensor(),\n            ToTargetTensor(),\n            cfg=cfg,\n            num_neighbors=cfg.num_neighbors,\n            pos_labels=False,\n            pos_images=False,\n            mask=False,\n            aug_geometric_transform=None,\n            aug_photometric_transform=None,\n            extra_transform=cropper\n        )\n\n    def __getitem__(self, item):\n        batch = self.dataset[item]\n        imgs = batch['img']\n        labels = batch['label']\n        for crop_num, (img, label) in enumerate(zip(imgs, labels)):\n            img_num = item * 5 + crop_num\n            img_arr = img.mul(255).add_(0.5).clamp_(0, 255).permute(1, 2, 0).to('cpu', torch.uint8).numpy()\n            label_arr = (label + 1).unsqueeze(0).permute(1, 2, 0).to('cpu', torch.uint8).numpy().squeeze(-1)\n            Image.fromarray(img_arr).save(join(self.img_dir, \"{}.jpg\".format(img_num)), 'JPEG')\n            Image.fromarray(label_arr).save(join(self.label_dir, \"{}.png\".format(img_num)), 'PNG')\n        return True\n\n    def __len__(self):\n        return len(self.dataset)\n\n\n@hydra.main(config_path=\"configs\", config_name=\"train_config.yml\")\ndef my_app(cfg: DictConfig) -> None:\n    print(OmegaConf.to_yaml(cfg))\n    seed_everything(seed=0, workers=True)\n\n    # dataset_names = [\"cityscapes\", \"cocostuff27\"]\n    # img_sets = [\"train\", \"val\"]\n    # crop_types = [\"five\",\"random\"]\n    # crop_ratios = [.5, .7]\n\n    dataset_names = [\"cityscapes\"]\n    img_sets = [\"train\", \"val\"]\n    crop_types = [\"five\"]\n    crop_ratios = [.5]\n\n    for crop_ratio in crop_ratios:\n        for crop_type in crop_types:\n            for dataset_name in dataset_names:\n                for img_set in img_sets:\n                    dataset = RandomCropComputer(cfg, dataset_name, img_set, crop_type, crop_ratio)\n                    loader = DataLoader(dataset, 1, shuffle=False, num_workers=cfg.num_workers, collate_fn=lambda l: l)\n                    for _ in tqdm(loader):\n                        pass\n\n\nif __name__ == \"__main__\":\n    prep_args()\n    my_app()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/crop_datasets.py b/src/crop_datasets.py
--- a/src/crop_datasets.py	(revision c6be305e586f39b07663cb9bdb535828fe4047df)
+++ b/src/crop_datasets.py	(date 1717584581506)
@@ -1,3 +1,8 @@
+import torchvision
+from torch import T
+from torch.distributed.pipeline.sync.dependency import join
+from torchvision.tv_tensors import Image
+
 from modules import *
 import os
 from data import ContrastiveSegDataset
@@ -6,10 +11,12 @@
 from omegaconf import DictConfig, OmegaConf
 from pytorch_lightning.utilities.seed import seed_everything
 from torch.utils.data import DataLoader
-from torchvision.transforms.functional import five_crop, _get_image_size, crop
+from torchvision.transforms.functional import five_crop, crop #_get_image_size
 from tqdm import tqdm
 from torch.utils.data import Dataset
 
+from src.utils import prep_args, ToTargetTensor
+
 
 def _random_crops(img, size, seed, n):
     """Crop the given image into four corners and the central crop.
@@ -38,7 +45,7 @@
     if len(size) != 2:
         raise ValueError("Please provide only two dimensions (h, w) for size.")
 
-    image_width, image_height = _get_image_size(img)
+    image_width, image_height = torchvision.transforms.functional._get_image_size(img)
     crop_height, crop_width = size
     if crop_width > image_width or crop_height > image_height:
         msg = "Requested crop size {} is bigger than input size {}"
Index: src/plot_potsdam.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from collections import defaultdict\nimport hydra\nimport torch.multiprocessing\nfrom omegaconf import DictConfig, OmegaConf\nfrom torch.utils.data import DataLoader\nfrom data import *\nfrom modules import *\nfrom train_segmentation import LitUnsupervisedSegmenter\n\n\n@hydra.main(config_path=\"configs\", config_name=\"train_config.yml\")\ndef my_app(cfg: DictConfig) -> None:\n    # print(OmegaConf.to_yaml(cfg))\n    pytorch_data_dir = cfg.pytorch_data_dir\n\n    result_dir = \"../results/predictions/potsdam\"\n    os.makedirs(result_dir, exist_ok=True)\n    os.makedirs(join(result_dir, \"img\"), exist_ok=True)\n    os.makedirs(join(result_dir, \"label\"), exist_ok=True)\n    os.makedirs(join(result_dir, \"cluster\"), exist_ok=True)\n\n    full_dataset = ContrastiveSegDataset(\n        pytorch_data_dir=pytorch_data_dir,\n        dataset_name=\"potsdamraw\",\n        crop_type=None,\n        image_set=\"all\",\n        transform=get_transform(320, False, \"center\"),\n        target_transform=get_transform(320, True, \"center\"),\n        cfg=cfg,\n    )\n\n    test_loader = DataLoader(full_dataset, 64,\n                             shuffle=False, num_workers=cfg.num_workers,\n                             pin_memory=True, collate_fn=flexible_collate)\n\n    model = LitUnsupervisedSegmenter.load_from_checkpoint(\"../saved_models/potsdam_test.ckpt\")\n    print(OmegaConf.to_yaml(model.cfg))\n    model.eval().cuda()\n    par_model = torch.nn.DataParallel(model.net)\n\n    outputs = defaultdict(list)\n    for i, batch in enumerate(tqdm(test_loader)):\n        with torch.no_grad():\n            if i > 100:\n                break\n\n            img = batch[\"img\"].cuda()\n            label = batch[\"label\"].cuda()\n            feats, code1 = par_model(img)\n            feats, code2 = par_model(img.flip(dims=[3]))\n            code = (code1 + code2.flip(dims=[3])) / 2\n\n            code = F.interpolate(code, label.shape[-2:], mode='bilinear', align_corners=False)\n            cluster_prob = model.cluster_probe(code, 2, log_probs=True)\n            cluster_pred = cluster_prob.argmax(1)\n\n            model.test_cluster_metrics.update(cluster_pred, label)\n\n            outputs['img'].append(img.cpu())\n            outputs['label'].append(label.cpu())\n            outputs['cluster_pred'].append(cluster_pred.cpu())\n            outputs['cluster_prob'].append(cluster_prob.cpu())\n    model.test_cluster_metrics.compute()\n\n    img_num = 6\n    outputs = {k: torch.cat(v, dim=0)[15 * 15 * img_num:15 * 15 * (img_num + 1)] for k, v in outputs.items()}\n\n    full_image = outputs['img'].reshape(15, 15, 3, 320, 320) \\\n        .permute(2, 0, 3, 1, 4) \\\n        .reshape(3, 320 * 15, 320 * 15)\n\n    full_cluster_prob = outputs['cluster_prob'].reshape(15, 15, 3, 320, 320) \\\n        .permute(2, 0, 3, 1, 4) \\\n        .reshape(3, 320 * 15, 320 * 15)\n\n    # crf_probs = dense_crf(full_image.cpu().detach(),\n    #                       full_cluster_prob.cpu().detach())\n    crf_probs = full_cluster_prob.numpy()\n    print(crf_probs.shape)\n\n    reshaped_label = outputs['label'].reshape(15, 15, 320, 320).permute(0, 2, 1, 3).reshape(320 * 15, 320 * 15)\n    reshaped_img = unnorm(full_image).permute(1, 2, 0)\n    reshaped_preds = model.test_cluster_metrics.map_clusters(np.expand_dims(crf_probs.argmax(0), 0))\n\n    fig, ax = plt.subplots(1, 3, figsize=(4 * 3, 4))\n    ax[0].imshow(reshaped_img)\n    ax[1].imshow(reshaped_preds)\n    ax[2].imshow(reshaped_label)\n\n    Image.fromarray(reshaped_img.cuda()).save(join(join(result_dir, \"img\", str(img_num) + \".png\")))\n    Image.fromarray(reshaped_preds).save(join(join(result_dir, \"cluster\", str(img_num) + \".png\")))\n\n    remove_axes(ax)\n    plt.show()\n\nif __name__ == \"__main__\":\n    prep_args()\n    my_app()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/plot_potsdam.py b/src/plot_potsdam.py
--- a/src/plot_potsdam.py	(revision c6be305e586f39b07663cb9bdb535828fe4047df)
+++ b/src/plot_potsdam.py	(date 1717584581543)
@@ -1,10 +1,13 @@
 from collections import defaultdict
 import hydra
 import torch.multiprocessing
+from matplotlib import pyplot as plt
 from omegaconf import DictConfig, OmegaConf
 from torch.utils.data import DataLoader
 from data import *
 from modules import *
+from src import utils
+from src.utils import get_transform, flexible_collate, prep_args
 from train_segmentation import LitUnsupervisedSegmenter
 
 
@@ -79,7 +82,7 @@
     print(crf_probs.shape)
 
     reshaped_label = outputs['label'].reshape(15, 15, 320, 320).permute(0, 2, 1, 3).reshape(320 * 15, 320 * 15)
-    reshaped_img = unnorm(full_image).permute(1, 2, 0)
+    reshaped_img = utils.unnorm(full_image).permute(1, 2, 0)
     reshaped_preds = model.test_cluster_metrics.map_clusters(np.expand_dims(crf_probs.argmax(0), 0))
 
     fig, ax = plt.subplots(1, 3, figsize=(4 * 3, 4))
@@ -90,8 +93,8 @@
     Image.fromarray(reshaped_img.cuda()).save(join(join(result_dir, "img", str(img_num) + ".png")))
     Image.fromarray(reshaped_preds).save(join(join(result_dir, "cluster", str(img_num) + ".png")))
 
-    remove_axes(ax)
-    plt.show()
+    utils.remove_axes(ax)
+    utils.plt.show()
 
 if __name__ == "__main__":
     prep_args()
Index: src/download_datasets.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from utils import *\nimport hydra\nfrom omegaconf import DictConfig\nimport os\nimport wget\n\n\n@hydra.main(config_path=\"configs\", config_name=\"eval_config.yml\")\ndef my_app(cfg: DictConfig) -> None:\n    pytorch_data_dir = \"~/Downloads\"\n    dataset_names = [\n        #\"potsdam\",\n        \"cityscapes\"\n        #\"cocostuff\",\n        #\"potsdamraw\"\n        ]\n    url_base = \"https://marhamilresearch4.blob.core.windows.net/stego-public/pytorch_data/\"\n\n    os.makedirs(pytorch_data_dir, exist_ok=True)\n    for dataset_name in dataset_names:\n        if (not os.path.exists(join(pytorch_data_dir, dataset_name))) or \\\n                (not os.path.exists(join(pytorch_data_dir, dataset_name + \".zip\"))):\n            print(\"\\n Downloading {}\".format(dataset_name))\n            wget.download(url_base + dataset_name + \".zip\", join(pytorch_data_dir, dataset_name + \".zip\"))\n        else:\n            print(\"\\n Found {}, skipping download\".format(dataset_name))\n\n\nif __name__ == \"__main__\":\n    prep_args()\n    my_app()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/download_datasets.py b/src/download_datasets.py
--- a/src/download_datasets.py	(revision c6be305e586f39b07663cb9bdb535828fe4047df)
+++ b/src/download_datasets.py	(date 1717584581551)
@@ -1,9 +1,12 @@
+from torch.distributed.pipeline.sync.dependency import join
 from utils import *
 import hydra
 from omegaconf import DictConfig
 import os
 import wget
 
+from src.utils import prep_args
+
 
 @hydra.main(config_path="configs", config_name="eval_config.yml")
 def my_app(cfg: DictConfig) -> None:
Index: src/plot_dino_correspondence.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\nfrom os.path import join\nfrom utils import get_transform, load_model, prep_for_plot, remove_axes, prep_args\nfrom modules import FeaturePyramidNet, DinoFeaturizer, sample\nfrom data import ContrastiveSegDataset\nimport hydra\nimport matplotlib.animation as animation\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport torch\nimport torch.nn.functional as F\nfrom omegaconf import DictConfig, OmegaConf\nfrom pytorch_lightning.utilities.seed import seed_everything\nfrom torch.utils.data import DataLoader\nfrom tqdm import tqdm\nfrom matplotlib.colors import ListedColormap\n\n\ndef plot_heatmap(ax, image, heatmap, cmap=\"bwr\", color=False, plot_img=True, symmetric=True):\n    vmax = np.abs(heatmap).max()\n    if not color:\n        bw = np.dot(np.array(image)[..., :3], [0.2989, 0.5870, 0.1140])\n        image = np.ones_like(image) * np.expand_dims(bw, -1)\n\n    if symmetric:\n        kwargs = dict(vmax=vmax, vmin=-vmax)\n    else:\n        kwargs = {}\n\n    if plot_img:\n        return [\n            ax.imshow(image),\n            ax.imshow(heatmap, alpha=.5, cmap=cmap, **kwargs),\n        ]\n    else:\n        return [ax.imshow(heatmap, alpha=.5, cmap=cmap, **kwargs)]\n\n\ndef get_heatmaps(net, img, img_pos, query_points):\n    feats1, _ = net(img.cuda())\n    feats2, _ = net(img_pos.cuda())\n\n    sfeats1 = sample(feats1, query_points)\n\n    attn_intra = torch.einsum(\"nchw,ncij->nhwij\", F.normalize(sfeats1, dim=1), F.normalize(feats1, dim=1))\n    attn_intra -= attn_intra.mean([3, 4], keepdims=True)\n    attn_intra = attn_intra.clamp(0).squeeze(0)\n\n    attn_inter = torch.einsum(\"nchw,ncij->nhwij\", F.normalize(sfeats1, dim=1), F.normalize(feats2, dim=1))\n    attn_inter -= attn_inter.mean([3, 4], keepdims=True)\n    attn_inter = attn_inter.clamp(0).squeeze(0)\n\n    heatmap_intra = F.interpolate(\n        attn_intra, img.shape[2:], mode=\"bilinear\", align_corners=True).squeeze(0).detach().cpu()\n    heatmap_inter = F.interpolate(\n        attn_inter, img_pos.shape[2:], mode=\"bilinear\", align_corners=True).squeeze(0).detach().cpu()\n\n    return heatmap_intra, heatmap_inter\n\n\n@hydra.main(config_path=\"configs\", config_name=\"plot_config.yml\")\ndef my_app(cfg: DictConfig) -> None:\n    print(OmegaConf.to_yaml(cfg))\n    pytorch_data_dir = cfg.pytorch_data_dir\n    data_dir = join(cfg.output_root, \"data\")\n    log_dir = join(cfg.output_root, \"logs\")\n    result_dir = join(cfg.output_root, \"results\", \"correspondence\")\n    os.makedirs(data_dir, exist_ok=True)\n    os.makedirs(log_dir, exist_ok=True)\n    seed_everything(seed=0, workers=True)\n    high_res = 512\n\n    transform = get_transform(high_res, False, \"center\")\n    use_loader = True\n\n    if use_loader:\n        dataset = ContrastiveSegDataset(\n            pytorch_data_dir=pytorch_data_dir,\n            dataset_name=cfg.dataset_name,\n            crop_type=None,\n            image_set=\"train\",\n            transform=transform,\n            target_transform=get_transform(high_res, True, \"center\"),\n            cfg=cfg,\n            aug_geometric_transform=None,\n            aug_photometric_transform=None,\n            num_neighbors=2,\n            mask=True,\n            pos_images=True,\n            pos_labels=True,\n        )\n        loader = DataLoader(dataset, 16, shuffle=True, num_workers=cfg.num_workers)\n\n    data_dir = join(cfg.output_root, \"data\")\n    if cfg.arch == \"feature-pyramid\":\n        cut_model = load_model(cfg.model_type, data_dir).cuda()\n        net = FeaturePyramidNet(cfg.granularity, cut_model, cfg.dim, cfg.continuous)\n    elif cfg.arch == \"dino\":\n        net = DinoFeaturizer(cfg.dim, cfg)\n    else:\n        raise ValueError(\"Unknown arch {}\".format(cfg.arch))\n    net = net.cuda()\n\n    for batch_val in loader:\n        batch = batch_val\n        break\n\n    colors = [(1, 0, 0), (0, 1, 0), (0, 0, 1), (1, 1, 0)]\n    cmaps = [\n        ListedColormap([(1, 0, 0, i / 255) for i in range(255)]),\n        ListedColormap([(0, 1, 0, i / 255) for i in range(255)]),\n        ListedColormap([(0, 0, 1, i / 255) for i in range(255)]),\n        ListedColormap([(1, 1, 0, i / 255) for i in range(255)])\n    ]\n\n    with torch.no_grad():\n        if cfg.plot_correspondence:\n            img_num = 6\n            query_points = torch.tensor(\n                [\n                    [-.1, 0.0],\n                    [.5, .8],\n                    [-.7, -.7],\n                ]\n            ).reshape(1, 3, 1, 2).cuda()\n\n            img = batch[\"img\"][img_num:img_num + 1]\n            img_pos = batch[\"img_pos\"][img_num:img_num + 1]\n\n            plt.style.use('dark_background')\n            fig, axes = plt.subplots(1, 3, figsize=(3 * 5, 1 * 5), dpi=100)\n            remove_axes(axes)\n            axes[0].set_title(\"Image and Query Points\", fontsize=20)\n            axes[1].set_title(\"Self Correspondence\", fontsize=20)\n            axes[2].set_title(\"KNN Correspondence\", fontsize=20)\n            fig.tight_layout()\n\n            heatmap_intra, heatmap_inter = get_heatmaps(net, img, img_pos, query_points)\n            for point_num in range(query_points.shape[1]):\n                point = ((query_points[0, point_num, 0] + 1) / 2 * high_res).cpu()\n                img_point_h = point[0]\n                img_point_w = point[1]\n\n                plot_img = point_num == 0\n                if plot_img:\n                    axes[0].imshow(prep_for_plot(img[0]))\n                axes[0].scatter(img_point_h, img_point_w,\n                                c=colors[point_num], marker=\"x\", s=500, linewidths=5)\n\n                plot_heatmap(axes[1], prep_for_plot(img[0]) * .8, heatmap_intra[point_num],\n                             plot_img=plot_img, cmap=cmaps[point_num], symmetric=False)\n                plot_heatmap(axes[2], prep_for_plot(img_pos[0]) * .8, heatmap_inter[point_num],\n                             plot_img=plot_img, cmap=cmaps[point_num], symmetric=False)\n            plt.show()\n\n        if cfg.plot_movie:\n            img_num = 6\n            key_points = [\n                [-.7, -.7],\n                [-.1, 0.0],\n                [.5, .8],\n            ]\n            all_points = []\n            for i in range(len(key_points)):\n                all_points.extend([key_points[i]] * 60)\n\n                if i < len(key_points) - 1:\n                    all_points.extend(\n                        np.stack([\n                            np.linspace(key_points[i][0], key_points[i + 1][0], 50),\n                            np.linspace(key_points[i][1], key_points[i + 1][1], 50),\n                        ], axis=1).tolist())\n            query_points = torch.tensor(all_points).reshape(1, len(all_points), 1, 2).cuda()\n\n\n            plt.style.use('dark_background')\n            fig, axes = plt.subplots(1, 3, figsize=(3 * 5, 1 * 5), dpi=100)\n            remove_axes(axes)\n            axes[0].set_title(\"Image and Query Points\", fontsize=20)\n            axes[1].set_title(\"Self Correspondence\", fontsize=20)\n            axes[2].set_title(\"KNN Correspondence\", fontsize=20)\n\n            fig.tight_layout()\n\n            heatmap_intra, heatmap_inter = get_heatmaps(net, img, img_pos, query_points)\n\n            frames = []  # for storing the generated images\n            for point_num in range(query_points.shape[1]):\n                point = ((query_points[0, point_num, 0] + 1) / 2 * high_res).cpu()\n                img_point_h = point[0]\n                img_point_w = point[1]\n\n                frame = []\n\n                frame.append(axes[0].imshow(prep_for_plot(img[0])))\n\n                frame.extend([\n                    axes[0].scatter(img_point_h, img_point_w,\n                                    c=colors[0], marker=\"x\", s=400, linewidths=4),\n                    *plot_heatmap(axes[1], prep_for_plot(img[0]) * .8, heatmap_intra[point_num],\n                                  cmap=cmaps[0], symmetric=False),\n                    *plot_heatmap(axes[2], prep_for_plot(img_pos[0]) * .8, heatmap_inter[point_num],\n                                  cmap=cmaps[0], symmetric=False)\n                ])\n\n                frames.append(frame)\n\n            os.makedirs(result_dir, exist_ok=True)\n\n            with tqdm(total=len(frames)) as pbar:\n                animation.ArtistAnimation(fig, frames, blit=True).save(\n                    join(result_dir, 'attention_interp.mp4'),\n                    progress_callback=lambda i, n: pbar.update(),\n                    writer=animation.FFMpegWriter(fps=30))\n\n\nif __name__ == \"__main__\":\n    prep_args()\n    my_app()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/plot_dino_correspondence.py b/src/plot_dino_correspondence.py
--- a/src/plot_dino_correspondence.py	(revision c6be305e586f39b07663cb9bdb535828fe4047df)
+++ b/src/plot_dino_correspondence.py	(date 1717584581529)
@@ -1,6 +1,6 @@
 import os
 from os.path import join
-from utils import get_transform, load_model, prep_for_plot, remove_axes, prep_args
+#from utils import get_transform, load_model, prep_for_plot, remove_axes, prep_args
 from modules import FeaturePyramidNet, DinoFeaturizer, sample
 from data import ContrastiveSegDataset
 import hydra
@@ -15,6 +15,9 @@
 from tqdm import tqdm
 from matplotlib.colors import ListedColormap
 
+from src import utils
+from src.utils import prep_for_plot, prep_args
+
 
 def plot_heatmap(ax, image, heatmap, cmap="bwr", color=False, plot_img=True, symmetric=True):
     vmax = np.abs(heatmap).max()
@@ -70,7 +73,7 @@
     seed_everything(seed=0, workers=True)
     high_res = 512
 
-    transform = get_transform(high_res, False, "center")
+    transform = utils.get_transform(high_res, False, "center")
     use_loader = True
 
     if use_loader:
@@ -80,7 +83,7 @@
             crop_type=None,
             image_set="train",
             transform=transform,
-            target_transform=get_transform(high_res, True, "center"),
+            target_transform=utils.get_transform(high_res, True, "center"),
             cfg=cfg,
             aug_geometric_transform=None,
             aug_photometric_transform=None,
@@ -93,7 +96,7 @@
 
     data_dir = join(cfg.output_root, "data")
     if cfg.arch == "feature-pyramid":
-        cut_model = load_model(cfg.model_type, data_dir).cuda()
+        cut_model = utils.load_model(cfg.model_type, data_dir).cuda()
         net = FeaturePyramidNet(cfg.granularity, cut_model, cfg.dim, cfg.continuous)
     elif cfg.arch == "dino":
         net = DinoFeaturizer(cfg.dim, cfg)
@@ -129,7 +132,7 @@
 
             plt.style.use('dark_background')
             fig, axes = plt.subplots(1, 3, figsize=(3 * 5, 1 * 5), dpi=100)
-            remove_axes(axes)
+            utils.remove_axes(axes)
             axes[0].set_title("Image and Query Points", fontsize=20)
             axes[1].set_title("Self Correspondence", fontsize=20)
             axes[2].set_title("KNN Correspondence", fontsize=20)
@@ -143,7 +146,7 @@
 
                 plot_img = point_num == 0
                 if plot_img:
-                    axes[0].imshow(prep_for_plot(img[0]))
+                    axes[0].imshow(utils.prep_for_plot(img[0]))
                 axes[0].scatter(img_point_h, img_point_w,
                                 c=colors[point_num], marker="x", s=500, linewidths=5)
 
@@ -175,7 +178,7 @@
 
             plt.style.use('dark_background')
             fig, axes = plt.subplots(1, 3, figsize=(3 * 5, 1 * 5), dpi=100)
-            remove_axes(axes)
+            utils.remove_axes(axes)
             axes[0].set_title("Image and Query Points", fontsize=20)
             axes[1].set_title("Self Correspondence", fontsize=20)
             axes[2].set_title("KNN Correspondence", fontsize=20)
Index: src/STEGO_Colab_Demo.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"JmPYsg-B49tM\"\n   },\n   \"source\": [\n    \"# Prepare Google Colab Environment\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {\n    \"colab\": {\n     \"base_uri\": \"https://localhost:8080/\"\n    },\n    \"id\": \"GbkVr03HbnG4\",\n    \"outputId\": \"17fb7b43-ba13-4a58-d1b3-b2c538648651\"\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"fatal: destination path 'STEGO' already exists and is not an empty directory.\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"!git clone https://github.com/mhamilton723/STEGO.git\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {\n    \"colab\": {\n     \"base_uri\": \"https://localhost:8080/\",\n     \"height\": 1000\n    },\n    \"id\": \"Q4z1D5fOda3F\",\n    \"outputId\": \"d3f974df-63a6-4717-ed6a-4d37a1abac05\"\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Requirement already satisfied: wget in /home/endrit/anaconda3/lib/python3.10/site-packages (3.2)\\n\",\n      \"Requirement already satisfied: torchmetrics in /home/endrit/anaconda3/lib/python3.10/site-packages (0.11.4)\\n\",\n      \"Requirement already satisfied: packaging in /home/endrit/anaconda3/lib/python3.10/site-packages (from torchmetrics) (22.0)\\n\",\n      \"Requirement already satisfied: numpy>=1.17.2 in /home/endrit/anaconda3/lib/python3.10/site-packages (from torchmetrics) (1.23.5)\\n\",\n      \"Requirement already satisfied: torch>=1.8.1 in /home/endrit/anaconda3/lib/python3.10/site-packages (from torchmetrics) (1.12.1)\\n\",\n      \"Requirement already satisfied: typing_extensions in /home/endrit/anaconda3/lib/python3.10/site-packages (from torch>=1.8.1->torchmetrics) (4.4.0)\\n\",\n      \"Requirement already satisfied: hydra-core in /home/endrit/anaconda3/lib/python3.10/site-packages (1.3.2)\\n\",\n      \"Requirement already satisfied: antlr4-python3-runtime==4.9.* in /home/endrit/anaconda3/lib/python3.10/site-packages (from hydra-core) (4.9.3)\\n\",\n      \"Requirement already satisfied: packaging in /home/endrit/anaconda3/lib/python3.10/site-packages (from hydra-core) (22.0)\\n\",\n      \"Requirement already satisfied: omegaconf<2.4,>=2.2 in /home/endrit/anaconda3/lib/python3.10/site-packages (from hydra-core) (2.3.0)\\n\",\n      \"Requirement already satisfied: PyYAML>=5.1.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from omegaconf<2.4,>=2.2->hydra-core) (6.0)\\n\",\n      \"Collecting git+https://github.com/lucasb-eyer/pydensecrf.git\\n\",\n      \"  Cloning https://github.com/lucasb-eyer/pydensecrf.git to /tmp/pip-req-build-_1nblw2f\\n\",\n      \"  Running command git clone --filter=blob:none --quiet https://github.com/lucasb-eyer/pydensecrf.git /tmp/pip-req-build-_1nblw2f\\n\",\n      \"  Resolved https://github.com/lucasb-eyer/pydensecrf.git to commit 0d53acbcf5123d4c88040fe68fbb9805fc5b2fb9\\n\",\n      \"  Installing build dependencies ... \\u001b[?25ldone\\n\",\n      \"\\u001b[?25h  Getting requirements to build wheel ... \\u001b[?25ldone\\n\",\n      \"\\u001b[?25h  Preparing metadata (pyproject.toml) ... \\u001b[?25ldone\\n\",\n      \"\\u001b[?25hRequirement already satisfied: omegaconf in /home/endrit/anaconda3/lib/python3.10/site-packages (2.3.0)\\n\",\n      \"Requirement already satisfied: antlr4-python3-runtime==4.9.* in /home/endrit/anaconda3/lib/python3.10/site-packages (from omegaconf) (4.9.3)\\n\",\n      \"Requirement already satisfied: PyYAML>=5.1.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from omegaconf) (6.0)\\n\",\n      \"Requirement already satisfied: pytorch-lightning in /home/endrit/anaconda3/lib/python3.10/site-packages (2.0.2)\\n\",\n      \"Requirement already satisfied: fsspec[http]>2021.06.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from pytorch-lightning) (2022.11.0)\\n\",\n      \"Requirement already satisfied: lightning-utilities>=0.7.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from pytorch-lightning) (0.8.0)\\n\",\n      \"Requirement already satisfied: numpy>=1.17.2 in /home/endrit/anaconda3/lib/python3.10/site-packages (from pytorch-lightning) (1.23.5)\\n\",\n      \"Requirement already satisfied: torchmetrics>=0.7.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from pytorch-lightning) (0.11.4)\\n\",\n      \"Requirement already satisfied: PyYAML>=5.4 in /home/endrit/anaconda3/lib/python3.10/site-packages (from pytorch-lightning) (6.0)\\n\",\n      \"Requirement already satisfied: torch>=1.11.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from pytorch-lightning) (1.12.1)\\n\",\n      \"Requirement already satisfied: typing-extensions>=4.0.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from pytorch-lightning) (4.4.0)\\n\",\n      \"Requirement already satisfied: tqdm>=4.57.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from pytorch-lightning) (4.64.1)\\n\",\n      \"Requirement already satisfied: packaging>=17.1 in /home/endrit/anaconda3/lib/python3.10/site-packages (from pytorch-lightning) (22.0)\\n\",\n      \"Requirement already satisfied: requests in /home/endrit/anaconda3/lib/python3.10/site-packages (from fsspec[http]>2021.06.0->pytorch-lightning) (2.28.1)\\n\",\n      \"Requirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /home/endrit/anaconda3/lib/python3.10/site-packages (from fsspec[http]>2021.06.0->pytorch-lightning) (3.8.4)\\n\",\n      \"Requirement already satisfied: frozenlist>=1.1.1 in /home/endrit/anaconda3/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (1.3.3)\\n\",\n      \"Requirement already satisfied: charset-normalizer<4.0,>=2.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (2.0.4)\\n\",\n      \"Requirement already satisfied: yarl<2.0,>=1.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (1.9.2)\\n\",\n      \"Requirement already satisfied: attrs>=17.3.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (22.1.0)\\n\",\n      \"Requirement already satisfied: multidict<7.0,>=4.5 in /home/endrit/anaconda3/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (6.0.4)\\n\",\n      \"Requirement already satisfied: aiosignal>=1.1.2 in /home/endrit/anaconda3/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (1.3.1)\\n\",\n      \"Requirement already satisfied: async-timeout<5.0,>=4.0.0a3 in /home/endrit/anaconda3/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (4.0.2)\\n\",\n      \"Requirement already satisfied: certifi>=2017.4.17 in /home/endrit/anaconda3/lib/python3.10/site-packages (from requests->fsspec[http]>2021.06.0->pytorch-lightning) (2023.5.7)\\n\",\n      \"Requirement already satisfied: idna<4,>=2.5 in /home/endrit/anaconda3/lib/python3.10/site-packages (from requests->fsspec[http]>2021.06.0->pytorch-lightning) (3.4)\\n\",\n      \"Requirement already satisfied: urllib3<1.27,>=1.21.1 in /home/endrit/anaconda3/lib/python3.10/site-packages (from requests->fsspec[http]>2021.06.0->pytorch-lightning) (1.26.14)\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"!pip install wget\\n\",\n    \"!pip install torchmetrics\\n\",\n    \"!pip install hydra-core\\n\",\n    \"!pip install git+https://github.com/lucasb-eyer/pydensecrf.git\\n\",\n    \"!pip install omegaconf\\n\",\n    \"!pip install pytorch-lightning\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"N-CjEZdF5DSH\"\n   },\n   \"source\": [\n    \"# Download Pretrained Model\\n\",\n    \"\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {\n    \"id\": \"hJ_XE2xHcImN\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"import os\\n\",\n    \"from os.path import join\\n\",\n    \"os.chdir(\\\"STEGO/src\\\")\\n\",\n    \"saved_models_dir = join(\\\"..\\\", \\\"saved_models\\\")\\n\",\n    \"os.makedirs(saved_models_dir, exist_ok=True)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {\n    \"id\": \"knywSO7IcNc2\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"import wget\\n\",\n    \"saved_model_url_root = \\\"https://marhamilresearch4.blob.core.windows.net/stego-public/saved_models/\\\"\\n\",\n    \"saved_model_name = \\\"cocostuff27_vit_base_5.ckpt\\\"\\n\",\n    \"if not os.path.exists(join(saved_models_dir, saved_model_name)):\\n\",\n    \"  wget.download(saved_model_url_root + saved_model_name, join(saved_models_dir, saved_model_name))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"rtwTZEkA7twI\"\n   },\n   \"source\": [\n    \"# Load pretrained STEGO\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {\n    \"colab\": {\n     \"base_uri\": \"https://localhost:8080/\",\n     \"height\": 104,\n     \"referenced_widgets\": [\n      \"5fa05203c234442a8c863a51f83bac9d\",\n      \"7cf007c8f7a94bc292f8243391cea7ca\",\n      \"5fa6b3215e01491d9534feadee79f706\",\n      \"41d2dacf744d4ecaa1f51174a6703334\",\n      \"d5faaf8d200a4bbf9c1e9677af8fe257\",\n      \"aeb7614c4d7e41eeab603a70fc80ed6a\",\n      \"41986d51df5b41d79187acaebafe3008\",\n      \"e2ad8a86c24c419581c204fd2ae2ba18\",\n      \"811c526bd6154969b7028307dcafd550\",\n      \"2d1d907c0d04492097e35a9ceddea9a2\",\n      \"6de033864a1b4397a93147091aedda65\"\n     ]\n    },\n    \"id\": \"RyBXeiGjdN8I\",\n    \"outputId\": \"33ae5c14-857a-48d5-cd4b-803daf82c326\"\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Collecting torchvision\\n\",\n      \"  Downloading torchvision-0.15.2-cp310-cp310-manylinux1_x86_64.whl (6.0 MB)\\n\",\n      \"\\u001b[2K     \\u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m6.0/6.0 MB\\u001b[0m \\u001b[31m4.9 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0mm eta \\u001b[36m0:00:01\\u001b[0m[36m0:00:01\\u001b[0m\\n\",\n      \"\\u001b[?25hRequirement already satisfied: requests in /home/endrit/anaconda3/lib/python3.10/site-packages (from torchvision) (2.28.1)\\n\",\n      \"Requirement already satisfied: pillow!=8.3.*,>=5.3.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from torchvision) (9.4.0)\\n\",\n      \"Collecting torch==2.0.1\\n\",\n      \"  Downloading torch-2.0.1-cp310-cp310-manylinux1_x86_64.whl (619.9 MB)\\n\",\n      \"\\u001b[2K     \\u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m619.9/619.9 MB\\u001b[0m \\u001b[31m1.6 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0mm eta \\u001b[36m0:00:01\\u001b[0m[36m0:00:06\\u001b[0m\\n\",\n      \"\\u001b[?25hRequirement already satisfied: numpy in /home/endrit/anaconda3/lib/python3.10/site-packages (from torchvision) (1.23.5)\\n\",\n      \"Requirement already satisfied: sympy in /home/endrit/anaconda3/lib/python3.10/site-packages (from torch==2.0.1->torchvision) (1.11.1)\\n\",\n      \"Collecting nvidia-nccl-cu11==2.14.3\\n\",\n      \"  Downloading nvidia_nccl_cu11-2.14.3-py3-none-manylinux1_x86_64.whl (177.1 MB)\\n\",\n      \"\\u001b[2K     \\u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m177.1/177.1 MB\\u001b[0m \\u001b[31m3.5 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0mm eta \\u001b[36m0:00:01\\u001b[0m[36m0:00:01\\u001b[0m\\n\",\n      \"\\u001b[?25hRequirement already satisfied: jinja2 in /home/endrit/anaconda3/lib/python3.10/site-packages (from torch==2.0.1->torchvision) (3.1.2)\\n\",\n      \"Requirement already satisfied: filelock in /home/endrit/anaconda3/lib/python3.10/site-packages (from torch==2.0.1->torchvision) (3.9.0)\\n\",\n      \"Collecting nvidia-cuda-runtime-cu11==11.7.99\\n\",\n      \"  Downloading nvidia_cuda_runtime_cu11-11.7.99-py3-none-manylinux1_x86_64.whl (849 kB)\\n\",\n      \"\\u001b[2K     \\u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m849.3/849.3 kB\\u001b[0m \\u001b[31m6.5 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0m[31m8.8 MB/s\\u001b[0m eta \\u001b[36m0:00:01\\u001b[0m\\n\",\n      \"\\u001b[?25hCollecting nvidia-cufft-cu11==10.9.0.58\\n\",\n      \"  Downloading nvidia_cufft_cu11-10.9.0.58-py3-none-manylinux1_x86_64.whl (168.4 MB)\\n\",\n      \"\\u001b[2K     \\u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m168.4/168.4 MB\\u001b[0m \\u001b[31m3.6 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0mm eta \\u001b[36m0:00:01\\u001b[0m[36m0:00:01\\u001b[0m\\n\",\n      \"\\u001b[?25hCollecting nvidia-cusolver-cu11==11.4.0.1\\n\",\n      \"  Downloading nvidia_cusolver_cu11-11.4.0.1-2-py3-none-manylinux1_x86_64.whl (102.6 MB)\\n\",\n      \"\\u001b[2K     \\u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m102.6/102.6 MB\\u001b[0m \\u001b[31m3.9 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0mm eta \\u001b[36m0:00:01\\u001b[0m[36m0:00:01\\u001b[0m\\n\",\n      \"\\u001b[?25hRequirement already satisfied: networkx in /home/endrit/anaconda3/lib/python3.10/site-packages (from torch==2.0.1->torchvision) (2.8.4)\\n\",\n      \"Collecting nvidia-cusparse-cu11==11.7.4.91\\n\",\n      \"  Downloading nvidia_cusparse_cu11-11.7.4.91-py3-none-manylinux1_x86_64.whl (173.2 MB)\\n\",\n      \"\\u001b[2K     \\u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m173.2/173.2 MB\\u001b[0m \\u001b[31m3.1 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0mm eta \\u001b[36m0:00:01\\u001b[0m[36m0:00:01\\u001b[0m\\n\",\n      \"\\u001b[?25hCollecting nvidia-curand-cu11==10.2.10.91\\n\",\n      \"  Downloading nvidia_curand_cu11-10.2.10.91-py3-none-manylinux1_x86_64.whl (54.6 MB)\\n\",\n      \"\\u001b[2K     \\u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m54.6/54.6 MB\\u001b[0m \\u001b[31m4.4 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0mm eta \\u001b[36m0:00:01\\u001b[0m[36m0:00:01\\u001b[0m\\n\",\n      \"\\u001b[?25hCollecting nvidia-nvtx-cu11==11.7.91\\n\",\n      \"  Downloading nvidia_nvtx_cu11-11.7.91-py3-none-manylinux1_x86_64.whl (98 kB)\\n\",\n      \"\\u001b[2K     \\u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m98.6/98.6 kB\\u001b[0m \\u001b[31m5.0 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0m\\n\",\n      \"\\u001b[?25hRequirement already satisfied: typing-extensions in /home/endrit/anaconda3/lib/python3.10/site-packages (from torch==2.0.1->torchvision) (4.4.0)\\n\",\n      \"Collecting nvidia-cublas-cu11==11.10.3.66\\n\",\n      \"  Downloading nvidia_cublas_cu11-11.10.3.66-py3-none-manylinux1_x86_64.whl (317.1 MB)\\n\",\n      \"\\u001b[2K     \\u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m317.1/317.1 MB\\u001b[0m \\u001b[31m1.4 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0mm eta \\u001b[36m0:00:01\\u001b[0m[36m0:00:05\\u001b[0m\\n\",\n      \"\\u001b[?25hCollecting nvidia-cuda-cupti-cu11==11.7.101\\n\",\n      \"  Downloading nvidia_cuda_cupti_cu11-11.7.101-py3-none-manylinux1_x86_64.whl (11.8 MB)\\n\",\n      \"\\u001b[2K     \\u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m11.8/11.8 MB\\u001b[0m \\u001b[31m1.7 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0mm eta \\u001b[36m0:00:01\\u001b[0m0:01\\u001b[0m:01\\u001b[0m\\n\",\n      \"\\u001b[?25hCollecting nvidia-cuda-nvrtc-cu11==11.7.99\\n\",\n      \"  Downloading nvidia_cuda_nvrtc_cu11-11.7.99-2-py3-none-manylinux1_x86_64.whl (21.0 MB)\\n\",\n      \"\\u001b[2K     \\u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m21.0/21.0 MB\\u001b[0m \\u001b[31m1.8 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0mm eta \\u001b[36m0:00:01\\u001b[0m[36m0:00:01\\u001b[0m\\n\",\n      \"\\u001b[?25hCollecting triton==2.0.0\\n\",\n      \"  Downloading triton-2.0.0-1-cp310-cp310-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (63.3 MB)\\n\",\n      \"\\u001b[2K     \\u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m63.3/63.3 MB\\u001b[0m \\u001b[31m4.7 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0mm eta \\u001b[36m0:00:01\\u001b[0m[36m0:00:01\\u001b[0m\\n\",\n      \"\\u001b[?25hCollecting nvidia-cudnn-cu11==8.5.0.96\\n\",\n      \"  Downloading nvidia_cudnn_cu11-8.5.0.96-2-py3-none-manylinux1_x86_64.whl (557.1 MB)\\n\",\n      \"\\u001b[2K     \\u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m557.1/557.1 MB\\u001b[0m \\u001b[31m1.9 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0mm eta \\u001b[36m0:00:01\\u001b[0m[36m0:00:03\\u001b[0m\\n\",\n      \"\\u001b[?25hRequirement already satisfied: wheel in /home/endrit/anaconda3/lib/python3.10/site-packages (from nvidia-cublas-cu11==11.10.3.66->torch==2.0.1->torchvision) (0.38.4)\\n\",\n      \"Requirement already satisfied: setuptools in /home/endrit/anaconda3/lib/python3.10/site-packages (from nvidia-cublas-cu11==11.10.3.66->torch==2.0.1->torchvision) (65.6.3)\\n\",\n      \"Collecting cmake\\n\",\n      \"  Downloading cmake-3.26.3-py2.py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (24.0 MB)\\n\",\n      \"\\u001b[2K     \\u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m24.0/24.0 MB\\u001b[0m \\u001b[31m4.6 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0mm eta \\u001b[36m0:00:01\\u001b[0m[36m0:00:01\\u001b[0m\\n\",\n      \"\\u001b[?25hCollecting lit\\n\",\n      \"  Downloading lit-16.0.5.tar.gz (138 kB)\\n\",\n      \"\\u001b[2K     \\u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m138.0/138.0 kB\\u001b[0m \\u001b[31m2.4 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0m[31m5.8 MB/s\\u001b[0m eta \\u001b[36m0:00:01\\u001b[0m\\n\",\n      \"\\u001b[?25h  Preparing metadata (setup.py) ... \\u001b[?25ldone\\n\",\n      \"\\u001b[?25hRequirement already satisfied: certifi>=2017.4.17 in /home/endrit/anaconda3/lib/python3.10/site-packages (from requests->torchvision) (2023.5.7)\\n\",\n      \"Requirement already satisfied: urllib3<1.27,>=1.21.1 in /home/endrit/anaconda3/lib/python3.10/site-packages (from requests->torchvision) (1.26.14)\\n\",\n      \"Requirement already satisfied: idna<4,>=2.5 in /home/endrit/anaconda3/lib/python3.10/site-packages (from requests->torchvision) (3.4)\\n\",\n      \"Requirement already satisfied: charset-normalizer<3,>=2 in /home/endrit/anaconda3/lib/python3.10/site-packages (from requests->torchvision) (2.0.4)\\n\",\n      \"Requirement already satisfied: MarkupSafe>=2.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from jinja2->torch==2.0.1->torchvision) (2.1.1)\\n\",\n      \"Requirement already satisfied: mpmath>=0.19 in /home/endrit/anaconda3/lib/python3.10/site-packages/mpmath-1.2.1-py3.10.egg (from sympy->torch==2.0.1->torchvision) (1.2.1)\\n\",\n      \"Building wheels for collected packages: lit\\n\",\n      \"  Building wheel for lit (setup.py) ... \\u001b[?25ldone\\n\",\n      \"\\u001b[?25h  Created wheel for lit: filename=lit-16.0.5-py3-none-any.whl size=88174 sha256=0b4ccc2d83d9043a5b23e1ca8facc4c4a5de200861cac9f8edfdc256e75925ad\\n\",\n      \"  Stored in directory: /home/endrit/.cache/pip/wheels/eb/02/84/d82f0b1a6098209edf7e3607be6cc592ebbc015a8a3127c68d\\n\",\n      \"Successfully built lit\\n\",\n      \"Installing collected packages: lit, cmake, nvidia-nvtx-cu11, nvidia-nccl-cu11, nvidia-cusparse-cu11, nvidia-curand-cu11, nvidia-cufft-cu11, nvidia-cuda-runtime-cu11, nvidia-cuda-nvrtc-cu11, nvidia-cuda-cupti-cu11, nvidia-cublas-cu11, nvidia-cusolver-cu11, nvidia-cudnn-cu11, triton, torch, torchvision\\n\",\n      \"  Attempting uninstall: torch\\n\",\n      \"    Found existing installation: torch 1.12.1\\n\",\n      \"    Uninstalling torch-1.12.1:\\n\",\n      \"      Successfully uninstalled torch-1.12.1\\n\",\n      \"Successfully installed cmake-3.26.3 lit-16.0.5 nvidia-cublas-cu11-11.10.3.66 nvidia-cuda-cupti-cu11-11.7.101 nvidia-cuda-nvrtc-cu11-11.7.99 nvidia-cuda-runtime-cu11-11.7.99 nvidia-cudnn-cu11-8.5.0.96 nvidia-cufft-cu11-10.9.0.58 nvidia-curand-cu11-10.2.10.91 nvidia-cusolver-cu11-11.4.0.1 nvidia-cusparse-cu11-11.7.4.91 nvidia-nccl-cu11-2.14.3 nvidia-nvtx-cu11-11.7.91 torch-2.0.1 torchvision-0.15.2 triton-2.0.0\\n\"\n     ]\n    },\n    {\n     \"name\": \"stderr\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"/home/endrit/anaconda3/lib/python3.10/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: 'libc10_cuda.so: cannot open shared object file: No such file or directory'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?\\n\",\n      \"  warn(\\n\"\n     ]\n    },\n    {\n     \"ename\": \"ImportError\",\n     \"evalue\": \"cannot import name '_get_cpp_backtrace' from 'torch._C' (/home/endrit/anaconda3/lib/python3.10/site-packages/torch/_C.cpython-310-x86_64-linux-gnu.so)\",\n     \"output_type\": \"error\",\n     \"traceback\": [\n      \"\\u001b[0;31m---------------------------------------------------------------------------\\u001b[0m\",\n      \"\\u001b[0;31mImportError\\u001b[0m                               Traceback (most recent call last)\",\n      \"Cell \\u001b[0;32mIn[6], line 2\\u001b[0m\\n\\u001b[1;32m      1\\u001b[0m get_ipython()\\u001b[38;5;241m.\\u001b[39msystem(\\u001b[38;5;124m'\\u001b[39m\\u001b[38;5;124mpip install torchvision\\u001b[39m\\u001b[38;5;124m'\\u001b[39m)\\n\\u001b[0;32m----> 2\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtrain_segmentation\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m LitUnsupervisedSegmenter\\n\\u001b[1;32m      4\\u001b[0m model \\u001b[38;5;241m=\\u001b[39m LitUnsupervisedSegmenter\\u001b[38;5;241m.\\u001b[39mload_from_checkpoint(join(saved_models_dir, saved_model_name))\\u001b[38;5;241m.\\u001b[39mcuda()\\n\",\n      \"File \\u001b[0;32m~/STEGO/src/train_segmentation.py:1\\u001b[0m\\n\\u001b[0;32m----> 1\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mutils\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m \\u001b[38;5;241m*\\u001b[39m\\n\\u001b[1;32m      2\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mmodules\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m \\u001b[38;5;241m*\\u001b[39m\\n\\u001b[1;32m      3\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mdata\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m \\u001b[38;5;241m*\\u001b[39m\\n\",\n      \"File \\u001b[0;32m~/STEGO/src/utils.py:18\\u001b[0m\\n\\u001b[1;32m     16\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mutils\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mdata\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01m_utils\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mcollate\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m np_str_obj_array_pattern, default_collate_err_msg_format\\n\\u001b[1;32m     17\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorchmetrics\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m Metric\\n\\u001b[0;32m---> 18\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorchvision\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m models\\n\\u001b[1;32m     19\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorchvision\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m transforms \\u001b[38;5;28;01mas\\u001b[39;00m T\\n\\u001b[1;32m     20\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mutils\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mtensorboard\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01msummary\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m hparams\\n\",\n      \"File \\u001b[0;32m~/anaconda3/lib/python3.10/site-packages/torchvision/__init__.py:6\\u001b[0m\\n\\u001b[1;32m      3\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mmodulefinder\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m Module\\n\\u001b[1;32m      5\\u001b[0m \\u001b[38;5;28;01mimport\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\n\\u001b[0;32m----> 6\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorchvision\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m datasets, io, models, ops, transforms, utils\\n\\u001b[1;32m      8\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mextension\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m _HAS_OPS\\n\\u001b[1;32m     10\\u001b[0m \\u001b[38;5;28;01mtry\\u001b[39;00m:\\n\",\n      \"File \\u001b[0;32m~/anaconda3/lib/python3.10/site-packages/torchvision/models/__init__.py:2\\u001b[0m\\n\\u001b[1;32m      1\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01malexnet\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m \\u001b[38;5;241m*\\u001b[39m\\n\\u001b[0;32m----> 2\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mconvnext\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m \\u001b[38;5;241m*\\u001b[39m\\n\\u001b[1;32m      3\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mdensenet\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m \\u001b[38;5;241m*\\u001b[39m\\n\\u001b[1;32m      4\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mefficientnet\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m \\u001b[38;5;241m*\\u001b[39m\\n\",\n      \"File \\u001b[0;32m~/anaconda3/lib/python3.10/site-packages/torchvision/models/convnext.py:8\\u001b[0m\\n\\u001b[1;32m      5\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m nn, Tensor\\n\\u001b[1;32m      6\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mnn\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m functional \\u001b[38;5;28;01mas\\u001b[39;00m F\\n\\u001b[0;32m----> 8\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mops\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mmisc\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m Conv2dNormActivation, Permute\\n\\u001b[1;32m      9\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mops\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mstochastic_depth\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m StochasticDepth\\n\\u001b[1;32m     10\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mtransforms\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01m_presets\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m ImageClassification\\n\",\n      \"File \\u001b[0;32m~/anaconda3/lib/python3.10/site-packages/torchvision/ops/__init__.py:1\\u001b[0m\\n\\u001b[0;32m----> 1\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01m_register_onnx_ops\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m _register_custom_op\\n\\u001b[1;32m      2\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mboxes\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m (\\n\\u001b[1;32m      3\\u001b[0m     batched_nms,\\n\\u001b[1;32m      4\\u001b[0m     box_area,\\n\\u001b[0;32m   (...)\\u001b[0m\\n\\u001b[1;32m     13\\u001b[0m     remove_small_boxes,\\n\\u001b[1;32m     14\\u001b[0m )\\n\\u001b[1;32m     15\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mciou_loss\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m complete_box_iou_loss\\n\",\n      \"File \\u001b[0;32m~/anaconda3/lib/python3.10/site-packages/torchvision/ops/_register_onnx_ops.py:5\\u001b[0m\\n\\u001b[1;32m      2\\u001b[0m \\u001b[38;5;28;01mimport\\u001b[39;00m \\u001b[38;5;21;01mwarnings\\u001b[39;00m\\n\\u001b[1;32m      4\\u001b[0m \\u001b[38;5;28;01mimport\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\n\\u001b[0;32m----> 5\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01monnx\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m symbolic_opset11 \\u001b[38;5;28;01mas\\u001b[39;00m opset11\\n\\u001b[1;32m      6\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01monnx\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01msymbolic_helper\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m parse_args\\n\\u001b[1;32m      8\\u001b[0m _ONNX_OPSET_VERSION_11 \\u001b[38;5;241m=\\u001b[39m \\u001b[38;5;241m11\\u001b[39m\\n\",\n      \"File \\u001b[0;32m~/anaconda3/lib/python3.10/site-packages/torch/onnx/symbolic_opset11.py:12\\u001b[0m\\n\\u001b[1;32m     10\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m _C\\n\\u001b[1;32m     11\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01m_C\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m _onnx \\u001b[38;5;28;01mas\\u001b[39;00m _C_onnx\\n\\u001b[0;32m---> 12\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01monnx\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m (\\n\\u001b[1;32m     13\\u001b[0m     _type_utils,\\n\\u001b[1;32m     14\\u001b[0m     errors,\\n\\u001b[1;32m     15\\u001b[0m     symbolic_helper,\\n\\u001b[1;32m     16\\u001b[0m     symbolic_opset10 \\u001b[38;5;28;01mas\\u001b[39;00m opset10,\\n\\u001b[1;32m     17\\u001b[0m     symbolic_opset9 \\u001b[38;5;28;01mas\\u001b[39;00m opset9,\\n\\u001b[1;32m     18\\u001b[0m     utils,\\n\\u001b[1;32m     19\\u001b[0m )\\n\\u001b[1;32m     20\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01monnx\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01m_globals\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m GLOBALS\\n\\u001b[1;32m     21\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01monnx\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01m_internal\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m _beartype, jit_utils, registration\\n\",\n      \"File \\u001b[0;32m~/anaconda3/lib/python3.10/site-packages/torch/onnx/_type_utils.py:10\\u001b[0m\\n\\u001b[1;32m      8\\u001b[0m \\u001b[38;5;28;01mimport\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\n\\u001b[1;32m      9\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01m_C\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m _onnx \\u001b[38;5;28;01mas\\u001b[39;00m _C_onnx\\n\\u001b[0;32m---> 10\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01monnx\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m errors\\n\\u001b[1;32m     11\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01monnx\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01m_internal\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m _beartype\\n\\u001b[1;32m     14\\u001b[0m \\u001b[38;5;28;01mif\\u001b[39;00m typing\\u001b[38;5;241m.\\u001b[39mTYPE_CHECKING:\\n\\u001b[1;32m     15\\u001b[0m     \\u001b[38;5;66;03m# Hack to help mypy to recognize torch._C.Value\\u001b[39;00m\\n\",\n      \"File \\u001b[0;32m~/anaconda3/lib/python3.10/site-packages/torch/onnx/errors.py:9\\u001b[0m\\n\\u001b[1;32m      7\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m _C\\n\\u001b[1;32m      8\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01monnx\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m _constants\\n\\u001b[0;32m----> 9\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01monnx\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01m_internal\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m diagnostics\\n\\u001b[1;32m     11\\u001b[0m __all__ \\u001b[38;5;241m=\\u001b[39m [\\n\\u001b[1;32m     12\\u001b[0m     \\u001b[38;5;124m\\\"\\u001b[39m\\u001b[38;5;124mOnnxExporterError\\u001b[39m\\u001b[38;5;124m\\\"\\u001b[39m,\\n\\u001b[1;32m     13\\u001b[0m     \\u001b[38;5;124m\\\"\\u001b[39m\\u001b[38;5;124mOnnxExporterWarning\\u001b[39m\\u001b[38;5;124m\\\"\\u001b[39m,\\n\\u001b[0;32m   (...)\\u001b[0m\\n\\u001b[1;32m     17\\u001b[0m     \\u001b[38;5;124m\\\"\\u001b[39m\\u001b[38;5;124mSymbolicValueError\\u001b[39m\\u001b[38;5;124m\\\"\\u001b[39m,\\n\\u001b[1;32m     18\\u001b[0m ]\\n\\u001b[1;32m     21\\u001b[0m \\u001b[38;5;28;01mclass\\u001b[39;00m \\u001b[38;5;21;01mOnnxExporterWarning\\u001b[39;00m(\\u001b[38;5;167;01mUserWarning\\u001b[39;00m):\\n\",\n      \"File \\u001b[0;32m~/anaconda3/lib/python3.10/site-packages/torch/onnx/_internal/diagnostics/__init__.py:1\\u001b[0m\\n\\u001b[0;32m----> 1\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01m_diagnostic\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m (\\n\\u001b[1;32m      2\\u001b[0m     create_export_diagnostic_context,\\n\\u001b[1;32m      3\\u001b[0m     diagnose,\\n\\u001b[1;32m      4\\u001b[0m     engine,\\n\\u001b[1;32m      5\\u001b[0m     export_context,\\n\\u001b[1;32m      6\\u001b[0m     ExportDiagnostic,\\n\\u001b[1;32m      7\\u001b[0m )\\n\\u001b[1;32m      8\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01m_rules\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m rules\\n\\u001b[1;32m      9\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01minfra\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m levels\\n\",\n      \"File \\u001b[0;32m~/anaconda3/lib/python3.10/site-packages/torch/onnx/_internal/diagnostics/_diagnostic.py:11\\u001b[0m\\n\\u001b[1;32m      8\\u001b[0m \\u001b[38;5;28;01mimport\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\n\\u001b[1;32m     10\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01monnx\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01m_internal\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mdiagnostics\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m infra\\n\\u001b[0;32m---> 11\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mutils\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m cpp_backtrace\\n\\u001b[1;32m     14\\u001b[0m \\u001b[38;5;28;01mdef\\u001b[39;00m \\u001b[38;5;21m_cpp_call_stack\\u001b[39m(frames_to_skip: \\u001b[38;5;28mint\\u001b[39m \\u001b[38;5;241m=\\u001b[39m \\u001b[38;5;241m0\\u001b[39m, frames_to_log: \\u001b[38;5;28mint\\u001b[39m \\u001b[38;5;241m=\\u001b[39m \\u001b[38;5;241m32\\u001b[39m) \\u001b[38;5;241m-\\u001b[39m\\u001b[38;5;241m>\\u001b[39m infra\\u001b[38;5;241m.\\u001b[39mStack:\\n\\u001b[1;32m     15\\u001b[0m     \\u001b[38;5;124;03m\\\"\\\"\\\"Returns the current C++ call stack.\\u001b[39;00m\\n\\u001b[1;32m     16\\u001b[0m \\n\\u001b[1;32m     17\\u001b[0m \\u001b[38;5;124;03m    This function utilizes `torch.utils.cpp_backtrace` to get the current C++ call stack.\\u001b[39;00m\\n\\u001b[0;32m   (...)\\u001b[0m\\n\\u001b[1;32m     21\\u001b[0m \\n\\u001b[1;32m     22\\u001b[0m \\u001b[38;5;124;03m    \\\"\\\"\\\"\\u001b[39;00m\\n\",\n      \"File \\u001b[0;32m~/anaconda3/lib/python3.10/site-packages/torch/utils/cpp_backtrace.py:1\\u001b[0m\\n\\u001b[0;32m----> 1\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01m_C\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m _get_cpp_backtrace\\n\\u001b[1;32m      3\\u001b[0m \\u001b[38;5;28;01mdef\\u001b[39;00m \\u001b[38;5;21mget_cpp_backtrace\\u001b[39m(frames_to_skip\\u001b[38;5;241m=\\u001b[39m\\u001b[38;5;241m0\\u001b[39m, maximum_number_of_frames\\u001b[38;5;241m=\\u001b[39m\\u001b[38;5;241m64\\u001b[39m) \\u001b[38;5;241m-\\u001b[39m\\u001b[38;5;241m>\\u001b[39m \\u001b[38;5;28mstr\\u001b[39m:\\n\\u001b[1;32m      4\\u001b[0m     \\u001b[38;5;124mr\\u001b[39m\\u001b[38;5;124;03m\\\"\\\"\\\"\\u001b[39;00m\\n\\u001b[1;32m      5\\u001b[0m \\u001b[38;5;124;03m    Returns a string containing the C++ stack trace of the current thread.\\u001b[39;00m\\n\\u001b[1;32m      6\\u001b[0m \\u001b[38;5;124;03m    Args:\\u001b[39;00m\\n\\u001b[1;32m      7\\u001b[0m \\u001b[38;5;124;03m        frames_to_skip (int): the number of frames to skip from the top of the stack\\u001b[39;00m\\n\\u001b[1;32m      8\\u001b[0m \\u001b[38;5;124;03m        maximum_number_of_frames (int): the maximum number of frames to return\\u001b[39;00m\\n\\u001b[1;32m      9\\u001b[0m \\u001b[38;5;124;03m    \\\"\\\"\\\"\\u001b[39;00m\\n\",\n      \"\\u001b[0;31mImportError\\u001b[0m: cannot import name '_get_cpp_backtrace' from 'torch._C' (/home/endrit/anaconda3/lib/python3.10/site-packages/torch/_C.cpython-310-x86_64-linux-gnu.so)\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"!pip install torchvision\\n\",\n    \"from train_segmentation import LitUnsupervisedSegmenter\\n\",\n    \"\\n\",\n    \"model = LitUnsupervisedSegmenter.load_from_checkpoint(join(saved_models_dir, saved_model_name)).cuda()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"ATktWg_hBbuS\"\n   },\n   \"source\": [\n    \"# Load Image\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {\n    \"colab\": {\n     \"base_uri\": \"https://localhost:8080/\"\n    },\n    \"id\": \"Ku-prYXZ8quf\",\n    \"outputId\": \"f3c132f1-f380-4431-ed6d-7d158d3af41b\"\n   },\n   \"outputs\": [\n    {\n     \"ename\": \"ModuleNotFoundError\",\n     \"evalue\": \"No module named 'torchvision'\",\n     \"output_type\": \"error\",\n     \"traceback\": [\n      \"\\u001b[0;31m---------------------------------------------------------------------------\\u001b[0m\",\n      \"\\u001b[0;31mModuleNotFoundError\\u001b[0m                       Traceback (most recent call last)\",\n      \"Cell \\u001b[0;32mIn[6], line 4\\u001b[0m\\n\\u001b[1;32m      2\\u001b[0m \\u001b[38;5;28;01mimport\\u001b[39;00m \\u001b[38;5;21;01mrequests\\u001b[39;00m\\n\\u001b[1;32m      3\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mio\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m BytesIO\\n\\u001b[0;32m----> 4\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mtorchvision\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mtransforms\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mfunctional\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m to_tensor\\n\\u001b[1;32m      5\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mutils\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m get_transform\\n\\u001b[1;32m      7\\u001b[0m img_url \\u001b[38;5;241m=\\u001b[39m\\u001b[38;5;124m\\\"\\u001b[39m\\u001b[38;5;124mhttps://marhamilresearch4.blob.core.windows.net/stego-public/sample_images/moto1.jpg\\u001b[39m\\u001b[38;5;124m\\\"\\u001b[39m\\n\",\n      \"\\u001b[0;31mModuleNotFoundError\\u001b[0m: No module named 'torchvision'\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"from PIL import Image\\n\",\n    \"import requests\\n\",\n    \"from io import BytesIO\\n\",\n    \"from torchvision.transforms.functional import to_tensor\\n\",\n    \"from utils import get_transform\\n\",\n    \"\\n\",\n    \"img_url =\\\"https://marhamilresearch4.blob.core.windows.net/stego-public/sample_images/moto1.jpg\\\"\\n\",\n    \"response = requests.get(img_url)\\n\",\n    \"img = Image.open(BytesIO(response.content))\\n\",\n    \"transform = get_transform(448, False, \\\"center\\\")\\n\",\n    \"img = transform(img).unsqueeze(0).cuda()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"5xXhpW6BBeWz\"\n   },\n   \"source\": [\n    \"# Query model and pass result through CRF\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"metadata\": {\n    \"id\": \"e0hvX1KX30SC\"\n   },\n   \"outputs\": [\n    {\n     \"ename\": \"ModuleNotFoundError\",\n     \"evalue\": \"No module named 'torchvision'\",\n     \"output_type\": \"error\",\n     \"traceback\": [\n      \"\\u001b[0;31m---------------------------------------------------------------------------\\u001b[0m\",\n      \"\\u001b[0;31mModuleNotFoundError\\u001b[0m                       Traceback (most recent call last)\",\n      \"Cell \\u001b[0;32mIn[9], line 2\\u001b[0m\\n\\u001b[1;32m      1\\u001b[0m \\u001b[38;5;28;01mimport\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mnn\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mfunctional\\u001b[39;00m \\u001b[38;5;28;01mas\\u001b[39;00m \\u001b[38;5;21;01mF\\u001b[39;00m\\n\\u001b[0;32m----> 2\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mcrf\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m dense_crf\\n\\u001b[1;32m      3\\u001b[0m \\u001b[38;5;28;01mimport\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\n\\u001b[1;32m      5\\u001b[0m \\u001b[38;5;28;01mwith\\u001b[39;00m torch\\u001b[38;5;241m.\\u001b[39mno_grad():\\n\",\n      \"File \\u001b[0;32m~/STEGO/src/crf.py:10\\u001b[0m\\n\\u001b[1;32m      8\\u001b[0m \\u001b[38;5;28;01mimport\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\n\\u001b[1;32m      9\\u001b[0m \\u001b[38;5;28;01mimport\\u001b[39;00m \\u001b[38;5;21;01mtorch\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mnn\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mfunctional\\u001b[39;00m \\u001b[38;5;28;01mas\\u001b[39;00m \\u001b[38;5;21;01mF\\u001b[39;00m\\n\\u001b[0;32m---> 10\\u001b[0m \\u001b[38;5;28;01mimport\\u001b[39;00m \\u001b[38;5;21;01mtorchvision\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mtransforms\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mfunctional\\u001b[39;00m \\u001b[38;5;28;01mas\\u001b[39;00m \\u001b[38;5;21;01mVF\\u001b[39;00m\\n\\u001b[1;32m     11\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mutils\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m unnorm\\n\\u001b[1;32m     13\\u001b[0m MAX_ITER \\u001b[38;5;241m=\\u001b[39m \\u001b[38;5;241m10\\u001b[39m\\n\",\n      \"\\u001b[0;31mModuleNotFoundError\\u001b[0m: No module named 'torchvision'\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"import torch.nn.functional as F\\n\",\n    \"from crf import dense_crf\\n\",\n    \"import torch\\n\",\n    \"\\n\",\n    \"with torch.no_grad():\\n\",\n    \"  code1 = model(img)\\n\",\n    \"  code2 = model(img.flip(dims=[3]))\\n\",\n    \"  code  = (code1 + code2.flip(dims=[3])) / 2\\n\",\n    \"  code = F.interpolate(code, img.shape[-2:], mode='bilinear', align_corners=False)\\n\",\n    \"  linear_probs = torch.log_softmax(model.linear_probe(code), dim=1).cpu()\\n\",\n    \"  cluster_probs = model.cluster_probe(code, 2, log_probs=True).cpu()\\n\",\n    \"\\n\",\n    \"  single_img = img[0].cpu()\\n\",\n    \"  linear_pred = dense_crf(single_img, linear_probs[0]).argmax(0)\\n\",\n    \"  cluster_pred = dense_crf(single_img, cluster_probs[0]).argmax(0)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"BxPO9i4rBjpH\"\n   },\n   \"source\": [\n    \"# Visualize Result\\n\",\n    \"\\n\",\n    \"Note that cluster predictions will not be matched with ground truth classes in this example. For hungarian matching please use: `eval_segmentation.py`\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 12,\n   \"metadata\": {\n    \"colab\": {\n     \"base_uri\": \"https://localhost:8080/\",\n     \"height\": 314\n    },\n    \"id\": \"3G7CIyYG-hXj\",\n    \"outputId\": \"4731d8de-d772-4818-9d14-679de5af7060\"\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stderr\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"image/png\": \"\\n\",\n      \"text/plain\": [\n       \"<Figure size 1080x360 with 3 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"import matplotlib.pyplot as plt\\n\",\n    \"from utils import unnorm, remove_axes\\n\",\n    \"fig, ax = plt.subplots(1,3, figsize=(5*3,5))\\n\",\n    \"ax[0].imshow(unnorm(img)[0].permute(1,2,0).cpu())\\n\",\n    \"ax[0].set_title(\\\"Image\\\")\\n\",\n    \"ax[1].imshow(model.label_cmap[cluster_pred])\\n\",\n    \"ax[1].set_title(\\\"Cluster Predictions\\\")\\n\",\n    \"ax[2].imshow(model.label_cmap[linear_pred])\\n\",\n    \"ax[2].set_title(\\\"Linear Probe Predictions\\\")\\n\",\n    \"remove_axes(ax)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"IZtla3AI-uTX\"\n   },\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"accelerator\": \"GPU\",\n  \"colab\": {\n   \"name\": \"STEGO Colab Demo.ipynb\",\n   \"provenance\": []\n  },\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.10.9\"\n  },\n  \"widgets\": {\n   \"application/vnd.jupyter.widget-state+json\": {\n    \"2d1d907c0d04492097e35a9ceddea9a2\": {\n     \"model_module\": \"@jupyter-widgets/base\",\n     \"model_module_version\": \"1.2.0\",\n     \"model_name\": \"LayoutModel\",\n     \"state\": {\n      \"_model_module\": \"@jupyter-widgets/base\",\n      \"_model_module_version\": \"1.2.0\",\n      \"_model_name\": \"LayoutModel\",\n      \"_view_count\": null,\n      \"_view_module\": \"@jupyter-widgets/base\",\n      \"_view_module_version\": \"1.2.0\",\n      \"_view_name\": \"LayoutView\",\n      \"align_content\": null,\n      \"align_items\": null,\n      \"align_self\": null,\n      \"border\": null,\n      \"bottom\": null,\n      \"display\": null,\n      \"flex\": null,\n      \"flex_flow\": null,\n      \"grid_area\": null,\n      \"grid_auto_columns\": null,\n      \"grid_auto_flow\": null,\n      \"grid_auto_rows\": null,\n      \"grid_column\": null,\n      \"grid_gap\": null,\n      \"grid_row\": null,\n      \"grid_template_areas\": null,\n      \"grid_template_columns\": null,\n      \"grid_template_rows\": null,\n      \"height\": null,\n      \"justify_content\": null,\n      \"justify_items\": null,\n      \"left\": null,\n      \"margin\": null,\n      \"max_height\": null,\n      \"max_width\": null,\n      \"min_height\": null,\n      \"min_width\": null,\n      \"object_fit\": null,\n      \"object_position\": null,\n      \"order\": null,\n      \"overflow\": null,\n      \"overflow_x\": null,\n      \"overflow_y\": null,\n      \"padding\": null,\n      \"right\": null,\n      \"top\": null,\n      \"visibility\": null,\n      \"width\": null\n     }\n    },\n    \"41986d51df5b41d79187acaebafe3008\": {\n     \"model_module\": \"@jupyter-widgets/controls\",\n     \"model_module_version\": \"1.5.0\",\n     \"model_name\": \"DescriptionStyleModel\",\n     \"state\": {\n      \"_model_module\": \"@jupyter-widgets/controls\",\n      \"_model_module_version\": \"1.5.0\",\n      \"_model_name\": \"DescriptionStyleModel\",\n      \"_view_count\": null,\n      \"_view_module\": \"@jupyter-widgets/base\",\n      \"_view_module_version\": \"1.2.0\",\n      \"_view_name\": \"StyleView\",\n      \"description_width\": \"\"\n     }\n    },\n    \"41d2dacf744d4ecaa1f51174a6703334\": {\n     \"model_module\": \"@jupyter-widgets/controls\",\n     \"model_module_version\": \"1.5.0\",\n     \"model_name\": \"HTMLModel\",\n     \"state\": {\n      \"_dom_classes\": [],\n      \"_model_module\": \"@jupyter-widgets/controls\",\n      \"_model_module_version\": \"1.5.0\",\n      \"_model_name\": \"HTMLModel\",\n      \"_view_count\": null,\n      \"_view_module\": \"@jupyter-widgets/controls\",\n      \"_view_module_version\": \"1.5.0\",\n      \"_view_name\": \"HTMLView\",\n      \"description\": \"\",\n      \"description_tooltip\": null,\n      \"layout\": \"IPY_MODEL_2d1d907c0d04492097e35a9ceddea9a2\",\n      \"placeholder\": \"\u200B\",\n      \"style\": \"IPY_MODEL_6de033864a1b4397a93147091aedda65\",\n      \"value\": \" 327M/327M [00:15&lt;00:00, 25.4MB/s]\"\n     }\n    },\n    \"5fa05203c234442a8c863a51f83bac9d\": {\n     \"model_module\": \"@jupyter-widgets/controls\",\n     \"model_module_version\": \"1.5.0\",\n     \"model_name\": \"HBoxModel\",\n     \"state\": {\n      \"_dom_classes\": [],\n      \"_model_module\": \"@jupyter-widgets/controls\",\n      \"_model_module_version\": \"1.5.0\",\n      \"_model_name\": \"HBoxModel\",\n      \"_view_count\": null,\n      \"_view_module\": \"@jupyter-widgets/controls\",\n      \"_view_module_version\": \"1.5.0\",\n      \"_view_name\": \"HBoxView\",\n      \"box_style\": \"\",\n      \"children\": [\n       \"IPY_MODEL_7cf007c8f7a94bc292f8243391cea7ca\",\n       \"IPY_MODEL_5fa6b3215e01491d9534feadee79f706\",\n       \"IPY_MODEL_41d2dacf744d4ecaa1f51174a6703334\"\n      ],\n      \"layout\": \"IPY_MODEL_d5faaf8d200a4bbf9c1e9677af8fe257\"\n     }\n    },\n    \"5fa6b3215e01491d9534feadee79f706\": {\n     \"model_module\": \"@jupyter-widgets/controls\",\n     \"model_module_version\": \"1.5.0\",\n     \"model_name\": \"FloatProgressModel\",\n     \"state\": {\n      \"_dom_classes\": [],\n      \"_model_module\": \"@jupyter-widgets/controls\",\n      \"_model_module_version\": \"1.5.0\",\n      \"_model_name\": \"FloatProgressModel\",\n      \"_view_count\": null,\n      \"_view_module\": \"@jupyter-widgets/controls\",\n      \"_view_module_version\": \"1.5.0\",\n      \"_view_name\": \"ProgressView\",\n      \"bar_style\": \"success\",\n      \"description\": \"\",\n      \"description_tooltip\": null,\n      \"layout\": \"IPY_MODEL_e2ad8a86c24c419581c204fd2ae2ba18\",\n      \"max\": 343279349,\n      \"min\": 0,\n      \"orientation\": \"horizontal\",\n      \"style\": \"IPY_MODEL_811c526bd6154969b7028307dcafd550\",\n      \"value\": 343279349\n     }\n    },\n    \"6de033864a1b4397a93147091aedda65\": {\n     \"model_module\": \"@jupyter-widgets/controls\",\n     \"model_module_version\": \"1.5.0\",\n     \"model_name\": \"DescriptionStyleModel\",\n     \"state\": {\n      \"_model_module\": \"@jupyter-widgets/controls\",\n      \"_model_module_version\": \"1.5.0\",\n      \"_model_name\": \"DescriptionStyleModel\",\n      \"_view_count\": null,\n      \"_view_module\": \"@jupyter-widgets/base\",\n      \"_view_module_version\": \"1.2.0\",\n      \"_view_name\": \"StyleView\",\n      \"description_width\": \"\"\n     }\n    },\n    \"7cf007c8f7a94bc292f8243391cea7ca\": {\n     \"model_module\": \"@jupyter-widgets/controls\",\n     \"model_module_version\": \"1.5.0\",\n     \"model_name\": \"HTMLModel\",\n     \"state\": {\n      \"_dom_classes\": [],\n      \"_model_module\": \"@jupyter-widgets/controls\",\n      \"_model_module_version\": \"1.5.0\",\n      \"_model_name\": \"HTMLModel\",\n      \"_view_count\": null,\n      \"_view_module\": \"@jupyter-widgets/controls\",\n      \"_view_module_version\": \"1.5.0\",\n      \"_view_name\": \"HTMLView\",\n      \"description\": \"\",\n      \"description_tooltip\": null,\n      \"layout\": \"IPY_MODEL_aeb7614c4d7e41eeab603a70fc80ed6a\",\n      \"placeholder\": \"\u200B\",\n      \"style\": \"IPY_MODEL_41986d51df5b41d79187acaebafe3008\",\n      \"value\": \"100%\"\n     }\n    },\n    \"811c526bd6154969b7028307dcafd550\": {\n     \"model_module\": \"@jupyter-widgets/controls\",\n     \"model_module_version\": \"1.5.0\",\n     \"model_name\": \"ProgressStyleModel\",\n     \"state\": {\n      \"_model_module\": \"@jupyter-widgets/controls\",\n      \"_model_module_version\": \"1.5.0\",\n      \"_model_name\": \"ProgressStyleModel\",\n      \"_view_count\": null,\n      \"_view_module\": \"@jupyter-widgets/base\",\n      \"_view_module_version\": \"1.2.0\",\n      \"_view_name\": \"StyleView\",\n      \"bar_color\": null,\n      \"description_width\": \"\"\n     }\n    },\n    \"aeb7614c4d7e41eeab603a70fc80ed6a\": {\n     \"model_module\": \"@jupyter-widgets/base\",\n     \"model_module_version\": \"1.2.0\",\n     \"model_name\": \"LayoutModel\",\n     \"state\": {\n      \"_model_module\": \"@jupyter-widgets/base\",\n      \"_model_module_version\": \"1.2.0\",\n      \"_model_name\": \"LayoutModel\",\n      \"_view_count\": null,\n      \"_view_module\": \"@jupyter-widgets/base\",\n      \"_view_module_version\": \"1.2.0\",\n      \"_view_name\": \"LayoutView\",\n      \"align_content\": null,\n      \"align_items\": null,\n      \"align_self\": null,\n      \"border\": null,\n      \"bottom\": null,\n      \"display\": null,\n      \"flex\": null,\n      \"flex_flow\": null,\n      \"grid_area\": null,\n      \"grid_auto_columns\": null,\n      \"grid_auto_flow\": null,\n      \"grid_auto_rows\": null,\n      \"grid_column\": null,\n      \"grid_gap\": null,\n      \"grid_row\": null,\n      \"grid_template_areas\": null,\n      \"grid_template_columns\": null,\n      \"grid_template_rows\": null,\n      \"height\": null,\n      \"justify_content\": null,\n      \"justify_items\": null,\n      \"left\": null,\n      \"margin\": null,\n      \"max_height\": null,\n      \"max_width\": null,\n      \"min_height\": null,\n      \"min_width\": null,\n      \"object_fit\": null,\n      \"object_position\": null,\n      \"order\": null,\n      \"overflow\": null,\n      \"overflow_x\": null,\n      \"overflow_y\": null,\n      \"padding\": null,\n      \"right\": null,\n      \"top\": null,\n      \"visibility\": null,\n      \"width\": null\n     }\n    },\n    \"d5faaf8d200a4bbf9c1e9677af8fe257\": {\n     \"model_module\": \"@jupyter-widgets/base\",\n     \"model_module_version\": \"1.2.0\",\n     \"model_name\": \"LayoutModel\",\n     \"state\": {\n      \"_model_module\": \"@jupyter-widgets/base\",\n      \"_model_module_version\": \"1.2.0\",\n      \"_model_name\": \"LayoutModel\",\n      \"_view_count\": null,\n      \"_view_module\": \"@jupyter-widgets/base\",\n      \"_view_module_version\": \"1.2.0\",\n      \"_view_name\": \"LayoutView\",\n      \"align_content\": null,\n      \"align_items\": null,\n      \"align_self\": null,\n      \"border\": null,\n      \"bottom\": null,\n      \"display\": null,\n      \"flex\": null,\n      \"flex_flow\": null,\n      \"grid_area\": null,\n      \"grid_auto_columns\": null,\n      \"grid_auto_flow\": null,\n      \"grid_auto_rows\": null,\n      \"grid_column\": null,\n      \"grid_gap\": null,\n      \"grid_row\": null,\n      \"grid_template_areas\": null,\n      \"grid_template_columns\": null,\n      \"grid_template_rows\": null,\n      \"height\": null,\n      \"justify_content\": null,\n      \"justify_items\": null,\n      \"left\": null,\n      \"margin\": null,\n      \"max_height\": null,\n      \"max_width\": null,\n      \"min_height\": null,\n      \"min_width\": null,\n      \"object_fit\": null,\n      \"object_position\": null,\n      \"order\": null,\n      \"overflow\": null,\n      \"overflow_x\": null,\n      \"overflow_y\": null,\n      \"padding\": null,\n      \"right\": null,\n      \"top\": null,\n      \"visibility\": null,\n      \"width\": null\n     }\n    },\n    \"e2ad8a86c24c419581c204fd2ae2ba18\": {\n     \"model_module\": \"@jupyter-widgets/base\",\n     \"model_module_version\": \"1.2.0\",\n     \"model_name\": \"LayoutModel\",\n     \"state\": {\n      \"_model_module\": \"@jupyter-widgets/base\",\n      \"_model_module_version\": \"1.2.0\",\n      \"_model_name\": \"LayoutModel\",\n      \"_view_count\": null,\n      \"_view_module\": \"@jupyter-widgets/base\",\n      \"_view_module_version\": \"1.2.0\",\n      \"_view_name\": \"LayoutView\",\n      \"align_content\": null,\n      \"align_items\": null,\n      \"align_self\": null,\n      \"border\": null,\n      \"bottom\": null,\n      \"display\": null,\n      \"flex\": null,\n      \"flex_flow\": null,\n      \"grid_area\": null,\n      \"grid_auto_columns\": null,\n      \"grid_auto_flow\": null,\n      \"grid_auto_rows\": null,\n      \"grid_column\": null,\n      \"grid_gap\": null,\n      \"grid_row\": null,\n      \"grid_template_areas\": null,\n      \"grid_template_columns\": null,\n      \"grid_template_rows\": null,\n      \"height\": null,\n      \"justify_content\": null,\n      \"justify_items\": null,\n      \"left\": null,\n      \"margin\": null,\n      \"max_height\": null,\n      \"max_width\": null,\n      \"min_height\": null,\n      \"min_width\": null,\n      \"object_fit\": null,\n      \"object_position\": null,\n      \"order\": null,\n      \"overflow\": null,\n      \"overflow_x\": null,\n      \"overflow_y\": null,\n      \"padding\": null,\n      \"right\": null,\n      \"top\": null,\n      \"visibility\": null,\n      \"width\": null\n     }\n    }\n   }\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 4\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/STEGO_Colab_Demo.ipynb b/src/STEGO_Colab_Demo.ipynb
--- a/src/STEGO_Colab_Demo.ipynb	(revision c6be305e586f39b07663cb9bdb535828fe4047df)
+++ b/src/STEGO_Colab_Demo.ipynb	(date 1717598322362)
@@ -1,831 +1,13 @@
 {
  "cells": [
   {
-   "cell_type": "markdown",
-   "metadata": {
-    "id": "JmPYsg-B49tM"
-   },
-   "source": [
-    "# Prepare Google Colab Environment"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 1,
-   "metadata": {
-    "colab": {
-     "base_uri": "https://localhost:8080/"
-    },
-    "id": "GbkVr03HbnG4",
-    "outputId": "17fb7b43-ba13-4a58-d1b3-b2c538648651"
-   },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "fatal: destination path 'STEGO' already exists and is not an empty directory.\n"
-     ]
-    }
-   ],
-   "source": [
-    "!git clone https://github.com/mhamilton723/STEGO.git"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 2,
-   "metadata": {
-    "colab": {
-     "base_uri": "https://localhost:8080/",
-     "height": 1000
-    },
-    "id": "Q4z1D5fOda3F",
-    "outputId": "d3f974df-63a6-4717-ed6a-4d37a1abac05"
-   },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Requirement already satisfied: wget in /home/endrit/anaconda3/lib/python3.10/site-packages (3.2)\n",
-      "Requirement already satisfied: torchmetrics in /home/endrit/anaconda3/lib/python3.10/site-packages (0.11.4)\n",
-      "Requirement already satisfied: packaging in /home/endrit/anaconda3/lib/python3.10/site-packages (from torchmetrics) (22.0)\n",
-      "Requirement already satisfied: numpy>=1.17.2 in /home/endrit/anaconda3/lib/python3.10/site-packages (from torchmetrics) (1.23.5)\n",
-      "Requirement already satisfied: torch>=1.8.1 in /home/endrit/anaconda3/lib/python3.10/site-packages (from torchmetrics) (1.12.1)\n",
-      "Requirement already satisfied: typing_extensions in /home/endrit/anaconda3/lib/python3.10/site-packages (from torch>=1.8.1->torchmetrics) (4.4.0)\n",
-      "Requirement already satisfied: hydra-core in /home/endrit/anaconda3/lib/python3.10/site-packages (1.3.2)\n",
-      "Requirement already satisfied: antlr4-python3-runtime==4.9.* in /home/endrit/anaconda3/lib/python3.10/site-packages (from hydra-core) (4.9.3)\n",
-      "Requirement already satisfied: packaging in /home/endrit/anaconda3/lib/python3.10/site-packages (from hydra-core) (22.0)\n",
-      "Requirement already satisfied: omegaconf<2.4,>=2.2 in /home/endrit/anaconda3/lib/python3.10/site-packages (from hydra-core) (2.3.0)\n",
-      "Requirement already satisfied: PyYAML>=5.1.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from omegaconf<2.4,>=2.2->hydra-core) (6.0)\n",
-      "Collecting git+https://github.com/lucasb-eyer/pydensecrf.git\n",
-      "  Cloning https://github.com/lucasb-eyer/pydensecrf.git to /tmp/pip-req-build-_1nblw2f\n",
-      "  Running command git clone --filter=blob:none --quiet https://github.com/lucasb-eyer/pydensecrf.git /tmp/pip-req-build-_1nblw2f\n",
-      "  Resolved https://github.com/lucasb-eyer/pydensecrf.git to commit 0d53acbcf5123d4c88040fe68fbb9805fc5b2fb9\n",
-      "  Installing build dependencies ... \u001b[?25ldone\n",
-      "\u001b[?25h  Getting requirements to build wheel ... \u001b[?25ldone\n",
-      "\u001b[?25h  Preparing metadata (pyproject.toml) ... \u001b[?25ldone\n",
-      "\u001b[?25hRequirement already satisfied: omegaconf in /home/endrit/anaconda3/lib/python3.10/site-packages (2.3.0)\n",
-      "Requirement already satisfied: antlr4-python3-runtime==4.9.* in /home/endrit/anaconda3/lib/python3.10/site-packages (from omegaconf) (4.9.3)\n",
-      "Requirement already satisfied: PyYAML>=5.1.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from omegaconf) (6.0)\n",
-      "Requirement already satisfied: pytorch-lightning in /home/endrit/anaconda3/lib/python3.10/site-packages (2.0.2)\n",
-      "Requirement already satisfied: fsspec[http]>2021.06.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from pytorch-lightning) (2022.11.0)\n",
-      "Requirement already satisfied: lightning-utilities>=0.7.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from pytorch-lightning) (0.8.0)\n",
-      "Requirement already satisfied: numpy>=1.17.2 in /home/endrit/anaconda3/lib/python3.10/site-packages (from pytorch-lightning) (1.23.5)\n",
-      "Requirement already satisfied: torchmetrics>=0.7.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from pytorch-lightning) (0.11.4)\n",
-      "Requirement already satisfied: PyYAML>=5.4 in /home/endrit/anaconda3/lib/python3.10/site-packages (from pytorch-lightning) (6.0)\n",
-      "Requirement already satisfied: torch>=1.11.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from pytorch-lightning) (1.12.1)\n",
-      "Requirement already satisfied: typing-extensions>=4.0.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from pytorch-lightning) (4.4.0)\n",
-      "Requirement already satisfied: tqdm>=4.57.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from pytorch-lightning) (4.64.1)\n",
-      "Requirement already satisfied: packaging>=17.1 in /home/endrit/anaconda3/lib/python3.10/site-packages (from pytorch-lightning) (22.0)\n",
-      "Requirement already satisfied: requests in /home/endrit/anaconda3/lib/python3.10/site-packages (from fsspec[http]>2021.06.0->pytorch-lightning) (2.28.1)\n",
-      "Requirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /home/endrit/anaconda3/lib/python3.10/site-packages (from fsspec[http]>2021.06.0->pytorch-lightning) (3.8.4)\n",
-      "Requirement already satisfied: frozenlist>=1.1.1 in /home/endrit/anaconda3/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (1.3.3)\n",
-      "Requirement already satisfied: charset-normalizer<4.0,>=2.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (2.0.4)\n",
-      "Requirement already satisfied: yarl<2.0,>=1.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (1.9.2)\n",
-      "Requirement already satisfied: attrs>=17.3.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (22.1.0)\n",
-      "Requirement already satisfied: multidict<7.0,>=4.5 in /home/endrit/anaconda3/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (6.0.4)\n",
-      "Requirement already satisfied: aiosignal>=1.1.2 in /home/endrit/anaconda3/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (1.3.1)\n",
-      "Requirement already satisfied: async-timeout<5.0,>=4.0.0a3 in /home/endrit/anaconda3/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (4.0.2)\n",
-      "Requirement already satisfied: certifi>=2017.4.17 in /home/endrit/anaconda3/lib/python3.10/site-packages (from requests->fsspec[http]>2021.06.0->pytorch-lightning) (2023.5.7)\n",
-      "Requirement already satisfied: idna<4,>=2.5 in /home/endrit/anaconda3/lib/python3.10/site-packages (from requests->fsspec[http]>2021.06.0->pytorch-lightning) (3.4)\n",
-      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /home/endrit/anaconda3/lib/python3.10/site-packages (from requests->fsspec[http]>2021.06.0->pytorch-lightning) (1.26.14)\n"
-     ]
-    }
-   ],
-   "source": [
-    "!pip install wget\n",
-    "!pip install torchmetrics\n",
-    "!pip install hydra-core\n",
-    "!pip install git+https://github.com/lucasb-eyer/pydensecrf.git\n",
-    "!pip install omegaconf\n",
-    "!pip install pytorch-lightning"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {
-    "id": "N-CjEZdF5DSH"
-   },
-   "source": [
-    "# Download Pretrained Model\n",
-    "\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 3,
-   "metadata": {
-    "id": "hJ_XE2xHcImN"
-   },
-   "outputs": [],
-   "source": [
-    "import os\n",
-    "from os.path import join\n",
-    "os.chdir(\"STEGO/src\")\n",
-    "saved_models_dir = join(\"..\", \"saved_models\")\n",
-    "os.makedirs(saved_models_dir, exist_ok=True)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 4,
-   "metadata": {
-    "id": "knywSO7IcNc2"
-   },
-   "outputs": [],
-   "source": [
-    "import wget\n",
-    "saved_model_url_root = \"https://marhamilresearch4.blob.core.windows.net/stego-public/saved_models/\"\n",
-    "saved_model_name = \"cocostuff27_vit_base_5.ckpt\"\n",
-    "if not os.path.exists(join(saved_models_dir, saved_model_name)):\n",
-    "  wget.download(saved_model_url_root + saved_model_name, join(saved_models_dir, saved_model_name))"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {
-    "id": "rtwTZEkA7twI"
-   },
-   "source": [
-    "# Load pretrained STEGO"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 6,
-   "metadata": {
-    "colab": {
-     "base_uri": "https://localhost:8080/",
-     "height": 104,
-     "referenced_widgets": [
-      "5fa05203c234442a8c863a51f83bac9d",
-      "7cf007c8f7a94bc292f8243391cea7ca",
-      "5fa6b3215e01491d9534feadee79f706",
-      "41d2dacf744d4ecaa1f51174a6703334",
-      "d5faaf8d200a4bbf9c1e9677af8fe257",
-      "aeb7614c4d7e41eeab603a70fc80ed6a",
-      "41986d51df5b41d79187acaebafe3008",
-      "e2ad8a86c24c419581c204fd2ae2ba18",
-      "811c526bd6154969b7028307dcafd550",
-      "2d1d907c0d04492097e35a9ceddea9a2",
-      "6de033864a1b4397a93147091aedda65"
-     ]
-    },
-    "id": "RyBXeiGjdN8I",
-    "outputId": "33ae5c14-857a-48d5-cd4b-803daf82c326"
-   },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Collecting torchvision\n",
-      "  Downloading torchvision-0.15.2-cp310-cp310-manylinux1_x86_64.whl (6.0 MB)\n",
-      "\u001b[2K     \u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.0/6.0 MB\u001b[0m \u001b[31m4.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0mm eta \u001b[36m0:00:01\u001b[0m[36m0:00:01\u001b[0m\n",
-      "\u001b[?25hRequirement already satisfied: requests in /home/endrit/anaconda3/lib/python3.10/site-packages (from torchvision) (2.28.1)\n",
-      "Requirement already satisfied: pillow!=8.3.*,>=5.3.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from torchvision) (9.4.0)\n",
-      "Collecting torch==2.0.1\n",
-      "  Downloading torch-2.0.1-cp310-cp310-manylinux1_x86_64.whl (619.9 MB)\n",
-      "\u001b[2K     \u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m619.9/619.9 MB\u001b[0m \u001b[31m1.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0mm eta \u001b[36m0:00:01\u001b[0m[36m0:00:06\u001b[0m\n",
-      "\u001b[?25hRequirement already satisfied: numpy in /home/endrit/anaconda3/lib/python3.10/site-packages (from torchvision) (1.23.5)\n",
-      "Requirement already satisfied: sympy in /home/endrit/anaconda3/lib/python3.10/site-packages (from torch==2.0.1->torchvision) (1.11.1)\n",
-      "Collecting nvidia-nccl-cu11==2.14.3\n",
-      "  Downloading nvidia_nccl_cu11-2.14.3-py3-none-manylinux1_x86_64.whl (177.1 MB)\n",
-      "\u001b[2K     \u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m177.1/177.1 MB\u001b[0m \u001b[31m3.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0mm eta \u001b[36m0:00:01\u001b[0m[36m0:00:01\u001b[0m\n",
-      "\u001b[?25hRequirement already satisfied: jinja2 in /home/endrit/anaconda3/lib/python3.10/site-packages (from torch==2.0.1->torchvision) (3.1.2)\n",
-      "Requirement already satisfied: filelock in /home/endrit/anaconda3/lib/python3.10/site-packages (from torch==2.0.1->torchvision) (3.9.0)\n",
-      "Collecting nvidia-cuda-runtime-cu11==11.7.99\n",
-      "  Downloading nvidia_cuda_runtime_cu11-11.7.99-py3-none-manylinux1_x86_64.whl (849 kB)\n",
-      "\u001b[2K     \u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m849.3/849.3 kB\u001b[0m \u001b[31m6.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m[31m8.8 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\n",
-      "\u001b[?25hCollecting nvidia-cufft-cu11==10.9.0.58\n",
-      "  Downloading nvidia_cufft_cu11-10.9.0.58-py3-none-manylinux1_x86_64.whl (168.4 MB)\n",
-      "\u001b[2K     \u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m168.4/168.4 MB\u001b[0m \u001b[31m3.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0mm eta \u001b[36m0:00:01\u001b[0m[36m0:00:01\u001b[0m\n",
-      "\u001b[?25hCollecting nvidia-cusolver-cu11==11.4.0.1\n",
-      "  Downloading nvidia_cusolver_cu11-11.4.0.1-2-py3-none-manylinux1_x86_64.whl (102.6 MB)\n",
-      "\u001b[2K     \u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m102.6/102.6 MB\u001b[0m \u001b[31m3.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0mm eta \u001b[36m0:00:01\u001b[0m[36m0:00:01\u001b[0m\n",
-      "\u001b[?25hRequirement already satisfied: networkx in /home/endrit/anaconda3/lib/python3.10/site-packages (from torch==2.0.1->torchvision) (2.8.4)\n",
-      "Collecting nvidia-cusparse-cu11==11.7.4.91\n",
-      "  Downloading nvidia_cusparse_cu11-11.7.4.91-py3-none-manylinux1_x86_64.whl (173.2 MB)\n",
-      "\u001b[2K     \u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m173.2/173.2 MB\u001b[0m \u001b[31m3.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0mm eta \u001b[36m0:00:01\u001b[0m[36m0:00:01\u001b[0m\n",
-      "\u001b[?25hCollecting nvidia-curand-cu11==10.2.10.91\n",
-      "  Downloading nvidia_curand_cu11-10.2.10.91-py3-none-manylinux1_x86_64.whl (54.6 MB)\n",
-      "\u001b[2K     \u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m54.6/54.6 MB\u001b[0m \u001b[31m4.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0mm eta \u001b[36m0:00:01\u001b[0m[36m0:00:01\u001b[0m\n",
-      "\u001b[?25hCollecting nvidia-nvtx-cu11==11.7.91\n",
-      "  Downloading nvidia_nvtx_cu11-11.7.91-py3-none-manylinux1_x86_64.whl (98 kB)\n",
-      "\u001b[2K     \u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m98.6/98.6 kB\u001b[0m \u001b[31m5.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
-      "\u001b[?25hRequirement already satisfied: typing-extensions in /home/endrit/anaconda3/lib/python3.10/site-packages (from torch==2.0.1->torchvision) (4.4.0)\n",
-      "Collecting nvidia-cublas-cu11==11.10.3.66\n",
-      "  Downloading nvidia_cublas_cu11-11.10.3.66-py3-none-manylinux1_x86_64.whl (317.1 MB)\n",
-      "\u001b[2K     \u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m317.1/317.1 MB\u001b[0m \u001b[31m1.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0mm eta \u001b[36m0:00:01\u001b[0m[36m0:00:05\u001b[0m\n",
-      "\u001b[?25hCollecting nvidia-cuda-cupti-cu11==11.7.101\n",
-      "  Downloading nvidia_cuda_cupti_cu11-11.7.101-py3-none-manylinux1_x86_64.whl (11.8 MB)\n",
-      "\u001b[2K     \u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m11.8/11.8 MB\u001b[0m \u001b[31m1.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0mm eta \u001b[36m0:00:01\u001b[0m0:01\u001b[0m:01\u001b[0m\n",
-      "\u001b[?25hCollecting nvidia-cuda-nvrtc-cu11==11.7.99\n",
-      "  Downloading nvidia_cuda_nvrtc_cu11-11.7.99-2-py3-none-manylinux1_x86_64.whl (21.0 MB)\n",
-      "\u001b[2K     \u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.0/21.0 MB\u001b[0m \u001b[31m1.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0mm eta \u001b[36m0:00:01\u001b[0m[36m0:00:01\u001b[0m\n",
-      "\u001b[?25hCollecting triton==2.0.0\n",
-      "  Downloading triton-2.0.0-1-cp310-cp310-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (63.3 MB)\n",
-      "\u001b[2K     \u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m63.3/63.3 MB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0mm eta \u001b[36m0:00:01\u001b[0m[36m0:00:01\u001b[0m\n",
-      "\u001b[?25hCollecting nvidia-cudnn-cu11==8.5.0.96\n",
-      "  Downloading nvidia_cudnn_cu11-8.5.0.96-2-py3-none-manylinux1_x86_64.whl (557.1 MB)\n",
-      "\u001b[2K     \u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m557.1/557.1 MB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0mm eta \u001b[36m0:00:01\u001b[0m[36m0:00:03\u001b[0m\n",
-      "\u001b[?25hRequirement already satisfied: wheel in /home/endrit/anaconda3/lib/python3.10/site-packages (from nvidia-cublas-cu11==11.10.3.66->torch==2.0.1->torchvision) (0.38.4)\n",
-      "Requirement already satisfied: setuptools in /home/endrit/anaconda3/lib/python3.10/site-packages (from nvidia-cublas-cu11==11.10.3.66->torch==2.0.1->torchvision) (65.6.3)\n",
-      "Collecting cmake\n",
-      "  Downloading cmake-3.26.3-py2.py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (24.0 MB)\n",
-      "\u001b[2K     \u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.0/24.0 MB\u001b[0m \u001b[31m4.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0mm eta \u001b[36m0:00:01\u001b[0m[36m0:00:01\u001b[0m\n",
-      "\u001b[?25hCollecting lit\n",
-      "  Downloading lit-16.0.5.tar.gz (138 kB)\n",
-      "\u001b[2K     \u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m138.0/138.0 kB\u001b[0m \u001b[31m2.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m[31m5.8 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\n",
-      "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25ldone\n",
-      "\u001b[?25hRequirement already satisfied: certifi>=2017.4.17 in /home/endrit/anaconda3/lib/python3.10/site-packages (from requests->torchvision) (2023.5.7)\n",
-      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /home/endrit/anaconda3/lib/python3.10/site-packages (from requests->torchvision) (1.26.14)\n",
-      "Requirement already satisfied: idna<4,>=2.5 in /home/endrit/anaconda3/lib/python3.10/site-packages (from requests->torchvision) (3.4)\n",
-      "Requirement already satisfied: charset-normalizer<3,>=2 in /home/endrit/anaconda3/lib/python3.10/site-packages (from requests->torchvision) (2.0.4)\n",
-      "Requirement already satisfied: MarkupSafe>=2.0 in /home/endrit/anaconda3/lib/python3.10/site-packages (from jinja2->torch==2.0.1->torchvision) (2.1.1)\n",
-      "Requirement already satisfied: mpmath>=0.19 in /home/endrit/anaconda3/lib/python3.10/site-packages/mpmath-1.2.1-py3.10.egg (from sympy->torch==2.0.1->torchvision) (1.2.1)\n",
-      "Building wheels for collected packages: lit\n",
-      "  Building wheel for lit (setup.py) ... \u001b[?25ldone\n",
-      "\u001b[?25h  Created wheel for lit: filename=lit-16.0.5-py3-none-any.whl size=88174 sha256=0b4ccc2d83d9043a5b23e1ca8facc4c4a5de200861cac9f8edfdc256e75925ad\n",
-      "  Stored in directory: /home/endrit/.cache/pip/wheels/eb/02/84/d82f0b1a6098209edf7e3607be6cc592ebbc015a8a3127c68d\n",
-      "Successfully built lit\n",
-      "Installing collected packages: lit, cmake, nvidia-nvtx-cu11, nvidia-nccl-cu11, nvidia-cusparse-cu11, nvidia-curand-cu11, nvidia-cufft-cu11, nvidia-cuda-runtime-cu11, nvidia-cuda-nvrtc-cu11, nvidia-cuda-cupti-cu11, nvidia-cublas-cu11, nvidia-cusolver-cu11, nvidia-cudnn-cu11, triton, torch, torchvision\n",
-      "  Attempting uninstall: torch\n",
-      "    Found existing installation: torch 1.12.1\n",
-      "    Uninstalling torch-1.12.1:\n",
-      "      Successfully uninstalled torch-1.12.1\n",
-      "Successfully installed cmake-3.26.3 lit-16.0.5 nvidia-cublas-cu11-11.10.3.66 nvidia-cuda-cupti-cu11-11.7.101 nvidia-cuda-nvrtc-cu11-11.7.99 nvidia-cuda-runtime-cu11-11.7.99 nvidia-cudnn-cu11-8.5.0.96 nvidia-cufft-cu11-10.9.0.58 nvidia-curand-cu11-10.2.10.91 nvidia-cusolver-cu11-11.4.0.1 nvidia-cusparse-cu11-11.7.4.91 nvidia-nccl-cu11-2.14.3 nvidia-nvtx-cu11-11.7.91 torch-2.0.1 torchvision-0.15.2 triton-2.0.0\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/home/endrit/anaconda3/lib/python3.10/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: 'libc10_cuda.so: cannot open shared object file: No such file or directory'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?\n",
-      "  warn(\n"
-     ]
-    },
-    {
-     "ename": "ImportError",
-     "evalue": "cannot import name '_get_cpp_backtrace' from 'torch._C' (/home/endrit/anaconda3/lib/python3.10/site-packages/torch/_C.cpython-310-x86_64-linux-gnu.so)",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)",
-      "Cell \u001b[0;32mIn[6], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m get_ipython()\u001b[38;5;241m.\u001b[39msystem(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mpip install torchvision\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m----> 2\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtrain_segmentation\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m LitUnsupervisedSegmenter\n\u001b[1;32m      4\u001b[0m model \u001b[38;5;241m=\u001b[39m LitUnsupervisedSegmenter\u001b[38;5;241m.\u001b[39mload_from_checkpoint(join(saved_models_dir, saved_model_name))\u001b[38;5;241m.\u001b[39mcuda()\n",
-      "File \u001b[0;32m~/STEGO/src/train_segmentation.py:1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mutils\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;241m*\u001b[39m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mmodules\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;241m*\u001b[39m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mdata\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;241m*\u001b[39m\n",
-      "File \u001b[0;32m~/STEGO/src/utils.py:18\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutils\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mdata\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01m_utils\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mcollate\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m np_str_obj_array_pattern, default_collate_err_msg_format\n\u001b[1;32m     17\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorchmetrics\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Metric\n\u001b[0;32m---> 18\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorchvision\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m models\n\u001b[1;32m     19\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorchvision\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m transforms \u001b[38;5;28;01mas\u001b[39;00m T\n\u001b[1;32m     20\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutils\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mtensorboard\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01msummary\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m hparams\n",
-      "File \u001b[0;32m~/anaconda3/lib/python3.10/site-packages/torchvision/__init__.py:6\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mmodulefinder\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Module\n\u001b[1;32m      5\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\n\u001b[0;32m----> 6\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorchvision\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m datasets, io, models, ops, transforms, utils\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mextension\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m _HAS_OPS\n\u001b[1;32m     10\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n",
-      "File \u001b[0;32m~/anaconda3/lib/python3.10/site-packages/torchvision/models/__init__.py:2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01malexnet\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;241m*\u001b[39m\n\u001b[0;32m----> 2\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mconvnext\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;241m*\u001b[39m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mdensenet\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;241m*\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mefficientnet\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;241m*\u001b[39m\n",
-      "File \u001b[0;32m~/anaconda3/lib/python3.10/site-packages/torchvision/models/convnext.py:8\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m nn, Tensor\n\u001b[1;32m      6\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mnn\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m functional \u001b[38;5;28;01mas\u001b[39;00m F\n\u001b[0;32m----> 8\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mops\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mmisc\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Conv2dNormActivation, Permute\n\u001b[1;32m      9\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mops\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mstochastic_depth\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m StochasticDepth\n\u001b[1;32m     10\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mtransforms\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01m_presets\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m ImageClassification\n",
-      "File \u001b[0;32m~/anaconda3/lib/python3.10/site-packages/torchvision/ops/__init__.py:1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01m_register_onnx_ops\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m _register_custom_op\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mboxes\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m (\n\u001b[1;32m      3\u001b[0m     batched_nms,\n\u001b[1;32m      4\u001b[0m     box_area,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     13\u001b[0m     remove_small_boxes,\n\u001b[1;32m     14\u001b[0m )\n\u001b[1;32m     15\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mciou_loss\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m complete_box_iou_loss\n",
-      "File \u001b[0;32m~/anaconda3/lib/python3.10/site-packages/torchvision/ops/_register_onnx_ops.py:5\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mwarnings\u001b[39;00m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01monnx\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m symbolic_opset11 \u001b[38;5;28;01mas\u001b[39;00m opset11\n\u001b[1;32m      6\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01monnx\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01msymbolic_helper\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m parse_args\n\u001b[1;32m      8\u001b[0m _ONNX_OPSET_VERSION_11 \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m11\u001b[39m\n",
-      "File \u001b[0;32m~/anaconda3/lib/python3.10/site-packages/torch/onnx/symbolic_opset11.py:12\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m _C\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01m_C\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m _onnx \u001b[38;5;28;01mas\u001b[39;00m _C_onnx\n\u001b[0;32m---> 12\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01monnx\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m (\n\u001b[1;32m     13\u001b[0m     _type_utils,\n\u001b[1;32m     14\u001b[0m     errors,\n\u001b[1;32m     15\u001b[0m     symbolic_helper,\n\u001b[1;32m     16\u001b[0m     symbolic_opset10 \u001b[38;5;28;01mas\u001b[39;00m opset10,\n\u001b[1;32m     17\u001b[0m     symbolic_opset9 \u001b[38;5;28;01mas\u001b[39;00m opset9,\n\u001b[1;32m     18\u001b[0m     utils,\n\u001b[1;32m     19\u001b[0m )\n\u001b[1;32m     20\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01monnx\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01m_globals\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m GLOBALS\n\u001b[1;32m     21\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01monnx\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01m_internal\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m _beartype, jit_utils, registration\n",
-      "File \u001b[0;32m~/anaconda3/lib/python3.10/site-packages/torch/onnx/_type_utils.py:10\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\n\u001b[1;32m      9\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01m_C\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m _onnx \u001b[38;5;28;01mas\u001b[39;00m _C_onnx\n\u001b[0;32m---> 10\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01monnx\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m errors\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01monnx\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01m_internal\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m _beartype\n\u001b[1;32m     14\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m typing\u001b[38;5;241m.\u001b[39mTYPE_CHECKING:\n\u001b[1;32m     15\u001b[0m     \u001b[38;5;66;03m# Hack to help mypy to recognize torch._C.Value\u001b[39;00m\n",
-      "File \u001b[0;32m~/anaconda3/lib/python3.10/site-packages/torch/onnx/errors.py:9\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m _C\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01monnx\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m _constants\n\u001b[0;32m----> 9\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01monnx\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01m_internal\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m diagnostics\n\u001b[1;32m     11\u001b[0m __all__ \u001b[38;5;241m=\u001b[39m [\n\u001b[1;32m     12\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mOnnxExporterError\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m     13\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mOnnxExporterWarning\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     17\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mSymbolicValueError\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m     18\u001b[0m ]\n\u001b[1;32m     21\u001b[0m \u001b[38;5;28;01mclass\u001b[39;00m \u001b[38;5;21;01mOnnxExporterWarning\u001b[39;00m(\u001b[38;5;167;01mUserWarning\u001b[39;00m):\n",
-      "File \u001b[0;32m~/anaconda3/lib/python3.10/site-packages/torch/onnx/_internal/diagnostics/__init__.py:1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01m_diagnostic\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m (\n\u001b[1;32m      2\u001b[0m     create_export_diagnostic_context,\n\u001b[1;32m      3\u001b[0m     diagnose,\n\u001b[1;32m      4\u001b[0m     engine,\n\u001b[1;32m      5\u001b[0m     export_context,\n\u001b[1;32m      6\u001b[0m     ExportDiagnostic,\n\u001b[1;32m      7\u001b[0m )\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01m_rules\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m rules\n\u001b[1;32m      9\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01minfra\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m levels\n",
-      "File \u001b[0;32m~/anaconda3/lib/python3.10/site-packages/torch/onnx/_internal/diagnostics/_diagnostic.py:11\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\n\u001b[1;32m     10\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01monnx\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01m_internal\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mdiagnostics\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m infra\n\u001b[0;32m---> 11\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutils\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m cpp_backtrace\n\u001b[1;32m     14\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_cpp_call_stack\u001b[39m(frames_to_skip: \u001b[38;5;28mint\u001b[39m \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m, frames_to_log: \u001b[38;5;28mint\u001b[39m \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m32\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m infra\u001b[38;5;241m.\u001b[39mStack:\n\u001b[1;32m     15\u001b[0m     \u001b[38;5;124;03m\"\"\"Returns the current C++ call stack.\u001b[39;00m\n\u001b[1;32m     16\u001b[0m \n\u001b[1;32m     17\u001b[0m \u001b[38;5;124;03m    This function utilizes `torch.utils.cpp_backtrace` to get the current C++ call stack.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     21\u001b[0m \n\u001b[1;32m     22\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n",
-      "File \u001b[0;32m~/anaconda3/lib/python3.10/site-packages/torch/utils/cpp_backtrace.py:1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01m_C\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m _get_cpp_backtrace\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mget_cpp_backtrace\u001b[39m(frames_to_skip\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m, maximum_number_of_frames\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m64\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28mstr\u001b[39m:\n\u001b[1;32m      4\u001b[0m     \u001b[38;5;124mr\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m      5\u001b[0m \u001b[38;5;124;03m    Returns a string containing the C++ stack trace of the current thread.\u001b[39;00m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;124;03m    Args:\u001b[39;00m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;124;03m        frames_to_skip (int): the number of frames to skip from the top of the stack\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;124;03m        maximum_number_of_frames (int): the maximum number of frames to return\u001b[39;00m\n\u001b[1;32m      9\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n",
-      "\u001b[0;31mImportError\u001b[0m: cannot import name '_get_cpp_backtrace' from 'torch._C' (/home/endrit/anaconda3/lib/python3.10/site-packages/torch/_C.cpython-310-x86_64-linux-gnu.so)"
-     ]
-    }
-   ],
-   "source": [
-    "!pip install torchvision\n",
-    "from train_segmentation import LitUnsupervisedSegmenter\n",
-    "\n",
-    "model = LitUnsupervisedSegmenter.load_from_checkpoint(join(saved_models_dir, saved_model_name)).cuda()"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {
-    "id": "ATktWg_hBbuS"
-   },
-   "source": [
-    "# Load Image"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 6,
-   "metadata": {
-    "colab": {
-     "base_uri": "https://localhost:8080/"
-    },
-    "id": "Ku-prYXZ8quf",
-    "outputId": "f3c132f1-f380-4431-ed6d-7d158d3af41b"
-   },
-   "outputs": [
-    {
-     "ename": "ModuleNotFoundError",
-     "evalue": "No module named 'torchvision'",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
-      "Cell \u001b[0;32mIn[6], line 4\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mrequests\u001b[39;00m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mio\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m BytesIO\n\u001b[0;32m----> 4\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtorchvision\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mtransforms\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfunctional\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m to_tensor\n\u001b[1;32m      5\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mutils\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m get_transform\n\u001b[1;32m      7\u001b[0m img_url \u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhttps://marhamilresearch4.blob.core.windows.net/stego-public/sample_images/moto1.jpg\u001b[39m\u001b[38;5;124m\"\u001b[39m\n",
-      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'torchvision'"
-     ]
-    }
-   ],
-   "source": [
-    "from PIL import Image\n",
-    "import requests\n",
-    "from io import BytesIO\n",
-    "from torchvision.transforms.functional import to_tensor\n",
-    "from utils import get_transform\n",
-    "\n",
-    "img_url =\"https://marhamilresearch4.blob.core.windows.net/stego-public/sample_images/moto1.jpg\"\n",
-    "response = requests.get(img_url)\n",
-    "img = Image.open(BytesIO(response.content))\n",
-    "transform = get_transform(448, False, \"center\")\n",
-    "img = transform(img).unsqueeze(0).cuda()"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {
-    "id": "5xXhpW6BBeWz"
-   },
-   "source": [
-    "# Query model and pass result through CRF"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 9,
-   "metadata": {
-    "id": "e0hvX1KX30SC"
-   },
-   "outputs": [
-    {
-     "ename": "ModuleNotFoundError",
-     "evalue": "No module named 'torchvision'",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
-      "Cell \u001b[0;32mIn[9], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mnn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfunctional\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mF\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mcrf\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m dense_crf\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\n\u001b[1;32m      5\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m torch\u001b[38;5;241m.\u001b[39mno_grad():\n",
-      "File \u001b[0;32m~/STEGO/src/crf.py:10\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\n\u001b[1;32m      9\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mnn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfunctional\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mF\u001b[39;00m\n\u001b[0;32m---> 10\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorchvision\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mtransforms\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfunctional\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mVF\u001b[39;00m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mutils\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m unnorm\n\u001b[1;32m     13\u001b[0m MAX_ITER \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m10\u001b[39m\n",
-      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'torchvision'"
-     ]
-    }
-   ],
-   "source": [
-    "import torch.nn.functional as F\n",
-    "from crf import dense_crf\n",
-    "import torch\n",
-    "\n",
-    "with torch.no_grad():\n",
-    "  code1 = model(img)\n",
-    "  code2 = model(img.flip(dims=[3]))\n",
-    "  code  = (code1 + code2.flip(dims=[3])) / 2\n",
-    "  code = F.interpolate(code, img.shape[-2:], mode='bilinear', align_corners=False)\n",
-    "  linear_probs = torch.log_softmax(model.linear_probe(code), dim=1).cpu()\n",
-    "  cluster_probs = model.cluster_probe(code, 2, log_probs=True).cpu()\n",
-    "\n",
-    "  single_img = img[0].cpu()\n",
-    "  linear_pred = dense_crf(single_img, linear_probs[0]).argmax(0)\n",
-    "  cluster_pred = dense_crf(single_img, cluster_probs[0]).argmax(0)"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {
-    "id": "BxPO9i4rBjpH"
-   },
-   "source": [
-    "# Visualize Result\n",
-    "\n",
-    "Note that cluster predictions will not be matched with ground truth classes in this example. For hungarian matching please use: `eval_segmentation.py`"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 12,
-   "metadata": {
-    "colab": {
-     "base_uri": "https://localhost:8080/",
-     "height": 314
-    },
-    "id": "3G7CIyYG-hXj",
-    "outputId": "4731d8de-d772-4818-9d14-679de5af7060"
-   },
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
-     ]
-    },
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 1080x360 with 3 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "import matplotlib.pyplot as plt\n",
-    "from utils import unnorm, remove_axes\n",
-    "fig, ax = plt.subplots(1,3, figsize=(5*3,5))\n",
-    "ax[0].imshow(unnorm(img)[0].permute(1,2,0).cpu())\n",
-    "ax[0].set_title(\"Image\")\n",
-    "ax[1].imshow(model.label_cmap[cluster_pred])\n",
-    "ax[1].set_title(\"Cluster Predictions\")\n",
-    "ax[2].imshow(model.label_cmap[linear_pred])\n",
-    "ax[2].set_title(\"Linear Probe Predictions\")\n",
-    "remove_axes(ax)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {
-    "id": "IZtla3AI-uTX"
-   },
-   "outputs": [],
-   "source": []
+   "metadata": {},
+   "cell_type": "raw",
+   "source": "",
+   "id": "290685329325b002"
   }
  ],
- "metadata": {
-  "accelerator": "GPU",
-  "colab": {
-   "name": "STEGO Colab Demo.ipynb",
-   "provenance": []
-  },
-  "kernelspec": {
-   "display_name": "Python 3 (ipykernel)",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.10.9"
-  },
-  "widgets": {
-   "application/vnd.jupyter.widget-state+json": {
-    "2d1d907c0d04492097e35a9ceddea9a2": {
-     "model_module": "@jupyter-widgets/base",
-     "model_module_version": "1.2.0",
-     "model_name": "LayoutModel",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "41986d51df5b41d79187acaebafe3008": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_module_version": "1.5.0",
-     "model_name": "DescriptionStyleModel",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "DescriptionStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "description_width": ""
-     }
-    },
-    "41d2dacf744d4ecaa1f51174a6703334": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_module_version": "1.5.0",
-     "model_name": "HTMLModel",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HTMLModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HTMLView",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_2d1d907c0d04492097e35a9ceddea9a2",
-      "placeholder": "​",
-      "style": "IPY_MODEL_6de033864a1b4397a93147091aedda65",
-      "value": " 327M/327M [00:15&lt;00:00, 25.4MB/s]"
-     }
-    },
-    "5fa05203c234442a8c863a51f83bac9d": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_module_version": "1.5.0",
-     "model_name": "HBoxModel",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HBoxModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HBoxView",
-      "box_style": "",
-      "children": [
-       "IPY_MODEL_7cf007c8f7a94bc292f8243391cea7ca",
-       "IPY_MODEL_5fa6b3215e01491d9534feadee79f706",
-       "IPY_MODEL_41d2dacf744d4ecaa1f51174a6703334"
-      ],
-      "layout": "IPY_MODEL_d5faaf8d200a4bbf9c1e9677af8fe257"
-     }
-    },
-    "5fa6b3215e01491d9534feadee79f706": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_module_version": "1.5.0",
-     "model_name": "FloatProgressModel",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "FloatProgressModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "ProgressView",
-      "bar_style": "success",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_e2ad8a86c24c419581c204fd2ae2ba18",
-      "max": 343279349,
-      "min": 0,
-      "orientation": "horizontal",
-      "style": "IPY_MODEL_811c526bd6154969b7028307dcafd550",
-      "value": 343279349
-     }
-    },
-    "6de033864a1b4397a93147091aedda65": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_module_version": "1.5.0",
-     "model_name": "DescriptionStyleModel",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "DescriptionStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "description_width": ""
-     }
-    },
-    "7cf007c8f7a94bc292f8243391cea7ca": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_module_version": "1.5.0",
-     "model_name": "HTMLModel",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HTMLModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HTMLView",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_aeb7614c4d7e41eeab603a70fc80ed6a",
-      "placeholder": "​",
-      "style": "IPY_MODEL_41986d51df5b41d79187acaebafe3008",
-      "value": "100%"
-     }
-    },
-    "811c526bd6154969b7028307dcafd550": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_module_version": "1.5.0",
-     "model_name": "ProgressStyleModel",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "ProgressStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "bar_color": null,
-      "description_width": ""
-     }
-    },
-    "aeb7614c4d7e41eeab603a70fc80ed6a": {
-     "model_module": "@jupyter-widgets/base",
-     "model_module_version": "1.2.0",
-     "model_name": "LayoutModel",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "d5faaf8d200a4bbf9c1e9677af8fe257": {
-     "model_module": "@jupyter-widgets/base",
-     "model_module_version": "1.2.0",
-     "model_name": "LayoutModel",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "e2ad8a86c24c419581c204fd2ae2ba18": {
-     "model_module": "@jupyter-widgets/base",
-     "model_module_version": "1.2.0",
-     "model_name": "LayoutModel",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    }
-   }
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 4
+ "metadata": {},
+ "nbformat": 5,
+ "nbformat_minor": 9
 }
